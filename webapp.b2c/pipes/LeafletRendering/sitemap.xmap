<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
<!--
 + BHE: Lighting Rendering
 +
 + A new channel is needed for this export (may need to modify values like division, brand, etc.:
SET DEFINE OFF;

Insert into CHANNELS
   (ID, NAME, LOCALE, LOCATION, TYPE, PIPELINE, MACHINEAFFINITY, STARTEXEC, ENDEXEC, CATALOG, RESULTCODE, SEQUENCE)
Values
   ('988', 'LightingB2BRendering', 'en_GB', 'LightingB2BRendering', 'export', 'pipes/LightingB2BRendering/runPipeline', 'all()', TO_DATE('09/29/2009 14:13:56', 'MM/DD/YYYY HH24:MI:SS'), TO_DATE('09/29/2009 14:13:57', 'MM/DD/YYYY HH24:MI:SS'), 'ALL', NULL, 749)
;
+ de inserts in CHANNEL_CATALOGS o.b.v.:

select 'insert into CHANNEL_CATALOGS
   (CUSTOMER_ID, LOCALE, CATALOG_TYPE, DIVISION, BRAND, PRODUCT_TYPE, ENABLED, LOCALEENABLED, MASTERLOCALEENABLED) 
values 
   (''988'', '''||ll.locale||''', ''CONSUMER'', ''ALL'', ''ALL'',''NORMAL'', 1, 1, 0);'
from locale_language ll;

 +-->
 
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>

  <map:components>
    <map:generators>
      <map:generator label="content" logger="sitemap.generator.hssf"
                     name="xls" pool-max="${hssf-generator.pool-max}"
                     src="org.apache.cocoon.generation.HSSFGenerator"/>
    </map:generators>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
	  </map:transformers>

     <map:selectors>
       <map:selector name="parameter" logger="sitemap.selector.parameter" src="org.apache.cocoon.selection.ParameterSelector"/>
     </map:selectors>

     <map:selector name="exception" logger="sitemap.selector.exception" src="org.apache.cocoon.selection.ExceptionSelector">
        <exception name="not-found" class="org.apache.cocoon.ResourceNotFoundException"/>
        <!-- The statement below tells the selector to unroll as much exceptions as possible -->
        <exception class="java.lang.Throwable" unroll="true"/>
     </map:selector>

     <map:actions>
       <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
     </map:actions>

     <map:serializers>
       <map:serializer logger="sitemap.serializer.xml" mime-type="text/xml" name="xml-indented" src="org.apache.cocoon.serialization.XMLSerializer">
         <encoding>UTF-8</encoding>
         <indent>yes</indent>
       </map:serializer>
     </map:serializers>

     <!-- needed to execute a shellscript on the unix box. -->
     <map:readers default="resource">
       <map:reader name="exec" src="org.apache.cocoon.reading.ShellScriptExecute"/>
     </map:readers>
  </map:components>
  
  <!--
    Request parameters:
    
    threads   The number of concurrent threads that can be used.
    limit     The maximum number of inbox files to process in a run.
  -->
  <map:pipelines>
    <!-- Note: the rendering engine needs absolute paths for the directories. These variables are set in the cmc2.properties-file 
      -->
    <map:component-configurations>
      <global-variables>
		<channel>LeafletRendering</channel>
        <ldir>LeafletRendering/</ldir>
      </global-variables>
    </map:component-configurations>

    <!--- -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <!--- -->
      <map:match pattern="runPipeline">
        <map:act type="synced-copy-source" src="cocoon:/exportStart/{date:yyyyMMddHHmmss}">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}logs/Report{date:yyyyMMddHHmmss}.xml"/>
          <map:generate src="../common/xml/empty.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="exportStart/*">
        <!-- Set Start Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>

        <!-- Delete all files in the {global:gdir}{global:ldir}temp directory. 
         +   Write the results of this action to a report.
         +-->
        <map:act type="copy-source" src="cocoon:/deleteFiles/temp">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTempFiles.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/deleteFiles/archive_ftp">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteArchive_ftpFiles.xml"/>
        </map:act>

        <!-- Decrease number of files to be processed: keep most recent file for a product/family -->
        <map:act type="copy-source" src="cocoon:/deleteDuplicateFilesFromInbox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteDuplicateFilesFromInbox.xml"/>
        </map:act>

        <!-- Process the result files from CCR --> 
        <map:act type="copy-source" src="cocoon:/processCCRResults/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportProcessCCRResults.xml"/>
        </map:act>

        <!-- Prepare for rendering (image conversion, ...) -->
        <map:act type="copy-source" src="cocoon:/prepareLeaflets/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportPrepareLeaflets.xml"/>
        </map:act>

        <!-- Retrieve the Product definitions from the inbox and render the leaflets. -->
        <map:act type="copy-source" src="cocoon:/renderLeaflets/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportRenderLeaflets.xml"/>
        </map:act>

        <!-- Send files to CCR (through archive-dir, which is sym.linked to the CCR-ftp directory. --> 
        <map:act type="copy-source" src="cocoon:/sendLeaflets2CCR/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSendLeaflets2CCR.xml"/>
        </map:act>

        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportFinal.xml"/>
        </map:act>
         <map:aggregate element="reports">
           <map:part src="{global:gdir}{global:ldir}temp/ReportFinal.xml"/>
           <map:part src="{global:gdir}{global:ldir}temp/ReportProcessCCRResults.xml"/>
           <map:part src="{global:gdir}{global:ldir}temp/ReportPrepareLeaflets.xml"/>
           <map:part src="{global:gdir}{global:ldir}temp/ReportRenderLeaflets.xml"/>
           <map:part src="{global:gdir}{global:ldir}temp/ReportSendLeaflets2CCR.xml"/>
         </map:aggregate>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="processParallelBatch/**">
        <map:generate src="{1}"/>
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Part 1: Image conversion
        
        {1} timestamp
      -->
      <map:match pattern="prepareLeaflets/*">
        <!-- Retrieve all product files from inbox -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml$"/>
        </map:generate>
        <!-- Create batches from the inbox files to process each batch's contents concurrently.
             Each batch call extractAssetInfo to extract relevant assets info.
        -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/dir2batchprocess.xsl">
          <map:parameter name="process" value="cocoon:/extractAssetInfo/"/>
          <map:parameter name="root-dir" value="{global:gdir}{global:ldir}"/>
          <map:parameter name="output-dir" value="{global:gdir}{global:ldir}temp"/>
          <map:parameter name="batch-size" value="{request-param:threads}"/>
          <map:parameter name="prefix" value="batch.extractAssetInfo."/>
          <map:parameter name="limit" value="{request-param:limit}"/>
        </map:transform>
        <!-- Write the batches -->
        <map:transform type="write-source"/>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/processParallelBatch"/>
        </map:transform>
        <!-- Process all batches -->
        <map:transform type="include"/>
        <!-- Merge the batches into one list of unique assets -->
        <map:transform type="xslt-saxon" src="xsl/mergeAssetInfo.xsl"/>
        <!-- Create batches to process the assets for conversion or copying
             There will be as many batches as there are threads (or less
             if the number of assets is less than the number of threads),
             all of which will be processed concurrently. -->
        <map:transform type="xslt-saxon" src="xsl/createProcessAssetBatches.xsl">
          <map:parameter name="process" value="cocoon:/extractAssetInfo/"/>
          <map:parameter name="root-dir" value="{global:gdir}{global:ldir}"/>
          <map:parameter name="output-dir" value="{global:gdir}{global:ldir}temp"/>
          <map:parameter name="threads" value="{request-param:threads}"/>
          <map:parameter name="prefix" value="batch.processAssets."/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/processAssetBatch/{1}"/>
        </map:transform>
        <!-- Process all batches -->
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Extract asset information from an inbox file.
        Only for files that were modified compared to the cached version.
        Files that were not modified will be removed from the inbox.
        {1} path
        {2) product or family ID
        {3} locale
        {4} timestamp 
      -->
      <map:match pattern="extractAssetInfo/**/*.*.*.xml">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}cache/{2}/{3}/{2}.{3}.xml">
            <!-- Compare inbox file with cached file -->
            <map:aggregate element="cache-compare">
              <map:part src="{1}/{2}.{3}.{4}.xml"/>
              <map:part src="{global:gdir}{global:ldir}cache/{2}/{3}/{2}.{3}.xml"/>
            </map:aggregate>
            <map:transform type="xslt-saxon" src="xsl/shell2delete_comparecached.xsl">
              <map:parameter name="source-file" value="{1}/{2}.{3}.{4}.xml"/>
            </map:transform>
            <!-- Remove file if it wasn't modified -->
            <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <map:generate src="{1}/{2}.{3}.{4}.xml"/>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/extractAssetInfo.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- 
        {1} timestamp
        {2} batch file path
        {3} batch filename
      -->
      <map:match pattern="processAssetBatch/*/**/*.xml">
        <!-- Create the shell script for resizing the images.
         +   This script file is written in de temp-directory.
         +-->
        <map:act type="copy-source" src="cocoon:/createImageResizeScript/{2}/{3}.xml">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/resize_{3}.sh"/>
        </map:act>        

        <!-- and actually resize the images by executing the shell-script:
         +-->
        <map:act type="copy-source" src="cocoon:/exec/temp/resize_{3}.sh">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/resize_{3}_{1}.log"/>
        </map:act>

        <map:generate src="{cmc2:xmlDir}/empty.xml" />
       <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="createImageResizeScript/**">
        <map:generate src="{1}"/>
        <!-- Read the cache info -->
        <map:transform type="xslt-saxon" src="xsl/readImageCache.xsl"/>
        <map:transform type="include"/>
        <!-- Filter out the asset that are up to date in the cache -->
        <map:transform type="xslt-saxon" src="xsl/filterCachedAssets.xsl"/>
        <!-- Add conversion info from the config files -->
        <map:transform type="xslt-saxon" src="xsl/addConversionInfo.xsl"/>
        <!-- Create a shell script to process images -->
        <map:transform type="xslt-saxon" src="xsl/createImageResizeScript.xsl">
          <map:parameter name="imageSourceDir" value="{cmc2:imageSourceDir}"/>
          <map:parameter name="imageDestDir" value="{cmc2:imageCacheDir}"/>
        </map:transform>
        <map:serialize type="text"/>
      </map:match>
      

      <!--
        Part 2: Render leaflets
        
        {1} timestamp
      -->
      <map:match pattern="renderLeaflets/*">
        <!-- Because we need to process only the files that were processed in Part 1
             (and not any files that were dropped in the inbox in between)
             we transform the existing batchfiles to call a different process. -->
        <map:generate type="xpathdirectory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="batch.extractAssetInfo.*.xml"/>
          <map:parameter name="xmlFiles" value="batch.extractAssetInfo.*.xml"/>
          <map:parameter name="xpath" value="/batch"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/writeRenderingBatches.xsl">
          <map:parameter name="process" value="cocoon:/renderLeaflet"/>
          <map:parameter name="output-dir" value="{global:gdir}{global:ldir}temp"/>
          <map:parameter name="prefix" value="batch.rendering."/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/processParallelBatch"/>
        </map:transform>
        <!-- Process all batches -->
        <map:transform type="include"/>

        <map:serialize type="xml"/>
      </map:match>

      <!--
        Render a leaflet from a file in the inbox. 
        {1} path
        {2} product or family id
        {3} locale.
        {4} file timestamp
       +-->
      <map:match pattern="renderLeaflet/**/*.*.*.xml">
        <map:select type="resource-exists">
          <map:when test="{1}/{2}.{3}.{4}.xml">     
            <map:act type="copy-source" src="cocoon:/renderingMain/{2}.{3}.{4}.xml">
               <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{2}.{3}.{4}_renderingMain.xml"/>
            </map:act>
             <!-- and remove the processed file from the inbox.
             +-->
            <map:act type="copy-source" src="cocoon:/moveToCache/{1}/{2}.{3}.{4}.xml">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{2}.{3}.{4}_archiveFiles.xml"/>
            </map:act>        
            <map:generate src="{global:gdir}{global:ldir}temp/{2}.{3}.{4}_archiveFiles.xml" />
            <map:serialize type="xml"/>
          </map:when>
          <map:otherwise>
            <map:generate src="{cmc2:xmlDir}/empty.xml" />
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:match>

      <!-- Determine the template needed for leaflet generation.
      +
      +   Parameters:
      +     1) product(family) code.
      +     2) locale.
      +     3) timestamp.
      +-->
      <map:match pattern="renderingMain/*.*.*.xml">
        <map:generate src="{global:gdir}{global:ldir}inbox/{1}.{2}.{3}.xml"/>
        <map:transform type="xslt-saxon" src="xsl/choose_template.xsl">
          <map:parameter name="fileName" value="{1}.{2}.{3}.xml"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- Render a leaflet.
      +
      +   Parameters:
      +     1) product(family) code.
      +     2) locale.
      +     3) timestamp.
      +     4) doctype
      +     5) FO template
      +-->
      <map:match pattern="renderingSub/*.*.*.xml/*/*">
        <map:act type="copy-source" src="cocoon:/renderToPDF/{1}.{2}.{3}.xml/{4}/{5}">
           <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{1}.{2}.{3}.{4}.xml"/>
        </map:act>
        <map:generate src="xsl/tmp.xml" />
         <map:serialize type="xml"/>
      </map:match>

      <!-- Generate the PDF-document. 
       +   Parameters:
       +    {1} product/family code
       +    {2} locale
       +    {3} timestamp
       +    {4} doctype
       +    {5} template to create FO XML
       +-->
      <map:match pattern="renderToPDF/*.*.*.xml/*/*">
        <!-- Do it in one step -->
        <!--
        <map:generate src="{global:gdir}{global:ldir}inbox/{1}.xml"/>
        <map:transform type="xslt-saxon" src="templates/{2}">
          <map:parameter name="debug" value="false"/>
          <map:parameter name="asset-folder" value="{cmc2:imageCacheDir}"/>
          <map:parameter name="shadow-folder" value="{cmc2:pipesDir}/{global:ldir}Assets/Shadows"/>
          <map:parameter name="logo-folder" value="{cmc2:logosDir}"/>
          <map:parameter name="grid-folder" value="{cmc2:gridDir}"/>
        </map:transform>
        <map:serialize type="fo2pdf"/>
        -->
        
        <!-- Use separate shell script to render the PDF -->
        <map:act type="copy-source" src="cocoon:/createFoXml/{1}.{2}.{3}.xml/{5}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}cache/{1}/{2}/{1}.{2}.{4}.fo.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/createRenderScript/cache/{1}/{2}/{1}.{2}.{4}.fo.xml">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}cache/{1}/{2}/{1}.{2}.{4}.ahf.sh"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/exec/cache/{1}/{2}/{1}.{2}.{4}.ahf.sh">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}cache/{1}/{2}/{1}.{2}.{4}.ahf.log"/>
        </map:act>

        <!--map:generate type="text" src="{global:gdir}{global:ldir}cache/{1}/{2}/{1}.{2}.{4}.ahf.log"/-->
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="createFoXml/*/*">
        <map:generate src="{global:gdir}{global:ldir}inbox/{1}"/>
        <map:transform type="xslt-saxon" src="templates/{2}">
          <map:parameter name="debug" value="false"/>
          <map:parameter name="asset-folder" value="{cmc2:imageCacheDir}"/>
          <map:parameter name="shadow-folder" value="{cmc2:pipesDir}/{global:ldir}Assets/Shadows"/>
          <map:parameter name="logo-folder" value="{cmc2:logosDir}"/>
          <map:parameter name="grid-folder" value="{cmc2:gridDir}"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <!-- Create a shell script that calls AntennaHouse to process an FO XML.
           {1} path
           {2} product/family id
           {3} locale
           {4} doctype
           cocoon:/createRenderScript/cache/en_GB/LP_CF_4ME350_EU.en_GB.fo.xml
      -->
      <map:match pattern="createRenderScript/**/*.*.*.fo.xml">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/createAHShellScript.xsl">
          <map:parameter name="fo-xml-file" value="{cmc2:gdir}/{global:ldir}{1}/{2}.{3}.{4}.fo.xml"/>
          <map:parameter name="pdf-file" value="{cmc2:gdir}/{global:ldir}{1}/{2}.{3}.{4}.pdf"/>
          <map:parameter name="config-file" value="{cmc2:AHFConfigDir}"/>
          <map:parameter name="ahf-home-dir" value="{cmc2:AHFHomeDir}"/>
          <map:parameter name="outbox" value="{cmc2:gdir}/{global:ldir}outbox"/>
        </map:transform>
        <map:serialize type="text"/>
      </map:match>
      
      <!-- 
      +==============================================================================
      + Create a list of images from the input file that are needed to generate 
      + the leaflet. 
      +==============================================================================
      +-->
      <map:match pattern="sendLeaflets2CCR/*">
        <map:act type="copy-source" src="cocoon:/createCCRCommandFile">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/lightingLeaflets_{1}_command.txt"/>
        </map:act>
        
        <!-- move all pdf-files to archive-directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.(pdf|txt)"/>
        </map:generate>
        
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="createCCRCommandFile">
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.pdf"/>
        </map:generate>
        
        <map:transform type="xslt-saxon" src="xsl/sql_getLocaleLanguageMapping.xsl"/>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/createCCRCommandFile.xsl"/>
        <map:serialize type="text"/>
      </map:match>
      
      <map:match pattern="processCCRResults/*">
        <map:generate type="directory" src="{global:gdir}{global:ldir}archive">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="lightingLeaflets_.*_results\.txt"/>
        </map:generate>
        
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}logs"/>
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}archive"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Read the cached images for an object (product|family|object asset) and locale.
        {1} object id
        {2} locale
      -->
      <map:match pattern="readImageCache/**">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}cache/{1}">     
            <map:generate type="directory" src="{global:gdir}{global:ldir}cache/{1}">
              <map:parameter name="depth" value="1"/>
            </map:generate>
           </map:when>
           <map:otherwise>
             <map:generate src="xsl/missingDirectory.xml"/>
           </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>

    <!-- Run shell-scripts from within Cocoon.
     +-->
    <map:match pattern="exec/**">
      <map:select type="resource-exists">
        <map:when test="{global:gdir}{global:ldir}{1}">
          <map:read type="exec"  src="{global:gdir}{global:ldir}{1}"/>
        </map:when>
       <map:otherwise>
          <map:read src="../common/txt/scriptDoesNotExist.txt"/>
       </map:otherwise>
      </map:select>
    </map:match>

     <!-- 
       +==============================================================================
       + Remove files for products/families that have more recent versions in the inbox.
       +==============================================================================
       +-->
      <map:match pattern="deleteDuplicateFilesFromInbox">
        <map:generate type="directory" src="{global:gdir}{global:ldir}inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml$"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/dir2shell_keepmostrecent.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- 
      +==============================================================================
      +   House keeping stuff: emptying directories, archiving, logging, etc. 
      +==============================================================================
      +-->
      <!-- set Start / End Time 
      +-->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml"/>
          <map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="'n'"/> <!-- BHE: hard coded for now !!!??? -->
            <map:when test="y">
              <map:transform type="xslt-saxon" src="../common/xsl/{global:db}sql_{1}.xsl">
                <map:parameter name="channel" value="{global:channel}Delta"/>
                 <map:parameter name="run_id" value="{request-param:runId}"/>
                 <map:parameter name="run_mode" value="{request-param:runmode}"/>
              </map:transform>
            </map:when>
            <map:otherwise>
              <map:transform type="xslt-saxon" src="../common/xsl/{global:db}sql_{1}.xsl">
                <map:parameter name="channel" value="{global:channel}"/>
                 <map:parameter name="run_id" value="{request-param:runId}"/>
                 <map:parameter name="run_mode" value="{request-param:runmode}"/>
              </map:transform>           
            </map:otherwise>
          </map:select>
        <!-- Run db queries -->
        <map:transform type="sql">
          <map:parameter name="use-connection" value="oracleDbCMC"/>
          <map:parameter name="clob-encoding" value="UTF-8"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
    
      <!-- Delete all files in the /data/xxx/temp-direcotry 
       +-->
      <map:match pattern="deleteFiles/*">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl" label="step15">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}{1}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

       <!-- archive the specified file. 
       |   parameters:
       |   1) path
       |   2) product or family id
       |   3) locale
       |   4) timestamp
       +-->
      <map:match pattern="moveToCache/**/*.*.*.xml">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- Move file to archive -->
        <map:transform type="xslt-saxon" src="xsl/shell_moveFile.xsl">
          <map:parameter name="sourceFile" value="{1}/{2}.{3}.{4}.xml"/>
          <map:parameter name="targetFile" value="{global:gdir}{global:ldir}cache/{2}/{3}/{2}.{3}.xml"/>
          <map:parameter name="keepPrevious" value="false"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="createStaticTextFiles/**.xls">
        <map:generate type="xls" src="{1}.xls"/>
        <map:transform type="xslt-saxon" src="tools/staticText/staticText_GmrConvert.xsl">
          <map:parameter name="output-dir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="output-prefix" value="static_text_"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="createStaticTextFiles/**.xml">
        <map:generate src="{1}.xml"/>
        <map:transform type="xslt-saxon" src="tools/staticText/staticText_convert.xsl">
          <map:parameter name="output-dir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="output-prefix" value="static_text_"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- 
       +==============================================================================
       + ERROR HANDLING (is part of the base sitemap)
       +==============================================================================
       <!- DOES NOT WORK; unable to retrieve the last file that is processed.
       <map:handle-errors when="always">
         <map:act type="copy-source" src="cocoon:/archiveFiles/failed/{1}.xml/{2}">
           <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{1}_Error.xml"/>
         </map:act>        
       +-->

      </map:pipeline>
  </map:pipelines>

</map:sitemap>
