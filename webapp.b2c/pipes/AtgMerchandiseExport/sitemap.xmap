<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer" />
    </map:transformers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction" />
    </map:actions>
  </map:components>

  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC" />
        <map:parameter name="clob-encoding" value="UTF-8" />
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    <!--
      <map:component-configurations> 
        <global-variables>
          <ldir>AtgMerchandise/</ldir>
          <channel>AtgMerchandise</channel>
        </global-variables>
      </map:component-configurations>
    -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <!--- -->
      <map:match pattern="runPipeline">
        <!--
          This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple
          times in parallel. When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run
          exportMain
        -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}" />
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml" />
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml" />
          <map:serialize type="xml" />
        </map:act>
        <map:generate src="../common/xml/locked.xml" />
        <map:serialize type="xml" />
      </map:match>
      <!-- -->
      <map:match pattern="exportStart">
        <!-- Delete all files in the {global:gdir}{global:ldir}temp directory. Write the results of this action to a report.-->
        <map:act type="copy-source" src="cocoon:/deleteTempFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTmpFilesReport.xml" />
        </map:act>
        <!-- Clear out outbox dir-->
        <map:act type="copy-source" src="cocoon:/deleteOutBox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_onStart.xml" />
        </map:act>
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml" />
        </map:act>
        <!-- Call the Main Export.-->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml" />
        </map:act>
        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml" />
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        <map:serialize type="xml" />
      </map:match>
      
      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="../common/xsl/{global:db}sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}" />
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>
      <!-- -->
      <map:match pattern="exportMain">
        <!-- Loop over all languages -->
        <map:generate src="../common/xml/empty.xml" />

        <map:transform src="xsl/sql_getlocales.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="ct" value="{request-param:ct}" />
        </map:transform>
        <map:call resource="sql" />
        <!-- Transform output to get include statements to exportSub-->
        <map:transform type="xslt-saxon" src="xsl/ll2include.xsl" />
        <!-- Execute the includes-->
        <map:transform type="cinclude" />
        <!-- Generate report for products -->
        <map:transform type="xslt-saxon" src="xsl/makereport.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="dir" value="{global:gdir}{global:ldir}" />
        </map:transform>
        <!-- Write report to disk -->
        <map:transform type="write-source" />
        
        <!-- Create CONTENT-READY files -->
        <map:transform type="xslt-saxon" src="xsl/sql_getarchivedata.xsl">
          <map:parameter name="channel" value="{global:channel}" />
        </map:transform>
        <map:call resource="sql" />
        <!-- Transform output to get include statements to createContentReady -->
        <map:transform type="xslt-saxon" src="xsl/createContentReady.xsl" />
        <!-- Execute the includes-->
        <map:transform type="include" />
        
        <map:serialize type="xml" />
      </map:match>
      <!--
        Export per locale
        {1} timestamp
        {2} country
        {3} locale
        {4} contentType
        {5} priority group
      -->
      <map:match pattern="exportSub.*.*.*.*.*">
        <map:act type="copy-source" src="cocoon:/selectExportProducts.{3}.{4}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSelectExportProducts_{1}.{3}.xml" />
        </map:act>

        <map:act type="copy-source" src="cocoon:/exportLocaleFiles.{3}.{4}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/PhilipsCatalog_{1}.{3}.xml" />
        </map:act>

        <map:act type="copy-source" src="cocoon:/exportAtg.{global:channel}.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{1}-{3}-merchandise-ctv.xml" />
        </map:act>

        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:truedelta}"/>
          <map:when test="yes"> 
            <map:act type="copy-source" src="cocoon:/delta/{1}-{3}-merchandise-ctv.xml">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/delta_{1}_{3}.xml" />
            </map:act>
          </map:when>
        </map:select>
    
        <map:act type="copy-source" src="cocoon:/genReport.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/FinalReport_{1}_{3}.xml" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/updateExportDate.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportUpdateExportDate_{1}_{3}.xml" />
        </map:act>

        <!-- english catalog explosion -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:explodeenglish}"/>
          <map:when test="yes"> 
            <map:select type="resource-exists">
              <map:when test="{global:gdir}{global:ldir}outbox/{1}-master_global-merchandise-ctv.xml">
                <map:act type="copy-source" src="cocoon:/explodeEnglish.{1}">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/explodeEnglish_{1}.xml" />
                </map:act>
              </map:when>
              <map:otherwise />
            </map:select>
          </map:when>
        </map:select>
    
        <map:act type="copy-source" src="cocoon:/archiveFiles/{3}/{1}/{5}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ArchiveFiles_{1}_{3}.xml" />
        </map:act>

        <map:generate src="{global:gdir}{global:ldir}temp/FinalReport_{1}_{3}.xml" />
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="exportAtg.*.*.*.*">
        <!-- export per locale  {1} type {2} timestamp  {3} country  {4} locale -->
        <map:generate src="{global:gdir}{global:ldir}temp/PhilipsCatalog_{2}.{4}.xml" />
        <map:transform type="xslt-saxon" src="xsl/{1}.xsl">
          <map:parameter name="ts" value="{2}" />
          <map:parameter name="locale" value="{4}" />
        </map:transform>
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="selectExportProducts.*.*">
        <!-- export per locale    {1} locale {2} contentType -->
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_selectproducts.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="locale" value="{1}" />
          <map:parameter name="contentType" value="{2}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="exportLocaleFiles.*.*">
        <!-- export per locale  {1} locale  {2} contentType -->
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_getproducts.xsl">
          <map:parameter name="locale" value="{1}" />
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="contentType" value="{2}" />
        </map:transform>
        <map:call resource="sql" />
        <!-- transform output-->
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="genReport.*.*.*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform src="xsl/sql_genreport.xsl">
          <map:parameter name="exportdate" value="{1}" />
          <map:parameter name="locale" value="{3}" />
          <map:parameter name="channel" value="{global:channel}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="updateExportDate.*.*.*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform src="xsl/sql_updatetransmitdate.xsl">
          <map:parameter name="exportdate" value="{1}" />
          <map:parameter name="country" value="{2}" />
          <map:parameter name="locale" value="{3}" />
          <map:parameter name="channel" value="{global:channel}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        Create a CONTENT-READY file in the specified archive subdirectory.
        {1} archive subdir
      -->
      <map:match pattern="createCONTENTREADY/**">
        <map:generate src="../common/xml/empty.xml" />
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}archive/{1}">
            <map:act type="copy-source" src="../common/xml/empty.xml">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}archive/{1}/CONTENT-READY" />
            </map:act>
          </map:when>
          <map:otherwise />
        </map:select>
        <map:serialize type="xml" />
      </map:match>

      <!--
        Delete empty export files.
        Move others to archive.
        {1} locale
        {2} timestamp
        {3} group (used for subdir)  
      -->
      <map:match pattern="archiveFiles/*/*/*">
        <!-- Archive all files in inbox -->
        <!-- Retrieve all files in inbox -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*" />
        </map:generate>
        <!-- Move files to archive -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox" />
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive" />
          <map:parameter name="archiveFTPDir" value="{global:gdir}{global:ldir}archive_ftp"/>
          <map:parameter name="locale" value="{1}" />
          <map:parameter name="timestamp" value="{2}" />
          <map:parameter name="group" value="{3}" />
        </map:transform>
        
        <!-- Move/delete files -->
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="delta/*-*_*-**">
        <!-- http://localhost:8888/pipes/AtgMerchandiseExport.CareAtgMerchandise/delta/20101118160145-master_global-merchandise-ctv.xml?fullexport=yes -->
        <!-- 1. timestamp 2. lang 3 country 4 other -->
        <map:generate src="{global:gdir}{global:ldir}outbox/{1}-{2}_{3}-{4}" />
        <map:transform src="xsl/include_cachedFile.xsl">
          <map:parameter name="file" value="{global:gdir}{global:ldir}cache/{2}_{3}-{4}" />
        </map:transform>
        <map:transform type="xinclude" />
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}delta.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}delta.xsl" />
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="xsl/delta.xsl" />
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/writer.xsl">
          <map:parameter name="cacheFile" value="{global:gdir}{global:ldir}cache/{2}_{3}-{4}" />
          <map:parameter name="outboxFile" value="{global:gdir}{global:ldir}outbox/{1}-{2}_{3}-{4}" />
        </map:transform>
        <map:transform type="write-source" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="deleteTempFiles">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*" />
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="deleteOutBox">
        <!-- Delete all files the outbox directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*" />
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="deleteOutBox.*.*.*">
        <!-- Delete all files the outbox directory except the zip file -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*{2}_{3}.*\.xml" />
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <!-- 
        Create masterlocale export based on master_global.
        This step is executed if request parameter explodeenglish=yes is specified.
        By default all non English locales are expanded into an en_* export.
        If request parameter explodeAll=no is specified the process uses the
        channel_catalogs table to expand each locale for which the masterlocaleenabled column is 1.
        
        {1} timestamp
        
        Request params:
        explodeAll  See above.
      -->
      <map:match pattern="explodeEnglish.*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_getEnglishCountries.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="explodeAll" value="{request-param:explodeAll}" />
        </map:transform>
        <map:call resource="sql" />
        <!-- Transform output to get include statements to exportSub-->
        <map:transform type="xslt-saxon" src="xsl/include_english.xsl">
          <map:parameter name="timestamp" value="{1}" />
        </map:transform>
        <!-- Execute the includes-->
        <map:transform type="cinclude" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        Convert the master_global export file to a masterlocale export for the specified country
        
        {1} timestamp
        {2} country code
      -->
      <map:match pattern="english.*.*">
        <!-- {1} timestamp {2} country -->
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}temp/catalog_{2}.xml" />
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/getCatalogProducts.{2}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/catalog_{2}.xml" />
            </map:act>
          </map:otherwise>
        </map:select>
        <map:act type="copy-source" src="cocoon:/master2english.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{1}-en_{2}-merchandise-ctv.xml" />
        </map:act>
        <map:generate src="../common/xml/empty.xml" />
        <map:serialize type="xml" />
      </map:match>
      <!-- -->
      <map:match pattern="getCatalogProducts.*">
        <!-- export per locale   {1} country   -->
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_getCatalogProducts.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="country" value="{1}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>
      <!--
        Convert the master_global export file to a masterlocale export for the specified country
        
        {1} timestamp
        {2} country code
      -->
      <map:match pattern="master2english.*.*">
        <!-- export per locale   {1} timestamp {2} country  -->
        <map:aggregate element="root">
          <map:part src="{global:gdir}{global:ldir}outbox/{1}-master_global-merchandise-ctv.xml"/>
          <map:part src="{global:gdir}{global:ldir}temp/catalog_{2}.xml"/>
        </map:aggregate>
        <map:transform type="xslt-saxon" src="xsl/catalogFilter.xsl">
          <map:parameter name="country" value="{2}" />
        </map:transform>
        <map:transform type="xslt-saxon" src="xsl/master2english.xsl">
          <map:parameter name="country" value="{2}" />
        </map:transform>
        <map:serialize type="xml" />
      </map:match>

    </map:pipeline>
  </map:pipelines>
  <!-- -->

  <!-- -->
</map:sitemap>
