<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
    <map:serializers default="html">
      <map:serializer logger="sitemap.serializer.html" mime-type="text/html" name="html" pool-max="${html-serializer.pool-max}" src="org.apache.cocoon.serialization.HTMLSerializer">
        <encoding>UTF-8</encoding>
        <indent>no</indent>
      </map:serializer>
    </map:serializers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>
    <map:readers default="resource">
      <map:reader name="exec" src="org.apache.cocoon.reading.ShellScriptExecute"/>
    </map:readers>
  </map:components>
  <!-- -->
  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <!--

  Insert into CHANNELS  (ID, NAME, LOCALE, LOCATION, TYPE, PIPELINE, MACHINEAFFINITY, STARTEXEC, ENDEXEC, CATALOG, RESULTCODE, SEQUENCE)
  Values ('1066','BrightcoveAssets2SPOT','en_US','BrightcoveAssets2SPOT','export','pipes/BrightcoveAssets2SPOT','all()', null, null,'DUMMY', NULL, NULL);

  -->


  <map:pipelines>
  <!--- -->
    <map:component-configurations>
      <global-variables>
        <ldir>BrightcoveAssets2SPOT/</ldir>
        <channel>BrightcoveAssets2SPOT</channel>
        <!-- spotdir is where the files will be placed for SPOT -->
        <spotdir>PMT2SPOT/</spotdir>
        <!-- assetsurl is the location of the script that downloads the assets xml -->
        <assetsurl>http://staging10.microsites.ce.philips.com/_pikachu_list_generator/generate2.php</assetsurl>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <map:match pattern="runPipeline">
        <!-- This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple times in parallel.
        When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportStart -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportStart">
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>
        <!-- Call the Main Export.-->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
        </map:act>
        <!-- Copy outbox files for archival purposes -->
        <map:act type="copy-source" src="cocoon:/copyOutboxFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/copyOutboxFilesReport.xml"/>
        </map:act>        
        <!-- Move outbox files to SPOT dir -->
        <map:act type="copy-source" src="cocoon:/archiveOutboxFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/archiveOutboxFilesReport.xml"/>
        </map:act>
        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="../common/xsl/sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportMain">
        <map:act type="copy-source" src="cocoon:/deleteTempFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteTmpFilesReport.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/downloadAssetsXML">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/BrightcoveAssetsXML.xml"/>
        </map:act>
        <!-- check asset feed xml is not empty before proceeeding -->
        <map:generate src="{global:gdir}{global:ldir}temp/BrightcoveAssetsXML.xml"/>
        <map:transform type="xslt-saxon" src="xsl/checkAssetsXML.xsl"/>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="downloadAssetsXML">
        <map:generate src="{global:assetsurl}"/>
        <!--map:generate src="http://www.ciber.com/news/rss/rss.xml"/-->
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->        
      <map:match pattern="stop">
        <map:generate src="{global:gdir}{global:ldir}temp/BrightcoveAssetsXML.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/makereport.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}"/>
          <map:parameter name="error" value="yes"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmail.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
		  </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="go">
        <!-- retrieve assets xml and split into separate files, one per product, store in inbox -->
        <map:act type="copy-source" src="cocoon:/retrieveAssetsXML">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/retrieveAssetsXMLReport.xml"/>
        </map:act>
        <!-- read cache; identify files that are in cache but not in inbox -->
        <map:act type="copy-source" src="cocoon:/identifyDeletedAssets">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/identifyDeletedAssetsReport.xml"/>
        </map:act>
        <!-- identify changed assets -->
        <map:act type="copy-source" src="cocoon:/dir2FilterAssetsXML">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/dir2FilterAssetsXMLReport.xml"/>
        </map:act>
        <!-- generate file for spot -->
        <map:act type="copy-source" src="cocoon:/generateSPOTFile">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/generateSPOTFileReport.xml"/>
        </map:act>
        <!-- archive inbox files -->
        <map:act type="copy-source" src="cocoon:/archiveInboxFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/archiveInboxFilesReport.xml"/>
        </map:act>
        <!-- delete cache files not received -->
        <map:act type="copy-source" src="cocoon:/deleteUnsentCacheFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteUnsentCacheFilesReport.xml"/>
        </map:act>
        <!-- generate report -->
        <map:generate src="{global:gdir}{global:ldir}temp/generateSPOTFileReport.xml"/>
        <map:transform type="xslt-saxon" src="xsl/makereport.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="retrieveAssetsXML">
        <map:generate src="{global:gdir}{global:ldir}temp/BrightcoveAssetsXML.xml"/>
        <map:transform type="xslt-saxon" src="xsl/groupAssetsPerProduct.xsl"/>        
        <map:transform type="stx" src="xsl/splitFiles.stx">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}inbox/"/>
          <!--map:parameter name="filestem" value="split_"/-->
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="identifyDeletedAssets">
        <map:generate type="directory" src="{global:gdir}{global:ldir}/cache">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="identifyDeletedAssetsSub"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="identifyDeletedAssetsSub/*.*">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}/{global:ldir}/inbox/{1}.{2}">
            <!-- do nothing -->
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:when>
          <map:otherwise>
            <map:generate src="{global:gdir}/{global:ldir}cache/{1}.{2}"/>
            <map:transform type="xslt-saxon" src="xsl/generateDeletedAssetsXML.xsl"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="dir2FilterAssetsXML">
        <map:generate type="directory" src="{global:gdir}{global:ldir}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <!--map:parameter name="include" value=".*split_.*\.xml"/-->
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="filterFile/*.*">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}/{global:ldir}/cache/{1}.{2}">
            <map:aggregate element="AssetsToCompare">
              <map:part src="{global:gdir}/{global:ldir}inbox/{1}.{2}"/>
              <map:part src="{global:gdir}/{global:ldir}cache/{1}.{2}"/>
            </map:aggregate>
             <map:transform type="xslt-saxon" src="xsl/compareCachedContent.xsl"/>
             <map:transform type="xslt-saxon" src="xsl/removeFile.xsl">
                <map:parameter name="source" value="{global:gdir}/{global:ldir}inbox/"/>
             </map:transform>
             <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <!-- leave file it will be moved to cache during archive-->
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="generateSPOTFile">
        <map:generate type="xpathdirectory" src="{global:gdir}{global:ldir}inbox" label="step1">
          <map:parameter name="xpath" value="/ProductsMsg/Product"/>
          <map:parameter name="xmlFiles" value=".*\.xml"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/generateSPOTFile.xsl">
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="deletedAssetsReport" value="{global:gdir}{global:ldir}temp/identifyDeletedAssetsReport.xml"/>
          <map:parameter name="cacheDir" value="{global:gdir}/{global:ldir}cache/"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveInboxFiles">
        <map:generate type="directory" src="{global:gdir}{global:ldir}inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}inbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}cache"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="copyOutboxFiles">        
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>        
        <map:transform type="xslt-saxon" src="xsl/copyFile.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive_ftp"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="archiveOutboxFiles">
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:spotdir}archive"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteTempFiles">
        <!-- Delete all files in temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteUnsentCacheFiles">
         <map:generate src="{global:gdir}{global:ldir}temp/identifyDeletedAssetsReport.xml"/>
          <map:transform type="xslt-saxon" src="xsl/deleteUnsentCacheFiles.xsl">
            <map:parameter name="source" value="{global:gdir}/{global:ldir}cache/"/>
          </map:transform>
          <map:transform type="shell"/>
         <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
  <!-- -->


  <map:views>
    <map:view name="step1" from-label="step1">
      <map:serialize type="xml"/>
    </map:view>
  </map:views>
  <!-- -->
</map:sitemap>
