<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
    </map:transformers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>
  </map:components>

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    
    <map:component-configurations>
      <global-variables>
        <channel>Scene7Videos</channel>
        <ldir>Scene7Videos/</ldir>
        <batchsize>200</batchsize>
      </global-variables>
    </map:component-configurations>
    
    <map:pipeline name="{global:channel}" type="noncaching">
      
      <map:match pattern="runPipeline">
        <!--
          This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple times in parallel.
          When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportMain
        -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/export.xml"/>
          <map:generate src="{global:gdir}{global:ldir}temp/export.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="exportStart">
        <!-- Clear the temp dir-->
        <map:act type="copy-source" src="cocoon:/deleteFiles/temp">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTempFiles.xml"/>
        </map:act>
        <!-- Clear outbox dir-->
        <map:act type="copy-source" src="cocoon:/deleteFiles/outbox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteOutboxFiles.xml"/>
        </map:act>
        <!-- Set start time -->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>
        <!-- Run the export -->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
        </map:act>
        <!-- Set end time -->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        </map:act>
        
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="exportMain">
        <!-- Use gettimings to get the start time that was set -->
        <map:generate src="cocoon:/runsql_gettimings"/>
        <map:transform src="xsl/include2callMain.xsl"/>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        The main export
        {1} timestamp
        
        Request params:
        processDeletions    Create a deletions file with deleted videos.
      -->
      <map:match pattern="main/*">
        <map:act type="copy-source" src="cocoon:/createBatches">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportCreateBatches.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/processBatches/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportProcessBatches.xml"/>
        </map:act>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:processDeletions}"/>
          <map:when test="true">
            <map:act type="copy-source" src="cocoon:/createDeletionFile/{1}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/Deletions.{1}.txt"/>
            </map:act>
          </map:when>
        </map:select>
        <map:act type="copy-source" src="cocoon:/moveFiles/outbox/archive">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportArchiveFiles.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/updateCLE/{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportUpdateCLE.xml"/>
        </map:act>
        <!-- Aggregate log files for the report -->
        <map:act type="copy-source" src="cocoon:/createReport">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}logs/Report_{1}.xml"/>
        </map:act>
        <!-- Create a CONTENT-READY file in the archive directory -->
        <map:act type="copy-source" src="../common/xml/empty.xml">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}archive/CONTENT-READY"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportUpdateCLE.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Create batches of assets that require export.
      -->
      <map:match pattern="createBatches">
        <map:generate src="{cmc2:xmlDir}/doctype_attributes.xml"/>
        <map:transform src="xsl/sql_createBatches.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="nrOfThreads" value="{request-param:threads}"/>
          <map:parameter name="processDeletions" value="{request-param:processDeletions}"/>
          <!-- <map:parameter name="objectId" value="{request-param:objectId}"/> -->
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- 
        Process the batches. All batches will be processed concurrently.
      -->
      <map:match pattern="processBatches/*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_selectBatches.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform src="xsl/include2processBatch.xsl">
          <map:parameter name="timestamp" value="{1}"/>
        </map:transform>
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- 
        Process one batch.
        - Select the asset infor for all assets in the batch
        - Retrieve the assets and copy them to the outbox
        - update the CLE records
        
        {1} timestamp
        {2} batch number
      -->
      <map:match pattern="processBatch/*/*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_selectAssets.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="batchNumber" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform src="xsl/include2processAsset.xsl">
          <map:parameter name="srcDir" value="{cmc2:ccrDir}"/>
          <map:parameter name="tgtDir" value="{cmc2:gdir}/{global:ldir}outbox"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
        Copy an asset's physical file.
        
        Request params:
        src       The source path
        tgt       The target path
        mimetype  The mimetype
      -->
      <map:match pattern="copyAsset">
        <map:select type="resource-exists">
          <map:when test="{request-param:tgt}">
            <map:generate src="../common/xml/notread.xml" />
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="{request-param:src}" mime-type="{request-param:mimetype}">
              <map:parameter name="dest" value="{request-param:tgt}" />
            </map:act>
            <map:generate src="../common/xml/read.xml" />
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Process deleted assets
        {1} timestamp
      -->
      <map:match pattern="createDeletionFile/*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_selectDeletedAssets.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform src="xsl/createDeletionFile.xsl">
          <map:parameter name="timestamp" value="{1}"/>
        </map:transform>
        <map:serialize type="text"/>
      </map:match>

      <!--
        Update the CLE table
        {1} timestamp
      -->
      <map:match pattern="updateCLE/*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_updateCLE.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="timestamp" value="{1}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Create a report file
      -->
      <map:match pattern="createReport">
        <map:generate src="{global:gdir}{global:ldir}temp/ReportProcessBatches.xml"/>
        <map:transform src="xsl/createReport.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Run a database query -->
      <map:match pattern="runsql_*">
        <map:generate src="{cmc2:xmlDir}/doctype_attributes.xml"/>
        <map:transform type="xslt-saxon" src="../common/xsl/sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Delete all files in a directory -->
      <map:match pattern="deleteFiles/*">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}{1}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Move all files in a directory to another directory
        {1} source directory
        {2} target directory
        
        Directories are relative to global:ldir
      -->
      <map:match pattern="moveFiles/*/*">
        <!-- Archive all files in inbox -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Move files to archive -->
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}{1}"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}{2}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:handle-errors when="always">
        <map:select type="exception">
          <map:when test="not-found">
            <map:generate type="exception"/>
            <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
              <map:parameter name="contextPath" value="{request:contextPath}"/>
              <map:parameter name="realPath" value="{realpath:}"/>
              <map:parameter name="dir" value="{global:gdir}"/>
              <map:parameter name="pageTitle" value="Resource not found"/>
            </map:transform>
            <map:transform type="write-source"/>
            <map:serialize type="xml"/>
          </map:when>
          <map:when test="invalid-continuation">
            <map:generate type="exception"/>
            <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
              <map:parameter name="contextPath" value="{request:contextPath}"/>
              <map:parameter name="realPath" value="{realpath:}"/>
              <map:parameter name="dir" value="{global:gdir}"/>
              <map:parameter name="pageTitle" value="Invalid Continuation"/>
            </map:transform>
            <map:transform type="write-source"/>
            <map:serialize type="xml"/>
          </map:when>
          <map:otherwise>
            <map:generate type="exception"/>
            <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
              <map:parameter name="contextPath" value="{request:contextPath}"/>
              <map:parameter name="realPath" value="{realpath:}"/>
              <map:parameter name="dir" value="{global:gdir}"/>
            </map:transform>
            <map:transform type="write-source"/>
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:handle-errors>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
