<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>

    <!-- setting xslt-saxon as default so we can leave it out on map:transform -->
    <map:transformers default="xslt-saxon"/>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction" />
    </map:actions>
  </map:components>

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC" />
        <map:parameter name="clob-encoding" value="UTF-8" />
      </map:transform>
    </map:resource>
  </map:resources>
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ldir>catalog_import_sap/</ldir>
        <channel>SAPCatalogImport</channel>
        <destination-dir>catalog_definition</destination-dir>
      </global-variables>
    </map:component-configurations>
    <map:pipeline name="{global:channel}" type="noncaching">

      <!-- 
        Here is the main pipeline that executes the batch processing. In invoking the pipeline the execution timestamp 
        is passed as a parameter along with ct. 
        
        Input parameters:
        {1} = timestamp Output Document: Result of writing the report document to file 
      -->
      <map:match pattern="runPipeline">
        <!-- This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple 
          times in parallel. When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportMain -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}" />
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml" />
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml" />
          <map:serialize type="xml" />
        </map:act>
        <map:generate src="../common/xml/locked.xml" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="exportStart">
        <!-- Set Start Time.of this channel -->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml" />
        </map:act>
        <!-- Call the Main Export. -->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml" />
        </map:act>
        <!-- Set End Time of this channel -->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml" />
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        <map:serialize type="xml" />
      </map:match>

      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="../common/xsl/{global:db}sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}" />
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="exportMain">
        <!-- Delete all files in the {global:gdir}{global:ldir}temp directory. Write the results of this action to a report. -->
        <map:act type="copy-source" src="cocoon:/deleteTempFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTmpFilesReport.xml" />
        </map:act>

        <!-- Rename files using country and catalog typename within the file -->
        <map:act type="copy-source" src="cocoon:/renameFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportRenameInboxFiles.xml" />
        </map:act>

        <!-- Merge the files based on country -->
        <map:act type="copy-source" src="cocoon:/mergeFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportMergeFiles.xml" />
        </map:act>

        <!-- Archive the files -->
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportArchiveFiles.xml" />
        </map:act>

        <!-- generate report -->
        <map:aggregate element="root">
          <map:part src="{global:gdir}{global:ldir}temp/ReportRenameInboxFiles.xml" />
          <map:part src="{global:gdir}{global:ldir}temp/ReportMergeFiles.xml" />
          <map:part src="{global:gdir}{global:ldir}temp/ReportArchiveFiles.xml" />
        </map:aggregate>
        
        <map:transform type="xslt-saxon" src="../common/xsl/makereport.xsl">
          <map:parameter name="channel" value="{global:channel}" />
          <map:parameter name="dir" value="{global:gdir}{global:ldir}" />
          <map:parameter name="exportdate" value="{date:yyyyMMddhhmmss}" />
        </map:transform>

        <!-- write to disk -->
        <map:transform type="write-source" />
        <map:serialize type="xml" />
      </map:match>

      <!-- 
        For each file is the inbox, the country and catalog typename attributes are read from the file contents. The file 
        is renamed using those attributes e.g. pikachu_full_FSS_<ts>.xml -> pikachu_full_FSS_<country>_<catalog type name>_<ts>.xml 
      -->
      <map:match pattern="renameFiles">
        <map:generate type="xpathdirectory" src="{global:gdir}{global:ldir}inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm" />
          <map:parameter name="xpath" value="/Catalogs/Catalog[1]"/>
          <map:parameter name="xmlFiles" value="^pikachu_full_FSS.*\.xml$"/>
          <map:parameter name="include" value="^pikachu_full_FSS.*\.xml$"/>
        </map:generate>
        <map:transform src="xsl/renameFiles.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ldir}inbox" />
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ldir}inbox" />
          <map:parameter name="processedDir" value="{cmc2:gdir}/{global:ldir}processed" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <!-- 
        Create one input file from files in inbox using only the most recent file for each country/shop type.
      -->
      <map:match pattern="mergeFiles">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ldir}inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value="pikachu_full_FSS.*\.xml$" />
        </map:generate>

        <!-- Read the latest file only and archive the others -->
        <map:transform src="xsl/include.xsl" />
        <map:transform type="cinclude" />

        <!-- Merge all catalogs into one separate SHOP catalogs -->
        <map:transform src="xsl/merge.xsl">
          <map:parameter name="target-dir" value="{cmc2:gdir}/{global:destination-dir}/inbox" />
        </map:transform>

        <!-- Write the catalog files -->
        <map:transform type="write-source"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- -->
      <map:match pattern="readFile/*">
        <map:generate src="{cmc2:gdir}/{global:ldir}inbox/{1}" />
        <map:serialize type="xml" />
      </map:match>
      <!-- -->
      <map:match pattern="archiveFile/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <!-- Move file from inbox to archive -->
        <map:transform src="{cmc2:xslDir}/common/shell_moveFile.xsl">
          <map:parameter name="source" value="{1}" />
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ldir}inbox" />
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ldir}processed/ignored" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="archiveFiles">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ldir}inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value="pikachu_full_FSS.*\.xml$" />
        </map:generate>
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ldir}inbox" />
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ldir}processed" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="deleteTempFiles">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*" />
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
