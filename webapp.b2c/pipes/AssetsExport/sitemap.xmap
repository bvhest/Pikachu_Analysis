<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
    <map:serializers default="html">
      <map:serializer logger="sitemap.serializer.html" mime-type="text/html" name="html" pool-max="${html-serializer.pool-max}" src="org.apache.cocoon.serialization.HTMLSerializer">
        <encoding>UTF-8</encoding>
        <indent>no</indent>
      </map:serializer>
    </map:serializers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>
    <map:readers default="resource">
      <map:reader name="exec" src="org.apache.cocoon.reading.ShellScriptExecute"/>
    </map:readers>
  </map:components>
  <!-- -->
  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <!-- -->
  <map:pipelines>
  <!--
    <map:component-configurations>
      <global-variables>
        <ldir>Scene7/</ldir>
        <channel>Scene7</channel>
      </global-variables>
    </map:component-configurations>
  -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <!-- -->
      <map:match pattern="runPipeline">
        <!-- This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple times in parallel.
        When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportStart -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportStart">
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>
        <!-- Call the Main Export.-->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
        </map:act>
        <!-- Archive files -->
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}logs/ReportArchiveFiles.{date:yyyyMMdd}T{date:HHmmss}.xml"/>
        </map:act>
        <!-- Archive retrieval logs -->
        <map:act type="copy-source" src="cocoon:/archiveRetrievalInformation">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}logs/ReportArchiveFileRetrievals.{date:yyyyMMdd}T{date:HHmmss}.xml"/>
        </map:act>        
        <!-- Create the deletions file -->
        <map:act type="copy-source" src="cocoon:/createDeletionsFile">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}archive/Deletions.{date:yyyyMMdd}T{date:HHmmss}.txt"/>
        </map:act>        
        <!-- Unzip files -->
        <map:act type="copy-source" src="cocoon:/exec/unpack_zip_files_for_{global:channel}.sh">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/unpack_zip_files_log.txt"/>
        </map:act>
        <!-- Create the errors email -->
        <map:act type="copy-source" src="cocoon:/generateErrorsEmail">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGenerateErrorsEmail.xml"/>
        </map:act>
        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="../common/xsl/sql_{1}.xsl">
           <map:parameter name="channel" value="{global:channel}"/>
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportMain">
        <!-- Clean temp -->
        <map:act type="copy-source" src="cocoon:/deleteTempFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteTmpFilesReport.xml"/>
        </map:act>
        <!-- Clean outbox -->
        <!--map:act type="copy-source" src="cocoon:/deleteOutBox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBoxReport.xml"/>
        </map:act-->
        <!-- Loop over locales -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_getlocales.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="locale" value="{request-param:locale}"/>          
        </map:transform> 
        <map:call resource="sql"/>
        <!-- transform output to get include statements to exportSub-->
        <map:transform type="xslt-saxon" src="xsl/ll2include.xsl"/>
        <!-- execute the includes-->
        <map:transform type="cinclude"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="../common/xsl/makereport.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="dir" value="{global:gdir}{global:ldir}"/>
          <map:parameter name="exportdate" value="{date:yyyyMMdd}T{date:HHmmss}"/>
        </map:transform>
        <!-- write to disk -->
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} run timestamp
        {2} locale
      -->
      <map:match pattern="exportLocale.*.*">
        <!-- ** Export locale-specific Product Assets and Object Assets ** -->
        <!-- Flag Product Assets -->
        <map:act type="copy-source" src="cocoon:/flagProductAssets.{1}.{2}?assetlocaletype=local">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/flagProductAssetsReport_{2}.xml"/>
        </map:act>
        <!-- Retrieve Product Assets -->
        <map:act type="copy-source" src="cocoon:/retrieveAssetsXML.{1}.{2}?type=ProductAssets&amp;assetlocaletype=local">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/retrieveProductAssetsXMLReport_{2}.xml"/>
        </map:act>
        <!-- Flag Object Assets -->
        <map:act type="copy-source" src="cocoon:/flagObjectAssets.{1}.{2}?assetlocaletype=local">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/flagObjectAssetsReport_{2}.xml"/>
        </map:act>
        <!-- Retrieve Object Assets (currently none so commented-out) -->
        <map:act type="copy-source" src="cocoon:/retrieveAssetsXML.{1}.{2}?type=ObjectAssets&amp;assetlocaletype=local">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/retrieveObjectAssetsXMLReport_{2}.xml"/>
        </map:act>
        <!-- Create deletes for Product Assets for expired Products -->
        <!-- JL 2009-02-20 temporarily suspended at Geurt's request as too dangerous -->
        <!--map:act type="copy-source" src="cocoon:/processExpiredProducts.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/processExpiredProducts_{2}.xml"/>
        </map:act-->
        <!-- Generate report -->
        <map:act type="copy-source" src="cocoon:/genReport.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/finalReport_{2}.xml"/>
        </map:act>
        <!-- -->
        <map:generate src="{global:gdir}{global:ldir}temp/finalReport_{2}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportGlobal.*.*">
        <!-- **Export global Product Assets and Object Assets ** -->
        <map:act type="copy-source" src="cocoon:/flagProductAssets.{1}.{2}?assetlocaletype=global">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/flagProductAssetsReport_{2}.xml"/>
        </map:act>
        <!-- Flag Object Assets -->
        <map:act type="copy-source" src="cocoon:/flagObjectAssets.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/flagObjectAssetsReport_{2}.xml"/>
        </map:act>
        <!-- Retrieve global Product Assets -->
        <map:act type="copy-source" src="cocoon:/retrieveAssetsXML.{1}.{2}?type=ProductAssets&amp;assetlocaletype=global">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/retrieveProductAssetsXMLReport_{2}.xml"/>
        </map:act>
        <!-- Retrieve global Object Assets -->
        <map:act type="copy-source" src="cocoon:/retrieveAssetsXML.{1}.{2}?type=ObjectAssets&amp;assetlocaletype=global">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/retrieveObjectAssetsXMLReport_{2}.xml"/>
        </map:act>
        <!-- Create deletes for Product Assets for expired Products -->
        <!-- JL 2009-02-20 temporarily suspended at Geurt's request as too dangerous -->
        <!--map:act type="copy-source" src="cocoon:/processExpiredProducts.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/processExpiredProducts_{2}.xml"/>
        </map:act-->
        <!-- Generate report -->
        <map:act type="copy-source" src="cocoon:/genReport.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/finalReport_{2}.xml"/>
        </map:act>
        <!-- -->
        <map:generate src="{global:gdir}{global:ldir}temp/finalReport_{2}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="updateTimestamps.*.*">
        <!-- ** Update CLE timestamps for each locale ** -->
        <map:act type="copy-source" src="cocoon:/updateExportDate.{1}.{2}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/updateExportDateReport_{2}.xml"/>
        </map:act>
        <!-- -->
        <map:generate src="{global:gdir}{global:ldir}temp/updateExportDateReport_{2}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="flagProductAssets.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_flagProductAssets.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="assetlocaletype" value="{request-param:assetlocaletype}"/>
          <map:parameter name="ctn" value="{request-param:ctn}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="flagObjectAssets.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_flagObjectAssets.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="retrieveAssetsXML.*.*">
        <map:generate src="{cmc2:xmlDir}/doctype_attributes.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveAssetsXML.xsl">
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="type" value="{request-param:type}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/createIncludeForAssetsRetrieval.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="type" value="{request-param:type}"/>
          <map:parameter name="assetlocaletype" value="{request-param:assetlocaletype}"/>
          <map:parameter name="ccr-asset-store" value="{cmc2:ccrDir}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processExpiredProducts.*.*">
        <map:generate src="{cmc2:xmlDir}/doctype_attributes.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_identifyExpiredProducts.xsl">
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/createDeleteForExpiredProducts.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="readResource.*.*.*">
        <!-- e.g.
          <cinclude:include src="cocoon:/readResource.PSS.en-GB.100WT10P_00?mime-type=application/pdf&filename=0412140186_pss.pdf&url=http://pww.pcc.philips.com/mprdata/041214/0412140186_pss.pdf"/>
        -->
        <!-- test if resource exist -->
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}outbox/{request-param:filename}">
            <map:generate src="../common/xml/notread.xml"/>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="{request-param:url}" mime-type="{request-param:mime-type}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{request-param:filename}"/>
            </map:act>
            <map:generate src="../common/xml/read.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="genReport.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="../common/xsl/sql_genreport.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteResource.*.*.*">
        <!-- e.g.
          <cinclude:include src="cocoon:/deleteResource.TLP.global.105G78_05?filename=001.jpg"/>
        -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/createDelete.xsl">
          <map:parameter name="fn" value="{3}-{1}-{2}-{request-param:filename}"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="updateExportDate.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_updatetransmitdate.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- -->
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="createDeletionsFile">
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="4"/>
          <map:parameter name="include" value="^retrieveProductAssetsXMLReport.*|^processExpiredProducts.*"/>
        </map:generate>
        <map:transform src="xsl/directorygen2readfile.xsl"/>
        <map:transform type="cinclude"/>
        <map:serialize type="text"/>
      </map:match>
      <!-- -->
      <map:match pattern="readFile.**">
        <map:generate src="{global:gdir}{global:ldir}temp/{1}"/>
        <map:transform src="xsl/writeDelete.xsl"/>
        <map:serialize type="text"/>
      </map:match>
      <!-- -->
      <map:match pattern="readRetrievalFile.**">
        <map:generate src="{global:gdir}{global:ldir}temp/{1}"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="generateErrorsEmail">
        <map:generate type="xpathdirectory" src="{global:gdir}{global:ldir}temp" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="xpath" value="/root/root/object/read[contains(root/sourceResult/source,'error')]"/>
          <map:parameter name="xmlFiles" value="^retrieveAssetsXMLReport.*"/>
          <map:parameter name="include" value="^retrieveAssetsXMLReport.*"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/generateErrorsEmail.xsl">
                                        <map:parameter name="process" value="{global:channel}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteOutBox">
        <!-- Delete all files the outbox directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="4"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveRetrievalInformation">
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="retrieve*.*\.xml"/>
        </map:generate>
        <map:transform src="xsl/directorygen2readretrievalfile.xsl"/>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="archiveFiles">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{global:channel}"/>
          <map:when test="Scene7">
            <!-- do nothing i.e. do not archive; files will be archived by .sh script -->
            <map:generate src="../common/xml/empty.xml"/>
          </map:when>
          <map:when test="Scene7Lighting">
            <!-- do nothing i.e. do not archive; files will be archived by .sh script -->
            <map:generate src="../common/xml/empty.xml"/>
          </map:when>
          <map:otherwise>            
            <!-- Archive all files in outbox -->
            <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
              <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
              <map:parameter name="depth" value="1"/>
            </map:generate>
            <!-- Move files to archive -->
            <map:transform src="../common/xsl/dir2shell_move.xsl">
              <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
              <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:otherwise>
        </map:select>        
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteTempFiles">
        <!-- Delete all files in temp directory -->
        <!-- Retrieve all files in temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:handle-errors when="always">
      <map:select type="exception">
        <map:when test="not-found">
          <map:generate type="exception"/>
          <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
            <map:parameter name="dir" value="{global:gdir}"/>
            <map:parameter name="pageTitle" value="Resource not found"/>
          </map:transform>
          <map:transform type="write-source"/>
          <map:serialize type="xml"/>
        </map:when>
        <map:when test="invalid-continuation">
          <map:generate type="exception"/>
          <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
            <map:parameter name="dir" value="{global:gdir}"/>
            <map:parameter name="pageTitle" value="Invalid Continuation"/>
          </map:transform>
          <map:transform type="write-source"/>
          <map:serialize type="xml"/>
        </map:when>
        <map:otherwise>
          <map:generate type="exception"/>
          <map:transform type="xslt-saxon" src="../common/xsl/exception2html_write.xsl">
            <map:parameter name="contextPath" value="{request:contextPath}"/>
            <map:parameter name="realPath" value="{realpath:}"/>
            <map:parameter name="dir" value="{global:gdir}"/>
          </map:transform>
          <map:transform type="write-source"/>
          <map:serialize type="xml"/>
        </map:otherwise>
      </map:select>
    </map:handle-errors>
    <!-- -->
    <map:match pattern="executeScript/**">
      <map:act type="copy-source" src="cocoon:/exec/{1}">
        <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/script_log.txt"/>
      </map:act>
      <map:read src="{global:gdir}{global:ldir}temp/script_log.txt"/>
    </map:match>
    <!-- -->
    <map:match pattern="exec/**">
      <map:select type="resource-exists">
        <map:when test="../../../../bin/{1}">
          <map:read type="exec"  src="../../../../bin/{1}"/>
        </map:when>
       <map:otherwise>
          <map:read src="../common/txt/scriptDoesNotExist.txt"/>
       </map:otherwise>
      </map:select>
    </map:match>
    
    </map:pipeline>
  </map:pipelines>
  <!-- -->
  <map:views>
    <map:view name="step1" from-label="step1">
      <map:serialize type="xml"/>
    </map:view>
  </map:views>
  <!-- -->
</map:sitemap>
