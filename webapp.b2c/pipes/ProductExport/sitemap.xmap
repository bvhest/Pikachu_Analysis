<?xml version="1.0"?>
<!--+
    | ProductExport - generic export pipeline
    |
    | Request parameters:
    |   iversion : Interface version. Determines how output files are named.
    |              When iversion is 2, the export ZIP or XML files are named
    |              {channel name}_Export_{date}_{country}_{locale}.{xml|zip}
    |              and the index file is named filelist{date}.txt.
    |              Otherwise the ZIP or XML files are named
    |              PhilipsCatalog_{date}_{country}_{locale}.{xml|zip}
    |              and the index file is named filelist.txt.
    |   threads : Number of concurrent processes to use when processing the locales.
    |   deleteinboxfiles : If "no" all files in the inbox are deleted when the export finshes.
    |   master : Determines whether master data is exported.
    |            When "yes" master data is exported in addition to locale data.
    |   zip : When "yes" the files for each locale are split into separate documents for each
    |         product and stored in a ZIP file.
    |   sourceCT : The source content type for the export. Defaults to PMT.
    |   broker-level : Determines what kind of data is included in the export. [-1 .. 5]
    |                  "min" is equivalent to -1
    |                  -1 to 5 exclude data.
    |                  5 will include the most data. 5 is also the default value.
    |   asset-syndication : Determines how many assets will be exported. [1 .. 5]
    |                       Maps to doctype_attributes.xml's configuraation.
    |   xucdm : Specifies the xUCDM version to export. If empty a default conversion is applied.
    |           Currently versions 1.1 and 1.2 are supported.
    |   bycategory: Export products grouped by category.
    |   compareData: When 'yes' a comparison is performed on the outgoing data. Data that is
    |                identical to the last export will not be included in the export result.
    |                Note that is parameter is effective only if zip=yes is also specified.
    |   safemove: When 'true' move files from outbox to archive by doing a copy/delete.
    |             This enables moving the files accross file system boundaries.
    |   full: When yes do a full export
    |       
    |   secure URL implementation    
    |   secureURL : When yes - secureURL will be enabled
    |   secureURL-minRange : Minimum days range to export secure URL, default value is 7 
    |   secureURL-maxRange : Maximum days range to export secure URL, default value is 45
    |
    | Overriding broker level filter and xUCDM conversion:
    | When a file exists {channel name}/convertProducts.xsl is available it will be used
    | to convert the source data. The brokerlevel and xucdm parameters will then have no effect.
    |
    | When a file {channel name}/filter.xsl is available it will be used instead of the
    | default broker level filter.
    |
    | When a file {channel name}/postprocess.xsl is available it will be applied after
    | all other conversions.
    |
    | If a directory PostProcess/{channel name} is available pipeline PostProcess/{channel name}/run
    | will be called after all files for all locales have been exported.
    +-->
    <!--
	  
	  FileName    :  sitemap.xmap
	  Author      :  Pikachu
	  
	  ***************
	  Change History
	  ***********************************************************************************************
	  NO          Author          Date          Description
	  ***********************************************************************************************
	  01          CJ              30-MAY-2014   Modified for Change Request - C0856383. 
                                              Added additional transformer - productRefsFilter.xsl 
	                                            after both master and locale converter.
	  ***********************************************************************************************
	  -->
    
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
    </map:transformers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>
  </map:components>
  <!-- -->
  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:pipelines>
    <!--
    <map:component-configurations>
      <global-variables>
        <channel>AtgLightingFamilies</channel>
        <ldir>AtgLightingFamilies/</ldir>
      </global-variables>
    </map:component-configurations>
    -->
    <!-- -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <!-- -->
      <map:match pattern="runPipeline">
        <!--
          This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple times in parallel.
          When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportMain
        -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportStart">
        <!-- Delete all files in the {global:gdir}{global:ldir}temp directory. Write the results of this action to a report.-->
        <map:act type="copy-source" src="cocoon:/deleteTempFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTmpFilesReport.xml"/>
        </map:act>
        <!-- Clear out outbox dir-->
        <map:act type="copy-source" src="cocoon:/deleteOutBox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_onStart.xml"/>
        </map:act>
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>
		<!-- Set Multiple language country code -->
		<map:act type="copy-source" src="cocoon:/findMultipleCountryCode">
              <map:parameter name="dest" value="../common/xml/multipleLanguageCountryList.xml"/>
         </map:act>
        <!-- Call the Main Export.-->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:threads}"/>
          <map:when test="">
            <map:act type="copy-source" src="cocoon:/exportMain">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
            </map:act>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/exportMainParallel">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
            </map:act>
            <map:act type="copy-source" src="cocoon:/processBatches/{global:gdir}{global:ldir}temp?prefix=batch.">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportProcessBatches.xml"/>
            </map:act>
            <map:act type="copy-source" src="cocoon:/createReport/{global:gdir}{global:ldir}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}logs/Report_{date:yyyyMMdd}T{date:HHmmss}.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <map:select type="resource-exists">
          <map:when test="PostProcess/{global:channel}/sitemap.xmap">
            <map:act type="copy-source" src="cocoon:/PostProcess/{global:channel}/run">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}/temp/ReportPostProcess.xml"/>
            </map:act>
          </map:when>
        </map:select>
        <!-- Create report file with list of generated files -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:iversion}"/>
          <map:when test="2">
            <map:act type="copy-source" src="cocoon:/reportFiles">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}/outbox/filelist{date:yyyyMMdd}T{date:HHmmss}.txt"/>
            </map:act>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/reportFiles">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}/outbox/filelist.txt"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <!-- -->
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ArchiveFiles.xml"/>
        </map:act>
        <!-- Move inbox content to archive-->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:deleteinboxfiles}"/>
          <map:when test="no"/>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/archiveInboxFiles">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ArchiveInboxFiles.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>
	  <map:match pattern="findMultipleCountryCode">
			<map:generate src="../common/xml/empty.xml"/>
			<map:transform src="xsl/sql_getMultipleCountryCodes.xsl">				
			</map:transform>			
			<map:call resource="sql"/>			
			<map:serialize type="xml"/>
	  </map:match>
      <map:match pattern="createReport/**">
        <map:generate type="xpathdirectory" src="{1}temp/">
          <map:parameter name="xpath" value="/batch"/>
          <map:parameter name="xmlFiles" value="FinalReport_.*\.xml$"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/makereport_fromfiles.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="../common/xsl/sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- -->
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportMain">
        <!-- loop over all languages -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_getlocales.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- transform output to get include statements to exportSub-->
         
         <map:select type="resource-exists">
              <map:when test="xsl/{global:channel}/ll2include.xsl">
             
     <!--   <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="ProductsMetadata2CQ"> -->
              	<map:transform type="xslt-saxon" src="xsl/{global:channel}/ll2include.xsl">
          		<map:parameter name="master" value="{request-param:master}"/>
        		</map:transform>
              </map:when>
              <map:otherwise>
              	<map:transform type="xslt-saxon" src="xsl/ll2include.xsl">
          		<map:parameter name="master" value="{request-param:master}"/>
        		</map:transform>
              </map:otherwise>
        </map:select>
        
        <map:transform type="include"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="../common/xsl/makereport.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="dir" value="{global:gdir}{global:ldir}"/>
          <map:parameter name="exportdate" value="{date:yyyyMMdd}T{date:hhmmss}"/>
        </map:transform>
        <!-- write to disk -->
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportMainParallel">
        <!-- loop over all languages -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_getlocales.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- transform output to get include statements to exportSub-->
        
        <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="Products2CQLighting">
              	<map:transform type="xslt-saxon" src="xsl/{global:channel}/ll2include.xsl">
          		<map:parameter name="master" value="{request-param:master}"/>
        		</map:transform>
              </map:when>
              <map:otherwise>
              	<map:select type="parameter">
              	<map:parameter name="parameter-selector-test" value="{global:channel}"/>
				<map:when test="Products2CQ">
              		<map:transform type="xslt-saxon" src="xsl/{global:channel}/ll2include.xsl">
          			<map:parameter name="master" value="{request-param:master}"/>
        			</map:transform>
              	</map:when> 
              	<map:otherwise>
              		<map:transform type="xslt-saxon" src="xsl/ll2include.xsl">
          			<map:parameter name="master" value="{request-param:master}"/>
        			</map:transform>
              	</map:otherwise>
              	  </map:select>
              </map:otherwise>
        </map:select>
        
        <map:transform type="xslt-saxon" src="xsl/create_ll2include_batches.xsl">
          <map:parameter name="threads" value="{request-param:threads}"/>
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp"/>
          <map:parameter name="prefix" value="batch."/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
         | Process files in a directory by reading them and performing a parallel include.
         -->
      <map:match pattern="processBatches/**">
        <map:generate type="directory" src="{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="{request-param:prefix}.*\.xml"/>
        </map:generate>
        <map:transform src="../common/xsl/dir2include_processBatches.xsl">
          <map:parameter name="process" value="cocoon:/processBatchFile"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processBatchFile/**">
        <map:generate src="{global:gdir}{global:ldir}{1}"/>
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestamp
        {2} country
        {3} locale
      -->
      <map:match pattern="exportSubMaster.*.*.*">
        <!-- export per locale -->
        <map:act type="copy-source" src="cocoon:/selectMasterExportProducts.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSelectMasterExportProducts_{1}_{2}_{3}.xml"/>
        </map:act>
        <!-- extract master files -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- export to temp, zip and remove -->
            
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="Products2CQLighting">
            	<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              	<map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            	</map:act>
            </map:when>
            <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
	 			<map:when test="Products2CQ">
            		<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}temp/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            		</map:act>
            	</map:when> 
            	<map:otherwise>
            		<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}temp/PhilipsCatalog_{1}_{2}_{3}.xml"/>
            		</map:act>
            	</map:otherwise>
            	</map:select>
            </map:otherwise>
            </map:select>
            
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:compareData}"/>
              <map:when test="yes">
                <map:act type="copy-source" src="cocoon:/deltaExport.{1}.{2}.{3}">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeltaExport_{1}_{2}_{3}.xml"/>
                </map:act>
              </map:when>
            </map:select>
            
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="Products2CQLighting">
            
            <map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}.zip">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.zip"/>
            </map:act>
            <map:act type="copy-source" src="cocoon:/deleteOutBox.{1}.{2}.{3}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_{1}_{2}_{3}.xml"/>
            </map:act>
            
            </map:when>
            <map:otherwise>
           		<map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
				<map:when test="Products2CQ">
            
            		<map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}.zip">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.zip"/>
            		</map:act>
            		<map:act type="copy-source" src="cocoon:/deleteOutBox.{1}.{2}.{3}">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_{1}_{2}_{3}.xml"/>
            		</map:act>
            
            	</map:when> 
				<map:otherwise>
					<map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.MASTER.zip">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PhilipsCatalog_{1}_{2}_{3}.zip"/>
            		</map:act>
            		<map:act type="copy-source" src="cocoon:/deleteOutBox.{1}.{2}.MASTER">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_{1}_{2}_{3}.xml"/>
            		</map:act>
			
				</map:otherwise> 
				</map:select>  
			</map:otherwise> 
			</map:select>          
          </map:when>
          <map:otherwise>
            <!-- export to outbox -->
            
       <map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="ProductsMetadata2CQ">
              	<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            	</map:act>
              </map:when>
		 <map:otherwise>
		<map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="{global:channel}"/>
		<map:when test="ProductsMetadata2CQLighting">
              	<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              		<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            	</map:act>
              </map:when>
              <map:otherwise>
              	<map:select type="parameter">
              		<map:parameter name="parameter-selector-test" value="{global:channel}"/>
              		<map:when test="ProductsMetadata2Hybris">
              			<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              				<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            			</map:act>
              		</map:when>
              		<map:otherwise>
              			<map:act type="copy-source" src="cocoon:/exportMasterFiles.{1}.{2}.{3}">
              				<map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PhilipsCatalog_{1}_{2}_{3}.xml"/>
           				</map:act>
            		</map:otherwise>
            	</map:select>
              </map:otherwise>
		</map:select>
              </map:otherwise>
              </map:select>      
          </map:otherwise>
          </map:select>
        <!-- -->
        <map:act type="copy-source" src="cocoon:/updateExportDate.{1}.{2}.MASTER">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportUpdateExportDate_{1}_{2}_{3}.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportSelectMasterExportProducts_{1}_{2}_{3}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportSub.*.*.*">
      <!-- http://localhost:8888/pipes/ProductExport.FSS/exportSub.20080707T1533.GB.en_GB?zip=yes -->
        <!-- export per locale -->
        <map:act type="copy-source" src="cocoon:/selectExportProducts.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSelectExportProducts_{1}_{2}_{3}.xml"/>
        </map:act>
        <!-- extract locale files-->
        <map:act type="copy-source" src="cocoon:/exportProducts.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ExportReport_{1}_{2}_{3}.xml"/>
        </map:act>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- Remove zipped files-->
            <map:act type="copy-source" src="cocoon:/deleteOutBox.{1}.{2}.{3}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteOutBox_{1}_{2}_{3}.xml"/>
            </map:act>
          </map:when>
        </map:select>
        <!-- -->
        <map:act type="copy-source" src="cocoon:/genReport.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/FinalReport_{1}_{2}_{3}.xml"/>
        </map:act>
        <!-- -->
        <map:act type="copy-source" src="cocoon:/updateExportDate.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportUpdateExportDate_{1}_{2}_{3}.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/FinalReport_{1}_{2}_{3}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="selectMasterExportProducts.*.*.*">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}inbox/catalog.xml">
            <map:generate src="{global:gdir}{global:ldir}inbox/catalog.xml"/>
            <map:transform type="xslt-saxon" src="xsl/sql_catselectmasterproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
            </map:transform>
          </map:when>
          <map:when test="{global:gdir}{global:ldir}inbox/subcatalog.xml">
            <map:generate src="{global:gdir}{global:ldir}inbox/subcatalog.xml"/>
            <map:select type="resource-exists">
               <map:when test="xsl/{global:channel}/sql_subcatselectmasterproducts.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_subcatselectmasterproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/>
                  <map:parameter name="locale" value="en_UK"/>
                  <map:parameter name="selectsubcat" value="yes"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="xsl/sql_selectmasterproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/>
                  <map:parameter name="selectsubcat" value="yes"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <!-- new content type parameter needed for ATG PCT export -->
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" />
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />
                </map:transform>
              </map:otherwise>
            </map:select>
          </map:when>
          <map:when test="{global:gdir}{global:ldir}inbox/all.xml">
            <map:generate src="../common/xml/empty.xml"/>
            <map:transform type="xslt-saxon" src="xsl/sql_selectmasterproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="selectall" value="yes"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}" />
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:generate src="../common/xml/empty.xml"/>
            <map:select type="resource-exists">
              <map:when test="xsl/{global:channel}/sql_selectmasterproducts.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_selectmasterproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <map:parameter name="selectall" value="{request-param:full}"/>
                  <!-- new content type parameter needed for ATG PCT export -->
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" /> 
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />                                   
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="xsl/sql_selectmasterproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <map:parameter name="selectall" value="{request-param:full}"/>
                  <!-- new content type parameter needed for ATG PCT export -->
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" />
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />
                </map:transform>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- -->
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | {1} timestamp
          | {2} country (deprecated)
          | {3} locale
          +-->
      <map:match pattern="selectExportProducts.*.*.*">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}inbox/catalog.xml">
            <map:generate src="{global:gdir}{global:ldir}inbox/catalog.xml"/>
            <map:transform type="xslt-saxon" src="xsl/sql_catselectproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/> <!-- deprecated -->
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
            </map:transform>
          </map:when>
          <map:when test="{global:gdir}{global:ldir}inbox/subcatalog.xml">
            <map:generate src="{global:gdir}{global:ldir}inbox/subcatalog.xml"/>
            <map:select type="resource-exists">
               <map:when test="xsl/{global:channel}/sql_subcatselectproducts.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_subcatselectproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/> <!-- deprecated -->
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="selectsubcat" value="yes"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="xsl/sql_selectproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/> <!-- deprecated -->
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="selectsubcat" value="yes"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <!-- new content type parameter needed for ATG PCT export -->
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" />
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />
                </map:transform>
              </map:otherwise>
            </map:select>
          </map:when>
          <map:when test="{global:gdir}{global:ldir}inbox/all.xml">
            <map:generate src="../common/xml/empty.xml"/>
            <map:transform type="xslt-saxon" src="xsl/sql_selectproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/> <!-- deprecated -->
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="selectall" value="yes"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}" />
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />  
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:generate src="../common/xml/empty.xml"/>
            <map:select type="resource-exists">
              <map:when test="xsl/{global:channel}/sql_selectproducts.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_selectproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="selectall" value="{request-param:full}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" />
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />  
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="xsl/sql_selectproducts.xsl">
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="country" value="{2}"/> <!-- deprecated -->
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="selectall" value="{request-param:full}"/>
                  <map:parameter name="kvpdocpath" value="{global:gdir}{global:ldir}inbox/keyvaluepairs.xml"/>
                  <!-- new content type parameter needed for ATG PCT export -->
                  <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
                  <map:parameter name="secureURL" value="{request-param:secureURL}" />
                  <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
                  <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
                </map:transform>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- -->
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestamp
        {2} country
        {3} locale (?)
      -->
      <map:match pattern="exportMasterFiles.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/sql_getmasterproducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_getmasterproducts.xsl">
               <map:parameter name="exportdate" value="{1}"/>
               <map:parameter name="country" value="{2}"/>
               <map:parameter name="locale" value="MASTER"/>
               <map:parameter name="channel" value="{global:channel}"/>
               <!-- new content type parameter needed for ATG PCT export -->
               <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
               <map:parameter name="secureURL" value="{request-param:secureURL}"/>
               <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
               <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="xsl/sql_getmasterproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="MASTER"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
            </map:transform>
          </map:otherwise>
        </map:select>
        <!-- Run db queries -->
        <map:call resource="sql"/>
		
		   <!-- Metadata Filters -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/metadataFilterProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/metadataFilterProducts.xsl">
            </map:transform>
          </map:when>
        </map:select>  
		
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/convertProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/convertProducts.xsl">
              <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="type" value="master"/>
              <map:parameter name="broker-level" value="{request-param:broker-level}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="xmlDir" value="{cmc2:xmlDir}"/> <!-- param. needed for LD Rendering export -->
            </map:transform>
            
<!-- Duplicate Filtering -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/duplicateFilterProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/duplicateFilterProducts.xsl">
            </map:transform>
          </map:when>
        </map:select>
		    
            <map:select type="resource-exists">
	              <map:when test="xsl/{global:channel}/productRefsFilter.xsl">
	                  <map:transform type="xslt-saxon" src="xsl/{global:channel}/productRefsFilter.xsl"/>
	              </map:when>
              </map:select>
              
              
            
          </map:when>
          <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:xucdm}"/>
              <map:when test="">
                <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl">
                  <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                  <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="type" value="master"/>
                  <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                </map:transform>
              </map:when>
              <map:otherwise>
              <map:transform type="xslt-saxon" src="xsl/xUCDM.{request-param:xucdm}.convertProducts.xsl">
                  <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                  <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                  <map:parameter name="type" value="master"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                  <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                  <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                  <map:parameter name="systemId" value="{cmc2:pubSystemId}"/>
                </map:transform>
              <map:select type="resource-exists">
                  <map:when test="xsl/{global:channel}/filter.xsl">
                    <map:transform type="xslt-saxon" src="xsl/{global:channel}/filter.xsl"/>
                  </map:when>
                  <map:otherwise>
                    <map:select type="parameter">
                      <map:parameter name="parameter-selector-test" value="{request-param:sourceCT}"/>
                      <map:when test="FMT">
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-family.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:when>
                      <map:otherwise>
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-product.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:otherwise>
                    </map:select>
                  </map:otherwise>
                </map:select>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <!--map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/postprocess.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/postprocess.xsl"/>
          </map:when>
        </map:select-->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- add split-->
            <map:select type="resource-exists">
              <map:when test="xsl/{global:channel}/xUCDMsplit.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/xUCDMsplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_MASTER/"/>
                  <map:parameter name="locale" value="MASTER"/>
                </map:transform>
              </map:when>
              <map:otherwise>
              
              <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="Products2CQLighting">
              
                <map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_en_QQ/"/>
                  <map:parameter name="prefix" value="{2}_en_QQ_"/>
                </map:transform>
               
              </map:when>
               <map:otherwise>
               		<map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
					<map:when test="Products2CQ">
              
                		<map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
                 		 <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_en_QQ/"/>
                  		<map:parameter name="prefix" value="{2}_en_QQ_"/>
                		</map:transform>
               
              		</map:when> 
              		<map:otherwise>
              			<map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
                 		 <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_MASTER/"/>
                 		 <map:parameter name="prefix" value="{2}_MASTER_"/>
                		</map:transform>
              		</map:otherwise>
              		</map:select>
              	</map:otherwise>
              </map:select>
              </map:otherwise>
            </map:select>
            <!-- end splitting-->
            <map:transform type="write-source"/>
          </map:when>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportProducts.*.*.*">
        <!-- what to export for this locale -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_getexports.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="locale" value="{3}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- transform output to get include statements to do the work-->
        <map:transform type="xslt-saxon" src="xsl/le2include.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="country" value="{2}"/>
          <map:parameter name="locale" value="{3}"/>
        </map:transform>
        <!-- excecute the includes-->
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestamp
        {2} country
        {3} locale
        E.g. http://localhost:8888/pipes/ProductExport.eShop/gotoMasterLocaleFiles.20080624T1057.master.en_UK
      -->
      <map:match pattern="gotoMasterLocaleFiles.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:act type="copy-source" src="cocoon:/exportMasterLocaleFiles.{1}.{2}.{3}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportPhilipsCatalog_{1}_{2}_master.xml"/>
        </map:act>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- Create an outgoing delta  -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:compareData}"/>
              <map:when test="yes">
                <map:act type="copy-source" src="cocoon:/deltaExport.{1}.{2}.{3}">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeltaExport_{1}_{2}_{3}.xml"/>
                </map:act>
              </map:when>
            </map:select>
            <!-- ZIP IT-->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:iversion}"/>
              <map:when test="2">
                <!-- The string 'master' within the 'value' attribute-value ensures the zip rouitine only picks up the master-locale files. -->
                <map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}_master.zip">
                  <!-- The string 'master' within the 'value' attribute-value ensures the zip routine uses the correct filename. -->
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_master.zip"/>
                </map:act>
              </map:when>
              <map:otherwise>
                 <!-- The string 'master' within the 'value' attribute-value ensures the zip rouitine only picks up the master-locale files. -->
                 <map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}_master.zip">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PhilipsCatalog_{1}_{2}_master.zip"/>
                </map:act>
              </map:otherwise>
            </map:select>
          </map:when>
        </map:select>
        <map:serialize type="xml"/>
        <!-- -->
      </map:match>
      <!--
        {1} timestamp
        {2} country
        {3} locale
        E.g. http://localhost:8888/pipes/ProductExport.eShop/gotoLocaleFiles.20080624T1057.DE.de_DE
      -->
      <map:match pattern="gotoLocaleFiles.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:iversion}"/>
          <map:when test="2">
            <map:act type="copy-source" src="cocoon:/exportLocaleFiles.{1}.{2}.{3}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.xml"/>
            </map:act>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/exportLocaleFiles.{1}.{2}.{3}">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PhilipsCatalog_{1}_{2}_{3}.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- Create an outgoing delta  -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:compareData}"/>
              <map:when test="yes">
                <map:act type="copy-source" src="cocoon:/deltaExport.{1}.{2}.{3}">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeltaExport_{1}_{2}_{3}.xml"/>
                </map:act>
              </map:when>
            </map:select>
            <!-- ZIP IT-->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:iversion}"/>
              <map:when test="2">
                <map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}.zip">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/{global:channel}_Export_{1}_{2}_{3}.zip"/>
                </map:act>
              </map:when>
              <map:otherwise>
                <map:act type="copy-source" src="cocoon:/zipOutBox.{1}.{2}.{3}.zip">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PhilipsCatalog_{1}_{2}_{3}.zip"/>
                </map:act>
              </map:otherwise>
            </map:select>
          </map:when>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestmap
        {2} country
        {3} locale
      -->
      <map:match pattern="exportMasterLocaleFiles.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/sql_getmasterlocaleproducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_getmasterlocaleproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" />               
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="xsl/sql_getmasterlocaleproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
            </map:transform>
          </map:otherwise>
        </map:select>

        <map:call resource="sql"/>
        <!-- Transform to create output -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/convertProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/convertProducts.xsl">
              <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="type" value="masterlocale"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
              <map:parameter name="broker-level" value="{request-param:broker-level}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="system" value="{cmc2:pubSystemId}"/>
              <map:parameter name="xmlDir" value="{cmc2:xmlDir}"/> <!-- param. needed for LD Rendering export -->
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:xucdm}"/>
              <map:when test="">
                <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl">
                  <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                  <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="type" value="masterlocale"/>
                  <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:select type="parameter">
                  <map:parameter name="parameter-selector-test" value="{request-param:sourceCT}"/>
                  <map:when test="FMT">
                    <map:transform type="xslt-saxon" src="xsl/xUCDM.{request-param:xucdm}.convertTreeNode.xsl">
                      <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                      <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                      <map:parameter name="type" value="locale"/>
                      <map:parameter name="channel" value="{global:channel}"/>
                      <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                      <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                      <map:parameter name="system" value="{cmc2:pubSystemId}"/>
                    </map:transform>
                  </map:when>
                  <map:otherwise>
                    <map:transform type="xslt-saxon" src="xsl/xUCDM.{request-param:xucdm}.convertProducts.xsl">
                      <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                      <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                      <map:parameter name="type" value="masterlocale"/>
                      <map:parameter name="channel" value="{global:channel}"/>
                      <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                      <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                      <map:parameter name="locale" value="{3}"/>
                      <map:parameter name="system" value="{cmc2:pubSystemId}"/>
                    </map:transform>
                  </map:otherwise>
                </map:select>
                <map:select type="resource-exists">
                  <map:when test="xsl/{global:channel}/filter.xsl">
                    <map:transform type="xslt-saxon" src="xsl/{global:channel}/filter.xsl"/>
                  </map:when>
                  <map:otherwise>
                    <map:select type="parameter">
                      <map:parameter name="parameter-selector-test" value="{request-param:sourceCT}"/>
                      <map:when test="FMT">
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-family.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:when>
                      <map:otherwise>
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-product.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:otherwise>
                    </map:select>
                  </map:otherwise>
                </map:select>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <!--map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/postprocess.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/postprocess.xsl"/>
          </map:when>
        </map:select-->
        <!-- -->
       <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <!-- add split-->
              <map:select type="resource-exists">
                <map:when test="xsl/{global:channel}/xUCDMsplit.xsl">
                  <map:transform type="xslt-saxon" src="xsl/{global:channel}/xUCDMsplit.xsl">
                    <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_{3}_master/"/>
                    <map:parameter name="prefix" value="{2}_{3}_"/>
                    <!-- The 'country' parameter enables a different filenaming to the MasterLocaleFiles than the LocaleFiles. -->
                    <map:parameter name="country" value="{2}"/>
                    <map:parameter name="locale" value="{3}"/>
                    <map:parameter name="isMaster" value="true"/>
                  </map:transform>
                </map:when>
               <map:otherwise>
                  <map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
                     <!-- The string 'master' within the 'value' attribute-value ensures the generation of master-locale files on a different location than master files and locale files. -->
                    <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_{3}_master/"/>
                    <map:parameter name="prefix" value="{2}_{3}_"/>
                  </map:transform>
                </map:otherwise>
              </map:select>
            <!-- end splitting-->
          </map:when>
          <map:otherwise>
            <!-- Splitting isn't needed-->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:iversion}"/>
              <map:when test="2">
                <map:transform type="xslt-saxon" src="../common/xsl/xUCDMNosplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/"/>
                  <map:parameter name="prefix" value="{global:channel}_Export_{1}_{2}_master"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="../common/xsl/xUCDMNosplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/"/>
                  <map:parameter name="prefix" value="PhilipsCatalog_{1}_{2}_master"/>
                </map:transform>
              </map:otherwise>
            </map:select>
            <!-- end splitting-->
          </map:otherwise>
        </map:select>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | {1} timestamp
          | {2} country
          | {3} locale
          |
          |  TEST:
          |  update customer_locale_export set flag = 1 where customer_id = 'WebcollageProducts' and locale = 'en_US' and ctn = '42PFL6704D/F7'
          |  http://localhost:8888/pipes/ProductExport.WebcollageProducts/exportLocaleFiles.20080624T1057.US.en_US?zip=no&xucdm=1.1&master=no&broker-level=5
          |
          |  update customer_locale_export set flag = 1 where customer_id = 'AtgProducts' and locale = 'de_DE' and ctn = '22PFL3415H/12'
          |  localhost:8888/pipes/ProductExport.AtgProducts/exportLocaleFiles.20111005T1057.DE.de_DE?zip=yes&master=no
          +-->
      <map:match pattern="exportLocaleFiles.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/sql_getlocaleproducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/sql_getlocaleproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="xsl/sql_getlocaleproducts.xsl">
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="country" value="{2}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <!-- new content type parameter needed for ATG PCT export -->
              <map:parameter name="sourceCT" value="{request-param:sourceCT}" />
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="secureURL-minRange" value="{request-param:secureURL-minRange}" />
              <map:parameter name="secureURL-maxRange" value="{request-param:secureURL-maxRange}" /> 
            </map:transform>
          </map:otherwise>
        </map:select>
        <!-- Run db queries -->
        <map:call resource="sql"/>

        <!-- Metadata Filters -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/metadataFilterProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/metadataFilterProducts.xsl">
            </map:transform>
          </map:when>
        </map:select>    
                
        <!-- Transform to create output -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/convertProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/convertProducts.xsl">
              <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
              <map:parameter name="secureURL" value="{request-param:secureURL}"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="type" value="locale"/>
              <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
              <map:parameter name="broker-level" value="{request-param:broker-level}"/>
              <map:parameter name="locale" value="{3}"/>
              <map:parameter name="exportdate" value="{1}"/>
              <map:parameter name="full" value="{request-param:full}"/>
              <map:parameter name="system" value="{cmc2:pubSystemId}"/>
              <map:parameter name="xmlDir" value="{cmc2:xmlDir}"/>
            </map:transform>

		<!-- Duplicate Filtering -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/duplicateFilterProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/duplicateFilterProducts.xsl">
            </map:transform>
          </map:when>
        </map:select>
		
            <map:select type="resource-exists">
	            <map:when test="xsl/{global:channel}/productRefsFilter.xsl">
			            <map:transform type="xslt-saxon" src="xsl/{global:channel}/productRefsFilter.xsl"/>
	            </map:when>
            </map:select>
            
			</map:when>
          <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:xucdm}"/>
              <map:when test="">
                <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl">
                  <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                  <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                  <map:parameter name="exportdate" value="{1}"/>
                  <map:parameter name="type" value="locale"/>
                  <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="channel" value="{global:channel}"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:select type="parameter">
                  <map:parameter name="parameter-selector-test" value="{request-param:sourceCT}"/>
                  <map:when test="FMT">
                    <map:transform type="xslt-saxon" src="xsl/xUCDM.{request-param:xucdm}.convertTreeNode.xsl">
                      <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                      <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                      <map:parameter name="type" value="locale"/>
                      <map:parameter name="channel" value="{global:channel}"/>
                      <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                      <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                      <map:parameter name="locale" value="{3}"/>
                      <map:parameter name="system" value="{cmc2:pubSystemId}"/>
                    </map:transform>
                  </map:when>
                  <map:otherwise>
                    
                    <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="SearchStream">
                    
                    <map:transform type="xslt-saxon" src="xsl/SearchStream.{request-param:xucdm}.convertProducts.xsl">
                      <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                      <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                      <map:parameter name="type" value="locale"/>
                      <map:parameter name="channel" value="{global:channel}"/>
                      <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                      <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                      <map:parameter name="locale" value="{3}"/>
                      <map:parameter name="system" value="{cmc2:pubSystemId}"/>
                    </map:transform>
                    </map:when>
                    <map:otherwise>
                    <map:transform type="xslt-saxon" src="xsl/xUCDM.{request-param:xucdm}.convertProducts.xsl">
                      <map:parameter name="doctypesfilepath" value="{cmc2:xmlDir}/doctype_attributes.xml"/>
                      <map:parameter name="secureURL" value="{request-param:secureURL}"/>
                      <map:parameter name="type" value="locale"/>
                      <map:parameter name="channel" value="{global:channel}"/>
                      <map:parameter name="asset-syndication" value="{request-param:asset-syndication}"/>
                      <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                      <map:parameter name="locale" value="{3}"/>
                      <map:parameter name="system" value="{cmc2:pubSystemId}"/>
                    </map:transform>
                    
                    </map:otherwise>
                    </map:select>
                    
                    
                  </map:otherwise>
                </map:select>
                <map:select type="resource-exists">
                  <map:when test="xsl/{global:channel}/filter.xsl">
                    <map:transform type="xslt-saxon" src="xsl/{global:channel}/filter.xsl"/>
                  </map:when>
                  <map:otherwise>
                    <map:select type="parameter">
                      <map:parameter name="parameter-selector-test" value="{request-param:sourceCT}"/>
                      <map:when test="FMT">
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-family.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:when>
                      <map:otherwise>
                        <map:transform type="xslt-saxon" src="../common/xsl/broker-level-filter-product.xsl">
                          <map:parameter name="broker-level" value="{request-param:broker-level}"/>
                          <map:parameter name="xucdm-version" value="{request-param:xucdm}"/>
                        </map:transform>
                      </map:otherwise>
                    </map:select>
                  </map:otherwise>
                </map:select>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        
        <!-- Duplicate Filtering -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/duplicateFilterProducts.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/duplicateFilterProducts.xsl">
            </map:transform>
          </map:when>
        </map:select>
        
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}/postprocess.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}/postprocess.xsl">
              <map:parameter name="catalogreportfile" value="{global:gdir}{global:ldir}temp/ReportSelectExportProducts_{1}_{2}_{3}.xml"/>
              <map:parameter name="broker-level" value="{request-param:broker-level}"/>
              <map:parameter name="locale" value="{3}"/>
            </map:transform>
          </map:when>
        </map:select>
        <!-- -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:bycategory}"/>
          <map:when test="yes">
            <!-- split by category -->
            <map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
              <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/"/>
              <map:parameter name="prefix" value="{2}_{3}_"/>
              <map:parameter name="bycategory" value="yes"/>
            </map:transform>
            <!-- end splitting-->
            <map:transform type="write-source"/>
          </map:when>
        </map:select>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <map:select type="resource-exists">
              <map:when test="xsl/{global:channel}/xUCDMsplit.xsl">
                <map:transform type="xslt-saxon" src="xsl/{global:channel}/xUCDMsplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_{3}/"/>
                  <map:parameter name="locale" value="{3}"/>
                  <map:parameter name="prefix" value="{2}_{3}_"/>
                </map:transform>
              </map:when>
              <map:otherwise>
                <map:transform type="xslt-saxon" src="../common/xsl/xUCDMsplit.xsl">
                  <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox/{2}_{3}/"/>
                  <map:parameter name="prefix" value="{2}_{3}_"/>
                </map:transform>
              </map:otherwise>
            </map:select>
            <!-- end splitting-->
            <map:transform type="write-source"/>
          </map:when>
        </map:select> 
        <map:serialize type="xml"/>
      </map:match>
      <!--
        Perform a delta comparison on the files in the outbox and remove files that are identical.
        {1} timestamp
        {2} country
        {3} locale
      -->
      <map:match pattern="deltaExport.*.*.*">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}outbox/{2}_{3}">
            <map:select type="resource-exists">
              <!-- Channel specific delta compare -->
              <map:when test="xsl/{global:channel}/prepareDeltaExport.xsl">
                <map:act type="copy-source" src="cocoon://pipes/common/deltaExport?dir={global:gdir}{global:ldir}outbox/{2}_{3}&amp;cacheDir={global:gdir}{global:ldir}cache/{2}_{3}&amp;deltaXsl={cmc2:pipesDir}/ProductExport/xsl/{global:channel}/prepareDeltaExport.xsl">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deltaExport_{1}_{2}_{3}_report.xml"/>
                </map:act>
              </map:when>
              <!-- Default delta compare -->
              <map:when test="xsl/prepareDeltaExport.xsl">
                <map:act type="copy-source" src="cocoon://pipes/common/deltaExport?dir={global:gdir}{global:ldir}outbox/{2}_{3}&amp;cacheDir={global:gdir}{global:ldir}cache/{2}_{3}&amp;deltaXsl={cmc2:pipesDir}/ProductExport/xsl/prepareDeltaExport.xsl">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deltaExport_{1}_{2}_{3}_report.xml"/>
                </map:act>
              </map:when>
              <!-- Raw delta compare -->
              <map:otherwise>
                <map:act type="copy-source" src="cocoon://pipes/common/deltaExport?dir={global:gdir}{global:ldir}outbox/{2}_{3}&amp;cacheDir={global:gdir}{global:ldir}cache/{2}_{3}">
                  <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deltaExport_{1}_{2}_{3}_report.xml"/>
                </map:act>
              </map:otherwise>
            </map:select>
            <map:generate src="{global:gdir}{global:ldir}temp/deltaExport_{1}_{2}_{3}_report.xml"/>
          </map:when>
          <map:otherwise>
            <map:generate src="../common/xml/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestmap
        {2} country
        {3} locale
      -->
      <map:match pattern="zipOutBox.*.*.*.zip">
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}outbox/{2}_{3}">
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{global:channel}"/>
              <map:when test="PMTRenderingExport">
                <map:generate src="../common/xml/empty.xml"/>
              </map:when>
              <map:otherwise>
                <map:generate type="directory" src="{global:gdir}{global:ldir}outbox/{2}_{3}">
                  <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value=".*\.xml"/>
                </map:generate>
              </map:otherwise>
            </map:select>
          </map:when>
          <map:otherwise>
            <map:generate src="../common/xml/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="../common/xsl/dir2zip.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox/{2}_{3}/"/>
          <map:parameter name="zipDir" value=""/>
          <!--map:parameter name="text" value="datetime{1}, country={2}, locale={3}"/-->
        </map:transform>
        <map:serialize type="zip"/>
      </map:match>
      <!-- Delete all files in the outbox directory -->
      <map:match pattern="deleteOutBox">
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="2"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_deletetree.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        Delete files for a particular country/locale in the outbox directory
        {1} timestamp
        {2} country
        {3} locale
      -->
      <map:match pattern="deleteOutBox.*.*.*">
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="2"/>
          <map:parameter name="include" value="{2}_{3}|.*\.{2}_{3}\..*|.*\.{3}\..*"/>
          <map:parameter name="exclude" value=".*\.zip"/>
        </map:generate>
        <!--
          If we are keeping a cache of the exported data (in order to do a delta export)
          or if we actually performed a delta export (using compareData=yes)
          move the outbox files to the cache.
        -->
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}cache/{2}_{3}">
            <!-- Move outbox files to cache dir -->
            <map:transform src="xsl/dir2shell_movecache.xsl">
              <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox/{2}_{3}"/>
              <map:parameter name="targetDir" value="{global:gdir}{global:ldir}cache/{2}_{3}"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:compareData}"/>
              <map:when test="yes">
                <!-- Move outbox files to cache dir -->
                <map:transform src="xsl/dir2shell_movecache.xsl">
                  <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox/{2}_{3}"/>
                  <map:parameter name="targetDir" value="{global:gdir}{global:ldir}cache/{2}_{3}"/>
                </map:transform>
                <map:transform type="shell"/>
              </map:when>
            </map:select>
          </map:otherwise>
        </map:select>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_deletetree.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}outbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestmap
        {2} country
        {3} locale
      -->
      <map:match pattern="genReport.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="../common/xsl/sql_genreport.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="country" value="{2}"/>
          <map:parameter name="locale" value="{3}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} timestmap
        {2} country
        {3} locale
      -->
      <map:match pattern="updateExportDate.*.*.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_updatetransmitdate.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="country" value="{2}"/>
          <map:parameter name="locale" value="{3}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <!-- -->
        <map:serialize type="xml"/>
      </map:match>
      <!--  -->
      <map:match pattern="reportFiles">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:zip}"/>
          <map:when test="yes">
            <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
              <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
              <map:parameter name="depth" value="1"/>
              <map:parameter name="include" value=".*\.zip"/>
            </map:generate>
          </map:when>
          <map:otherwise>
            <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
              <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
              <map:parameter name="depth" value="1"/>
              <map:parameter name="include" value=".*"/>
            </map:generate>
          </map:otherwise>
        </map:select>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:xucdm}"/>
          <map:when test="1.1">
            <map:transform type="xslt-saxon" src="xsl/xUCDM.1.1.dir2filelist.xsl">
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="exportdate" value="{date:yyyyMMdd}T{date:hhmmss}"/>
              <map:parameter name="exporttype" value="ProductExport"/>
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="../common/xsl/dir2filelist.xsl">
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="exportdate" value="{date:yyyyMMdd}T{date:hhmmss}"/>
            </map:transform>
          </map:otherwise>
        </map:select>
        <map:serialize mime-type="text/plain" type="text"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveFiles">
        <!-- Archive all files in outbox -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}outbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Move files to archive -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:xucdm}"/>
          <map:when test="1.1">
            <map:transform type="xslt-saxon" src="xsl/xUCDM.1.1.archiveFiles.xsl">
              <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
              <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
              <map:parameter name="channel" value="{global:channel}"/>
              <map:parameter name="exporttype" value="ProductExport"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:safemove}"/>
              <map:when test="true">
                <!-- This enables moving files accross filesystems -->
                <map:transform src="../common/xsl/dir2shell_copy.xsl">
                  <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
                  <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
                </map:transform>
                <map:transform type="shell"/>
                <!-- Delete the files that were copied successfully -->
                <map:transform type="xslt-saxon" src="../common/xsl/shellCopyResult2Delete.xsl"/>
                <map:transform type="shell"/>
              </map:when>
              <map:otherwise>
                <map:transform src="../common/xsl/dir2shell_move.xsl">
                  <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
                  <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
                </map:transform>
                <map:transform type="shell"/>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteTempFiles">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}temp"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="testConvert">
        <map:generate src="xsl/testProduct.xml"/>
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="testPipeline">
        <map:act type="copy-source" src="cocoon:/restoreTestFiles">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/RestoreTestFilesReport.xml"/>
        </map:act>
        <!-- -->
        <map:act type="copy-source" src="cocoon:/runPipeline">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/runPipeline.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/runPipeline.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="restoreTestFiles">
        <!-- Move files from testdata to inbox -->
        <!-- Retrieve all files in testdata -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}testdata">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Move files to inbox  -->
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}testdata"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="restoreArchiveFiles">
        <!-- Move files from archive to inbox -->
        <!-- Retrieve all files in archive -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}archive">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Move files to inbox  -->
        <map:transform src="../common/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}archive"/>
          <map:parameter name="targetDir" value="inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteArchiveFiles">
        <!-- Delete all files in {global:gdir}{global:ldir}temp directory -->
        <!-- Retrieve all files in {global:gdir}{global:ldir}temp directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}archive">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}archive"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveInboxFiles">
        <!-- Archive all files in inbox -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <!-- Move files to archive -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}inbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive"/>
          <map:parameter name="channel" value="{global:ldir}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- Mount any sub sitemaps -->
      <map:match pattern="*/**">
        <map:mount check-reload="yes" src="{1}/" uri-prefix="{1}"/>
      </map:match>
    </map:pipeline>

  </map:pipelines>
  <!-- -->
</map:sitemap>