<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <!--- -->
  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
    </map:transformers>    
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>
  </map:components>
  <!--- -->
  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>  
  <!--- -->
  <map:pipelines>
    <!--- -->
    <map:component-configurations>
      <global-variables>
        <ldir>CalculateProductRanking/</ldir>
          <channel>CalculateProductRanking</channel>
      </global-variables>
    </map:component-configurations>
    <!--- -->
    <map:pipeline name="{global:channel}" type="noncaching">
      <!--- -->
      <map:match pattern="runPipeline">
        <!-- This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple times in parallel.
        When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportMain -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}"/>
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:generate src="{global:gdir}{global:ldir}temp/import.xml"/>
          <map:serialize type="xml"/>
        </map:act>
        <map:generate src="../common/xml/locked.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportStart">
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml"/>
        </map:act>
        <!-- Call the Main Export.-->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml"/>
        </map:act>
        <!-- Set End Time of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- set Start / End Time -->
      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="../common/xsl/sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportMain">
        <!-- Clean temp -->
        <map:act type="copy-source" src="cocoon:/deleteDirectoryContents.temp.1">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/deleteTempFilesReport.xml"/>
        </map:act>
        <!-- Loop over locale and catalogs -->
        <map:generate src="../common/xml/empty.xml"/>        
        <map:transform src="xsl/sql_getLocalesandCatalogs.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>   
        <map:call resource="sql"/>
        
        <!-- including for processRanking -->
        <map:transform type="xslt-saxon" src="xsl/includeForRanking.xsl" label="stepA"/>
        <map:transform type="cinclude"/>
        
        <map:serialize type="xml"/>        
        
     </map:match>
     
     <!-- 
       processRanking
       1) Country
       2) Catalog 
       --> 	                
     <map:match pattern="processRanking.*.*">        
        
        <map:generate src="../common/xml/empty.xml"/>
                
        <map:transform src="xsl/sql_calculateProductsRanking.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
          <map:parameter name="country" value="{1}"/>
          <map:parameter name="catalog" value="{2}"/>
        </map:transform>        
        <map:call resource="sql"/>
                
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- -->
      <map:match pattern="setFlags.*">
      <!-- export per locale {1} timestamp  -->      
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_setFlags.xsl">
          <map:parameter name="timestamp" value="{1}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>          
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="retrieveContent.*">
         <!-- {1} timestamp -->
         <!-- export all locale -->
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveContent.xsl">
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>           
        <map:call resource="sql"/>
        <!-- Use ParameterSelector -->
        <map:select type="resource-exists">
          <map:when test="xsl/{global:channel}_format.xsl">
            <map:transform type="xslt-saxon" src="xsl/{global:channel}_format.xsl">
              <map:parameter name="timestamp" value="{1}"/>
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="xsl/formatRichText.xsl">
              <map:parameter name="timestamp" value="{1}"/>
            </map:transform>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="genReport.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_genreport.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="updateTransmitTimestamp.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:transform src="xsl/sql_updatetransmitdate.xsl">
          <map:parameter name="exportdate" value="{1}"/>
          <map:parameter name="channel" value="{global:channel}"/>
        </map:transform>
        <map:call resource="sql"/>        
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Archive -->
       <map:match pattern="archive.*">
        <map:act type="copy-source" src="cocoon:/archiveFiles.{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportArchiveFiles.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/createCONTENTREADY.{1}">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportCreateContentReady.xml"/>
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportArchiveFiles.xml"/>
        <map:serialize type="xml"/>
       </map:match>
       <!-- -->
       <map:match pattern="archiveFiles.*">
        <!-- Archive files that contain at least one Rich text -->
        <map:generate type="xpathdirectory" src="{global:gdir}{global:ldir}outbox" label="step1">
          <map:parameter name="xpath" value="/node()[local-name()='ObjectKeys']/node()[local-name()='ObjectKey']"/>
          <map:parameter name="xmlFiles" value=".*\.xml"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform src="xsl/archive.xsl">
          <map:parameter name="sourceDir" value="{global:gdir}{global:ldir}outbox"/>
          <map:parameter name="targetDir" value="{global:gdir}{global:ldir}archive/{1}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
       <!-- Create CONTENT-READY file -->
      <map:match pattern="createCONTENTREADY.*">
        <map:generate src="../common/xml/empty.xml"/>
        <map:select type="resource-exists">
          <map:when test="{global:gdir}{global:ldir}archive/{1}">
            <map:act type="copy-source" src="../common/xml/empty.xml">
              <map:parameter name="dest" value="{global:gdir}{global:ldir}archive/{1}/CONTENT-READY"/>
            </map:act>
          </map:when>
          <map:otherwise/>
        </map:select>
        <map:serialize type="xml"/>        
      </map:match>
           
      <map:match pattern="deleteDirectoryContents.*.*">
        <!-- Delete all files in {1} to a level of {2} -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="{2}"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="../common/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}{1}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
    </map:pipeline>
  </map:pipelines>
  <!-- -->
  <map:views>
    <map:view name="stepX" from-label="stepX">
      <map:serialize type="xml"/>
    </map:view>
  </map:views>
  <!-- -->
</map:sitemap>
