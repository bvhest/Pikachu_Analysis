<?xml version="1.0" encoding="UTF-8"?>
<rng:grammar xmlns:rng="http://relaxng.org/ns/structure/1.0"
             xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0"
             xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
             ns="http://www.w3.org/1999/XSL/Transform"
             datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<a:documentation>
  
  
    This is a schema for XSLT 2.0 stylesheets.
    
    It defines all the elements that appear in the XSLT namespace; it also
    provides hooks that allow the inclusion of user-defined literal result elements,
    extension instructions, and top-level data elements.
    
    The schema is derived (with kind permission) from a schema for XSLT 1.0 stylesheets
    produced by Asir S Vedamuthu of WebMethods Inc.
    
    This schema is available for use under the conditions of the W3C Software License
    published at http://www.w3.org/Consortium/Legal/copyright-software-19980720
    
    The schema is organized as follows:
    
    PART A: definitions of complex types and model groups used as the basis 
            for element definitions
    PART B: definitions of individual XSLT elements
    PART C: definitions for literal result elements
    PART D: definitions of simple types used in attribute definitions
    
    This schema does not attempt to define all the constraints that apply to a valid
    XSLT 2.0 stylesheet module. It is the intention that all valid stylesheet modules 
    should conform to this schema; however, the schema is non-normative and in the event 
    of any conflict, the text of the Recommendation takes precedence.

    This schema does not implement the special rules that apply when a stylesheet
    has sections that use forwards-compatible-mode. In this mode, setting version="3.0"
    allows elements from the XSLT namespace to be used that are not defined in XSLT 2.0.

    Simplified stylesheets (those with a literal result element as the outermost element)
    will validate against this schema only if validation starts in lax mode.
    
    This version is dated 2007-03-16
    Authors: Michael H Kay, Saxonica Limited
             Jeni Tennison, Jeni Tennison Consulting Ltd.
             
    2007-03-15: added xsl:document element
                revised xsl:sequence element
                see http://www.w3.org/Bugs/Public/show_bug.cgi?id=4237         
    
  
</a:documentation>   
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
 
<!--
The declaration of xml:space and xml:lang may need to be commented out because
of problems processing the schema using various tools
-->
      
<rng:include href="http://www.w3.org/2001/xml.rng" ns="http://www.w3.org/XML/1998/namespace"/>

   <!-- 
    An XSLT stylesheet may contain an in-line schema within an xsl:import-schema element,
    so the Schema for schemas needs to be imported
-->
  
<rng:include href="http://www.w3.org/2001/XMLSchema.rng"
                ns="http://www.w3.org/2001/XMLSchema"/>

   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<a:documentation>
  
    PART A: definitions of complex types and model groups used as the basis 
            for element definitions
  
</a:documentation>   
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<rng:define name="generic-element-type">
      <rng:optional>
         <rng:attribute name="default-collation">
            <rng:ref name="uri-list"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="exclude-result-prefixes">
            <rng:ref name="prefix-list-or-all"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="extension-element-prefixes">
            <rng:ref name="prefix-list"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="use-when">
            <rng:ref name="expression"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="xpath-default-namespace">
            <rng:data type="anyURI"/>
         </rng:attribute>
      </rng:optional>
      <rng:attribute>
         <rng:anyName/>
         <rng:text/>
      </rng:attribute>
   </rng:define>

   <rng:define name="versioned-element-type">
  
      <rng:ref name="generic-element-type"/>    
      <rng:optional>
         <rng:attribute name="version">
            <rng:data type="decimal"/>
         </rng:attribute>
      </rng:optional>
    
  
   </rng:define>

   <rng:define name="element-only-versioned-element-type">
  
      <rng:ref name="versioned-element-type"/>
      <rng:attribute>
         <rng:anyName/>
         <rng:text/>
      </rng:attribute>
    
  
   </rng:define>

   <rng:define name="sequence-constructor">
  
      <rng:ref name="versioned-element-type"/>    
      <rng:zeroOrMore>
         <rng:ref name="sequence-constructor-group"/>
      </rng:zeroOrMore>
    
  
   </rng:define>

   <rng:define name="sequence-constructor-group">
      <rng:choice>
         <rng:ref name="variable"/>
         <rng:ref name="instruction"/>
         <rng:ref name="result-elements"/>
      </rng:choice>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="declaration"/>
   </rng:start>
   <rng:define name="declaration">
      <rng:element name="declaration">
         <rng:ref name="generic-element-type"/>
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="instruction"/>
   </rng:start>
   <rng:define name="instruction">
      <rng:element name="instruction">
         <rng:ref name="versioned-element-type"/>
      </rng:element>
   </rng:define>

   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<a:documentation>
  
    PART B: definitions of individual XSLT elements    
    Elements are listed in alphabetical order.    
  
</a:documentation>   
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<rng:start combine="choice">
      <rng:ref name="analyze-string"/>
   </rng:start>
   <rng:define name="analyze-string">
      <rng:element name="analyze-string">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:optional>
            <rng:ref name="matching-substring"/>
         </rng:optional>
          <rng:optional>
            <rng:ref name="non-matching-substring"/>
         </rng:optional>
          <rng:zeroOrMore>
            <rng:ref name="fallback"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="select">
            <rng:ref name="expression"/>
         </rng:attribute>
        <rng:attribute name="regex">
            <rng:ref name="avt"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="flags" a:defaultValue="">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="apply-imports"/>
   </rng:start>
   <rng:define name="apply-imports">
      <rng:element name="apply-imports">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="with-param"/>
         </rng:zeroOrMore>
        
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="apply-templates"/>
   </rng:start>
   <rng:define name="apply-templates">
      <rng:element name="apply-templates">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:zeroOrMore>
            <rng:choice>
               <rng:ref name="sort"/>
               <rng:ref name="with-param"/>
            </rng:choice>
         </rng:zeroOrMore>
        <rng:optional>
            <rng:attribute name="select" a:defaultValue="child::node()">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="mode">
               <rng:ref name="mode"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="attribute"/>
   </rng:start>
   <rng:define name="attribute">
      <rng:element name="attribute">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="avt"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="namespace">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="separator">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>   
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>        

   <rng:start combine="choice">
      <rng:ref name="attribute-set"/>
   </rng:start>
   <rng:define name="attribute-set">
      <rng:element name="attribute-set">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:ref name="attribute"/>
        
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="use-attribute-sets" a:defaultValue="">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="call-template"/>
   </rng:start>
   <rng:define name="call-template">
      <rng:element name="call-template">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="with-param"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="character-map"/>
   </rng:start>
   <rng:define name="character-map">
      <rng:element name="character-map">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="output-character"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="use-character-maps" a:defaultValue="">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="choose"/>
   </rng:start>
   <rng:define name="choose">
      <rng:element name="choose">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:oneOrMore>
            <rng:ref name="when"/>
         </rng:oneOrMore>
          <rng:optional>
            <rng:ref name="otherwise"/>
         </rng:optional>
        
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="comment"/>
   </rng:start>
   <rng:define name="comment">
      <rng:element name="comment">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="copy"/>
   </rng:start>
   <rng:define name="copy">
      <rng:element name="copy">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="copy-namespaces" a:defaultValue="yes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="inherit-namespaces" a:defaultValue="yes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="use-attribute-sets" a:defaultValue="">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="copy-of"/>
   </rng:start>
   <rng:define name="copy-of">
      <rng:element name="copy-of">
  
    
         <rng:ref name="versioned-element-type"/>
        <rng:attribute name="select">
            <rng:ref name="expression"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="copy-namespaces" a:defaultValue="yes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="document"/>
   </rng:start>
   <rng:define name="document">
      <rng:element name="document">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="decimal-format"/>
   </rng:start>
   <rng:define name="decimal-format">
      <rng:element name="decimal-format">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:optional>
            <rng:attribute name="name">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="decimal-separator" a:defaultValue=".">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="grouping-separator" a:defaultValue=",">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="infinity" a:defaultValue="Infinity">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="minus-sign" a:defaultValue="-">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="NaN" a:defaultValue="NaN">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="percent" a:defaultValue="%">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="per-mille" a:defaultValue="‰">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="zero-digit" a:defaultValue="0">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="digit" a:defaultValue="#">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="pattern-separator" a:defaultValue=";">
               <rng:ref name="char"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="element"/>
   </rng:start>
   <rng:define name="element">
      <rng:element name="element">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="avt"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="namespace">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="inherit-namespaces" a:defaultValue="yes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="use-attribute-sets" a:defaultValue="">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="fallback"/>
   </rng:start>
   <rng:define name="fallback">
      <rng:element name="fallback">
         <rng:ref name="sequence-constructor"/>
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="for-each"/>
   </rng:start>
   <rng:define name="for-each">
      <rng:element name="for-each">
  
    
         <rng:ref name="versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="sort"/>
         </rng:zeroOrMore>
          <rng:zeroOrMore>
            <rng:ref name="sequence-constructor-group"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="select">
            <rng:ref name="expression"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="for-each-group"/>
   </rng:start>
   <rng:define name="for-each-group">
      <rng:element name="for-each-group">
  
    
         <rng:ref name="versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="sort"/>
         </rng:zeroOrMore>
          <rng:zeroOrMore>
            <rng:ref name="sequence-constructor-group"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="select">
            <rng:ref name="expression"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="group-by">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="group-adjacent">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>            
        <rng:optional>
            <rng:attribute name="group-starting-with">
               <rng:ref name="pattern"/>
            </rng:attribute>
         </rng:optional>            
        <rng:optional>
            <rng:attribute name="group-ending-with">
               <rng:ref name="pattern"/>
            </rng:attribute>
         </rng:optional>            
        <rng:optional>
            <rng:attribute name="collation">
               <rng:data type="anyURI"/>
            </rng:attribute>
         </rng:optional>            
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="function"/>
   </rng:start>
   <rng:define name="function">
      <rng:element name="function">
  
    
         <rng:ref name="versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="param"/>
         </rng:zeroOrMore>
          <rng:zeroOrMore>
            <rng:ref name="sequence-constructor-group"/>
         </rng:zeroOrMore>
        
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="override" a:defaultValue="yes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="as" a:defaultValue="item()*">
               <rng:ref name="sequence-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="if"/>
   </rng:start>
   <rng:define name="if">
      <rng:element name="if">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="test">
            <rng:ref name="expression"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="import"/>
   </rng:start>
   <rng:define name="import">
      <rng:element name="import">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:attribute name="href">
            <rng:data type="anyURI"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="import-schema"/>
   </rng:start>
   <rng:define name="import-schema">
      <rng:element name="import-schema">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:optional>
            <rng:data type="schema"/>
         </rng:optional>
        
        <rng:optional>
            <rng:attribute name="namespace">
               <rng:data type="anyURI"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="schema-location">
               <rng:data type="anyURI"/>
            </rng:attribute>
         </rng:optional>                  
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="include"/>
   </rng:start>
   <rng:define name="include">
      <rng:element name="include">
    
      
        <rng:ref name="element-only-versioned-element-type"/>
          <rng:attribute name="href">
            <rng:data type="anyURI"/>
         </rng:attribute>
        
      
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="key"/>
   </rng:start>
   <rng:define name="key">
      <rng:element name="key">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:attribute name="match">
            <rng:ref name="pattern"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="use">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="collation">
               <rng:data type="anyURI"/>
            </rng:attribute>
         </rng:optional>               
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="matching-substring"/>
   </rng:start>
   <rng:define name="matching-substring">
      <rng:element name="matching-substring">
         <rng:ref name="sequence-constructor"/>
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="message"/>
   </rng:start>
   <rng:define name="message">
      <rng:element name="message">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="terminate" a:defaultValue="no">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="namespace"/>
   </rng:start>
   <rng:define name="namespace">
      <rng:element name="namespace">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="avt"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="namespace-alias"/>
   </rng:start>
   <rng:define name="namespace-alias">
      <rng:element name="namespace-alias">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:attribute name="stylesheet-prefix">
            <rng:ref name="prefix-or-default"/>
         </rng:attribute>
        <rng:attribute name="result-prefix">
            <rng:ref name="prefix-or-default"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="next-match"/>
   </rng:start>
   <rng:define name="next-match">
      <rng:element name="next-match">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:zeroOrMore>
            <rng:choice>
               <rng:ref name="with-param"/>
               <rng:ref name="fallback"/>
            </rng:choice>
         </rng:zeroOrMore>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="non-matching-substring"/>
   </rng:start>
   <rng:define name="non-matching-substring">
      <rng:element name="non-matching-substring">
         <rng:ref name="sequence-constructor"/>
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="number"/>
   </rng:start>
   <rng:define name="number">
      <rng:element name="number">
  
    
         <rng:ref name="versioned-element-type"/>
        <rng:optional>
            <rng:attribute name="value">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="level" a:defaultValue="single">
               <rng:ref name="level"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="count">
               <rng:ref name="pattern"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="from">
               <rng:ref name="pattern"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="format" a:defaultValue="1">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="lang">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="letter-value">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="ordinal">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>        
        <rng:optional>
            <rng:attribute name="grouping-separator">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="grouping-size">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="otherwise"/>
   </rng:start>
   <rng:define name="otherwise">
      <rng:element name="otherwise">
         <rng:ref name="sequence-constructor"/>
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="output"/>
   </rng:start>
   <rng:define name="output">
      <rng:element name="output">
  
    
         <rng:ref name="generic-element-type"/>
        <rng:optional>
            <rng:attribute name="name">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="method">
               <rng:ref name="method"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="byte-order-mark">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="cdata-section-elements">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="doctype-public">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="doctype-system">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="encoding">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="escape-uri-attributes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="include-content-type">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="indent">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="media-type">
               <rng:data type="string"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="normalization-form">
               <rng:data type="NMTOKEN"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="omit-xml-declaration">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="standalone">
               <rng:ref name="yes-or-no-or-omit"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="undeclare-prefixes">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="use-character-maps">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="version">
               <rng:data type="NMTOKEN"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="output-character"/>
   </rng:start>
   <rng:define name="output-character">
      <rng:element name="output-character">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:attribute name="character">
            <rng:ref name="char"/>
         </rng:attribute>
        <rng:attribute name="string">
            <rng:data type="string"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="param"/>
   </rng:start>
   <rng:define name="param">
      <rng:element name="param">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="as">
               <rng:ref name="sequence-type"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="required">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="tunnel">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>        
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="perform-sort"/>
   </rng:start>
   <rng:define name="perform-sort">
      <rng:element name="perform-sort">
  
    
         <rng:ref name="versioned-element-type"/>
        
          <rng:oneOrMore>
            <rng:ref name="sort"/>
         </rng:oneOrMore>
          <rng:zeroOrMore>
            <rng:ref name="sequence-constructor-group"/>
         </rng:zeroOrMore>
        
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="preserve-space"/>
   </rng:start>
   <rng:define name="preserve-space">
      <rng:element name="preserve-space">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:attribute name="elements">
            <rng:ref name="nametests"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="processing-instruction"/>
   </rng:start>
   <rng:define name="processing-instruction">
      <rng:element name="processing-instruction">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="avt"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="result-document"/>
   </rng:start>
   <rng:define name="result-document">
      <rng:element name="result-document">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="format">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="href">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="type">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="validation">
               <rng:ref name="validation-type"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="method">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="byte-order-mark">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="cdata-section-elements">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="doctype-public">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="doctype-system">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="encoding">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="escape-uri-attributes">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="include-content-type">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="indent">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="media-type">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="normalization-form">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="omit-xml-declaration">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="standalone">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="undeclare-prefixes">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="use-character-maps">
               <rng:ref name="QNames"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="output-version">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="sequence"/>
   </rng:start>
   <rng:define name="sequence">
      <rng:element name="sequence">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        
          <rng:ref name="fallback"/>
        
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="sort"/>
   </rng:start>
   <rng:define name="sort">
      <rng:element name="sort">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>  
        <rng:optional>
            <rng:attribute name="lang">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>        
        <rng:optional>
            <rng:attribute name="data-type" a:defaultValue="text">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>        
        <rng:optional>
            <rng:attribute name="order" a:defaultValue="ascending">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>        
        <rng:optional>
            <rng:attribute name="case-order">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="collation">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="stable">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="strip-space"/>
   </rng:start>
   <rng:define name="strip-space">
      <rng:element name="strip-space">
  
    
         <rng:ref name="element-only-versioned-element-type"/>
        <rng:attribute name="elements">
            <rng:ref name="nametests"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="stylesheet"/>
   </rng:start>
   <rng:define name="stylesheet">
      <rng:element name="stylesheet"/>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="template"/>
   </rng:start>
   <rng:define name="template">
      <rng:element name="template">
  
    
         <rng:ref name="versioned-element-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="param"/>
         </rng:zeroOrMore>
          <rng:zeroOrMore>
            <rng:ref name="sequence-constructor-group"/>
         </rng:zeroOrMore>
        
        <rng:optional>
            <rng:attribute name="match">
               <rng:ref name="pattern"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="priority">
               <rng:data type="decimal"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="mode">
               <rng:ref name="modes"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="name">
               <rng:ref name="QName"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="as" a:defaultValue="item()*">
               <rng:ref name="sequence-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:define name="text-element-base-type">
  
    
      
        
      
      <rng:attribute>
         <rng:anyName/>
         <rng:text/>
      </rng:attribute>
    
  
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="text"/>
   </rng:start>
   <rng:define name="text">
      <rng:element name="text">
  
    
      
        <rng:attribute name="disable-output-escaping" a:defaultValue="no">
            <rng:ref name="yes-or-no"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:define name="transform-element-base-type">
  
      <rng:ref name="element-only-versioned-element-type"/>
      <rng:attribute name="version">
         <rng:data type="decimal"/>
      </rng:attribute>
      <rng:attribute>
         <rng:anyName/>
         <rng:text/>
      </rng:attribute>
    
  
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="transform"/>
   </rng:start>
   <rng:define name="transform">
      <rng:element name="transform">
  
    
         <rng:ref name="transform-element-base-type"/>
        
          <rng:zeroOrMore>
            <rng:ref name="import"/>
         </rng:zeroOrMore>
          <rng:zeroOrMore>
            <rng:choice>
               <rng:ref name="declaration"/>
               <rng:ref name="variable"/>
               <rng:ref name="param"/>              
               <rng:element>
                  <rng:anyName/>
                  <rng:text/>
               </rng:element> 
               <!-- weaker than XSLT 1.0 -->
          </rng:choice>
         </rng:zeroOrMore>
        
        <rng:optional>
            <rng:attribute name="id">
               <rng:data type="ID"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="default-validation" a:defaultValue="strip">
               <rng:ref name="validation-strip-or-preserve"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="input-type-annotations" a:defaultValue="unspecified">
               <rng:ref name="input-type-annotations-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="value-of"/>
   </rng:start>
   <rng:define name="value-of">
      <rng:element name="value-of">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="separator">
               <rng:ref name="avt"/>
            </rng:attribute>
         </rng:optional>            
        <rng:optional>
            <rng:attribute name="disable-output-escaping" a:defaultValue="no">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="variable"/>
   </rng:start>
   <rng:define name="variable">
      <rng:element name="variable">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="as">
               <rng:ref name="sequence-type"/>
            </rng:attribute>
         </rng:optional>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="when"/>
   </rng:start>
   <rng:define name="when">
      <rng:element name="when">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="test">
            <rng:ref name="expression"/>
         </rng:attribute>
      
    
  
      </rng:element>
   </rng:define>

   <rng:start combine="choice">
      <rng:ref name="with-param"/>
   </rng:start>
   <rng:define name="with-param">
      <rng:element name="with-param">
  
    
         <rng:ref name="sequence-constructor"/>
        <rng:attribute name="name">
            <rng:ref name="QName"/>
         </rng:attribute>
        <rng:optional>
            <rng:attribute name="select">
               <rng:ref name="expression"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="as">
               <rng:ref name="sequence-type"/>
            </rng:attribute>
         </rng:optional>
        <rng:optional>
            <rng:attribute name="tunnel">
               <rng:ref name="yes-or-no"/>
            </rng:attribute>
         </rng:optional>   
      
    
  
      </rng:element>
   </rng:define>

   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<a:documentation>
  
    PART C: definition of literal result elements
    
    There are three ways to define the literal result elements
    permissible in a stylesheet.
    
    (a) do nothing. This allows any element to be used as a literal
        result element, provided it is not in the XSLT namespace
    
    (b) declare all permitted literal result elements as members
        of the xsl:literal-result-element substitution group
        
    (c) redefine the model group xsl:result-elements to accommodate
        all permitted literal result elements.
        
    Literal result elements are allowed to take certain attributes
    in the XSLT namespace. These are defined in the attribute group
    literal-result-element-attributes, which can be included in the
    definition of any literal result element.
    
  
</a:documentation>   
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<rng:start combine="choice">
      <rng:ref name="literal-result-element"/>
   </rng:start>
   <rng:define name="literal-result-element">
      <rng:element name="literal-result-element">
         <rng:data type="string"/>
      </rng:element>
   </rng:define>

   <rng:define name="literal-result-element-attributes">
      <rng:optional>
         <rng:attribute name="default-collation">
            <rng:ref name="uri-list"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="extension-element-prefixes">
            <rng:ref name="prefixes"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="exclude-result-prefixes">
            <rng:ref name="prefixes"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="xpath-default-namespace">
            <rng:data type="anyURI"/>
         </rng:attribute>
      </rng:optional>    
      <rng:optional>
         <rng:attribute name="inherit-namespaces" a:defaultValue="yes">
            <rng:ref name="yes-or-no"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="use-attribute-sets" a:defaultValue="">
            <rng:ref name="QNames"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="use-when">
            <rng:ref name="expression"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="version">
            <rng:data type="decimal"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="type">
            <rng:ref name="QName"/>
         </rng:attribute>
      </rng:optional>
      <rng:optional>
         <rng:attribute name="validation">
            <rng:ref name="validation-type"/>
         </rng:attribute>
      </rng:optional>
   </rng:define>

   <rng:define name="result-elements">
      <rng:choice>
         <rng:ref name="literal-result-element"/>
         <rng:element>
            <rng:anyName/>
            <rng:text/>
         </rng:element>
         <rng:element>
            <rng:anyName/>
            <rng:text/>
         </rng:element>
      </rng:choice>
   </rng:define>


   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<a:documentation>
  
    PART D: definitions of simple types used in stylesheet attributes 
  
</a:documentation>   
   <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->

<rng:define name="avt">
      <a:documentation>
    
      This type is used for all attributes that allow an attribute value template.
      The general rules for the syntax of attribute value templates, and the specific
      rules for each such attribute, are described in the XSLT 2.0 Recommendation.
    
  </a:documentation>
      <rng:data type="string"/>
   </rng:define>

   <rng:define name="char">
      <a:documentation>
    
      A string containing exactly one character.
    
  </a:documentation>
      <rng:data type="string">
         <rng:param name="length">1</rng:param>
      </rng:data>
   </rng:define>

   <rng:define name="expression">
      <a:documentation>
    
      An XPath 2.0 expression.
    
  </a:documentation>
      <rng:data type="token">
         <rng:param name="pattern">.+</rng:param>
      </rng:data>
   </rng:define>

   <rng:define name="input-type-annotations-type">
      <a:documentation>
    
      Describes how type annotations in source documents are handled.
    
  </a:documentation>
      <rng:choice>
         <rng:value>preserve</rng:value>
         <rng:value>strip</rng:value>   
         <rng:value>unspecified</rng:value>        
      </rng:choice>
   </rng:define>

   <rng:define name="level">
      <a:documentation>
    
      The level attribute of xsl:number: 
      one of single, multiple, or any.
    
  </a:documentation>
      <rng:choice>
         <rng:value>single</rng:value>
         <rng:value>multiple</rng:value>
         <rng:value>any</rng:value>
      </rng:choice>
   </rng:define>

   <rng:define name="mode">
      <a:documentation>
    
      The mode attribute of xsl:apply-templates: 
      either a QName, or #current, or #default.
    
  </a:documentation>
      <rng:choice>
         <rng:ref name="QName"/>
    
         <rng:choice>
            <rng:value>#default</rng:value>
            <rng:value>#current</rng:value>
         </rng:choice>
    
      </rng:choice>
   </rng:define>

   <rng:define name="modes">
      <a:documentation>
    
      The mode attribute of xsl:template: 
      either a list, each member being either a QName or #default;
      or the value #all
    
  </a:documentation>
      <rng:choice>
    
         <rng:list>
        
            <rng:choice>
               <rng:ref name="QName"/>
            
              <rng:choice>
                  <rng:value>#default</rng:value>
              </rng:choice>
            
            </rng:choice>
        
         </rng:list>
    
    
         <rng:choice>
            <rng:value>#all</rng:value>
         </rng:choice>
    
      </rng:choice>
   </rng:define>

   <rng:define name="nametests">
      <a:documentation>
    
      A list of NameTests, as defined in the XPath 2.0 Recommendation.
      Each NameTest is either a QName, or "*", or "prefix:*", or "*:localname"
    
  </a:documentation>
      <rng:list>
    
         <rng:choice>
            <rng:ref name="QName"/>
        
            <rng:choice>
               <rng:value>*</rng:value>
            </rng:choice>
        
        
            <rng:data type="token">
               <rng:param name="pattern">\i\c*:\*</rng:param>
               <rng:param name="pattern">\*:\i\c*</rng:param>            
            </rng:data>
        
         </rng:choice>
    
      </rng:list>
   </rng:define>

   <rng:define name="prefixes">
      <rng:list>
         <rng:data type="NCName"/>
      </rng:list>
   </rng:define>

   <rng:define name="prefix-list-or-all">
      <rng:choice>
         <rng:ref name="prefix-list"/>
    
         <rng:choice>
            <rng:value>#all</rng:value>
         </rng:choice>
    
      </rng:choice>
   </rng:define>
      
   <rng:define name="prefix-list">
      <rng:list>
         <rng:ref name="prefix-or-default"/>
      </rng:list>
   </rng:define>

   <rng:define name="method">
      <a:documentation>
    
      The method attribute of xsl:output:
      Either one of the recognized names "xml", "xhtml", "html", "text",
      or a QName that must include a prefix.
    
  </a:documentation>
      <rng:choice>
    
         <rng:choice>
            <rng:value>xml</rng:value>
            <rng:value>xhtml</rng:value>
            <rng:value>html</rng:value>
            <rng:value>text</rng:value>
         </rng:choice>
    
    
         <rng:ref name="QName"/>
        <rng:param name="pattern">\c*:\c*</rng:param>
      
    
      </rng:choice>
   </rng:define>

   <rng:define name="pattern">
      <a:documentation>
    
      A match pattern as defined in the XSLT 2.0 Recommendation.
      The syntax for patterns is a restricted form of the syntax for
      XPath 2.0 expressions.
    
  </a:documentation>
      <rng:ref name="expression"/>
   </rng:define>

   <rng:define name="prefix-or-default">
      <a:documentation>
    
      Either a namespace prefix, or #default.
      Used in the xsl:namespace-alias element.
    
  </a:documentation>
      <rng:choice>
         <rng:data type="NCName"/>
    
         <rng:choice>
            <rng:value>#default</rng:value>
         </rng:choice>
    
      </rng:choice>
   </rng:define>

   <rng:define name="QNames">
      <a:documentation>
    
      A list of QNames.
      Used in the [xsl:]use-attribute-sets attribute of various elements,
      and in the cdata-section-elements attribute of xsl:output
    
  </a:documentation>
      <rng:list>
         <rng:ref name="QName"/>
      </rng:list>          
   </rng:define>

   <rng:define name="QName">
      <a:documentation>
    
      A QName.
      This schema does not use the built-in type xs:QName, but rather defines its own
      QName type. Although xs:QName would define the correct validation on these attributes,
      a schema processor would expand unprefixed QNames incorrectly when constructing the PSVI,
      because (as defined in XML Schema errata) an unprefixed xs:QName is assumed to be in
      the default namespace, which is not the correct assumption for XSLT.
      The data type is defined as a restriction of the built-in type Name, restricted
      so that it can only contain one colon which must not be the first or last character.
    
  </a:documentation>
      <rng:data type="Name">
         <rng:param name="pattern">([^:]+:)?[^:]+</rng:param>      
      </rng:data>        
   </rng:define>

   <rng:define name="sequence-type">
      <a:documentation>
    
      The description of a data type, conforming to the
      SequenceType production defined in the XPath 2.0 Recommendation
    
  </a:documentation>
      <rng:data type="token">
         <rng:param name="pattern">.+</rng:param>      
      </rng:data>
   </rng:define>

   <rng:define name="uri-list">
      <rng:list>
         <rng:data type="anyURI"/>
      </rng:list>
   </rng:define>

   <rng:define name="validation-strip-or-preserve">
      <a:documentation>
    
      Describes different ways of type-annotating an element or attribute.
    
  </a:documentation>
      <rng:choice>
         <rng:value>preserve</rng:value>
         <rng:value>strip</rng:value>    
      </rng:choice>
   </rng:define>

   <rng:define name="validation-type">
      <a:documentation>
    
      Describes different ways of type-annotating an element or attribute.
    
  </a:documentation>
      <rng:choice>
         <rng:value>strict</rng:value>
         <rng:value>lax</rng:value>
         <rng:value>preserve</rng:value>
         <rng:value>strip</rng:value>    
      </rng:choice>
   </rng:define>

   <rng:define name="yes-or-no">
      <a:documentation>
    
      One of the values "yes" or "no".
    
  </a:documentation>
      <rng:choice>
         <rng:value>yes</rng:value>
         <rng:value>no</rng:value>
      </rng:choice>
   </rng:define>

   <rng:define name="yes-or-no-or-omit">
      <a:documentation>
    
      One of the values "yes" or "no" or "omit".
    
  </a:documentation>
      <rng:choice>
         <rng:value>yes</rng:value>
         <rng:value>no</rng:value>
         <rng:value>omit</rng:value>
      </rng:choice>
   </rng:define>

</rng:grammar>