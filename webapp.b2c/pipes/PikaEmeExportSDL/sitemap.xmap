<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer" />
      <map:transformer name="tee" logger="sitemap.transformer.tee" src="com.philips.cocoon.transformation.TeeTransformer"/>
    </map:transformers>
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction" />
    </map:actions>
    <map:readers default="resource">
      <map:reader name="exec" src="org.apache.cocoon.reading.ShellScriptExecute"/>
    </map:readers>
  </map:components>

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    <!--- -->
    <map:component-configurations>
      <global-variables>
        <ldir>PikaEmeExportSDL/</ldir>
        <channel>PikaEmeExportSDL</channel>
      </global-variables>
    </map:component-configurations>
    
    <map:pipeline name="{global:channel}" type="noncaching">
      <map:match pattern="runPipeline">
        <!-- This is the starting point of the pipeline. A lock is requested to prevent this pipeline from running multiple 
          times in parallel. When a lock cannot be acquired, an error message is shown. If a lock can be acquired, run exportMain -->
        <map:act type="synced-copy-source" src="cocoon:/exportStart">
          <map:parameter name="lockName" value="{global:channel}" />
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportMain.xml" />
          <map:generate src="{global:gdir}{global:ldir}temp/ReportMain.xml" />
          <map:serialize type="xml" />
        </map:act>
        <map:generate src="../common/xml/locked.xml" />
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="exportStart">
        <!-- Set Start Time.of this channel -->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetStartTime.xml" />
        </map:act>
        <!-- Call the Main Import. -->
        <map:act type="copy-source" src="cocoon:/exportMain">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportMain.xml" />
        </map:act>
        <!-- Set End Time of this channel -->
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportSetEndTime.xml" />
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportGetTimings.xml" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="runsql_*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="../common/xsl/{global:db}sql_{1}.xsl">
          <map:parameter name="channel" value="{global:channel}" />
           <map:parameter name="run_id" value="{request-param:runId}"/>
           <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <!-- Run db queries -->
        <map:call resource="sql"/>
        <map:serialize type="xml" />
      </map:match>
      
      <map:match pattern="exportMain">
        <map:act type="copy-source" src="cocoon:/deleteFiles/temp">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteTempFiles.xml" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/deleteFiles/outbox">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteOutbox.xml" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/deleteFiles/archive">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportDeleteOutbox.xml" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exportData">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportData.xml" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exec/createZip.sh">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportArchiveFiles.txt" />
        </map:act>
        <map:generate src="{global:gdir}{global:ldir}temp/ReportExportData.xml" />
        <map:serialize type="xml" />
      </map:match>
      
      <!--
        Export the data
      -->
      <map:match pattern="exportData">
        <map:act type="copy-source" src="cocoon:/exportTable/PMS_PRODUCTS">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PMS_PRODUCTS.table" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exportTable/PMS_ALERTS">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PMS_ALERTS.table" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exportTable/PMS_CATEGORIES">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/PMS_CATEGORIES.table" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exportOCTLData/PMS/none">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}temp/ReportExportOCTLData.xml" />
        </map:act>
        <map:generate src="../common/xml/empty.xml" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        {1} table name
      -->
      <map:match pattern="exportTable/*">
        <map:generate src="../common/xml/empty.xml" />
        <!--
        <map:transform type="xslt-saxon" src="xsl/sql_getTableInfo.xsl">
          <map:parameter name="table" value="{1}"/>
        </map:transform>
        <map:call resource="sql"/>
        -->
        <map:transform type="xslt-saxon" src="xsl/sql_selectRecords.xsl">
          <map:parameter name="table" value="{1}"/>
          <map:parameter name="where-clause" value="{request-param:where}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/convertRecordsToTextFile.xsl">
          <map:parameter name="column-separator" value="~"/>
        </map:transform>
        <map:serialize type="text" />
      </map:match>
            
      <!--
        Export OCTL records for a content type and locale.
        XML data is stored in outbox/ClobFilestore.
        
        {1} content type
        {2} locale
      -->
      <map:match pattern="exportOCTLData/*/*">
        <map:act type="copy-source" src="cocoon:/exportOCTLTableData/PMS/none">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/OCTL.table" />
        </map:act>
        <map:act type="copy-source" src="cocoon:/exportOCTLFilestore">
          <map:parameter name="dest" value="{global:gdir}{global:ldir}outbox/OCTL_filestore.list" />
        </map:act>
        <map:generate src="../common/xml/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--
        Export OCTL records for a content type and locale.
      -->
      <map:match pattern="exportOCTLTableData/*/*">
        <map:generate src="../common/xml/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_selectOCTLRecords.xsl">
          <map:parameter name="content-type" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- Save the results in a file for reprocessing -->
        <map:transform type="tee">
          <map:parameter name="file" value="file:{cmc2:gdir}/{global:ldir}temp/octlrecords.xml"/>
        </map:transform>
        <!--
        <map:transform type="xslt-saxon" src="xsl/copyFilestoreFiles.xsl">
          <map:parameter name="filestore-path" value="{cmc2:clobFilestoreDir}" />
          <map:parameter name="target-path" value="{global:gdir}{global:ldir}outbox/filestore" />
        </map:transform>
        <map:transform type="shell"/>
        -->
        <map:transform type="xslt-saxon" src="xsl/fixDataColumn.xsl"/>
        <map:transform type="xslt-saxon" src="xsl/convertRecordsToTextFile.xsl">
          <map:parameter name="column-separator" value="~"/>
        </map:transform>
        <map:serialize type="text" />
      </map:match>
      
      <!--
        Reprocess the OCTL records to create a list of files from the file store
      -->
      <map:match pattern="exportOCTLFilestore">
        <map:generate src="{global:gdir}{global:ldir}temp/octlrecords.xml"/>
        <map:transform src="xsl/extractFilestorePaths.xsl"/>
        <map:serialize type="text"/>
      </map:match>
      
      <map:match pattern="deleteFiles/*">
        <!-- Delete all files in a directory -->
        <map:generate type="directory" src="{global:gdir}{global:ldir}{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm" />
          <map:parameter name="depth" value="1" />
          <map:parameter name="include" value=".*" />
        </map:generate>
        <map:transform src="../common/xsl/dir2shell_deletetree.xsl">
          <map:parameter name="dir" value="{global:gdir}{global:ldir}{1}" />
        </map:transform>
        <map:transform type="shell" />
        <map:serialize type="xml" />
      </map:match>
      
      <!--
        Execute a shell script.
        {1} shell script path relative to channel source dir
      -->
      <map:match pattern="exec/**">
        <map:select type="resource-exists">
          <map:when test="{1}">
            <map:read type="exec" src="{1}"/>
          </map:when>
          <map:otherwise>
            <map:read src="../common/txt/scriptDoesNotExist.txt"/>
          </map:otherwise>
        </map:select>
      </map:match>
    </map:pipeline>
  </map:pipelines>
  
</map:sitemap>
