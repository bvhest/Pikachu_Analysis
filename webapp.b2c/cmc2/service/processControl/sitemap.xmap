<?xml version="1.0"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:components>
    <map:transformers default="xslt">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
    </map:transformers>    
    <map:actions>
      <map:action name="synced-copy-source" src="org.apache.cocoon.acting.SyncedCopySourceAction"/>
    </map:actions>    
    <map:selectors>
      <map:selector name="parameter" logger="sitemap.selector.parameter" src="org.apache.cocoon.selection.ParameterSelector"/>
    </map:selectors>        
  </map:components>

  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
<!-- GLOBAL variables
    {cmc2:gdir}      This is the top level of the data directory struture. Each ct has its own "archive","inbox","outbox","temp" and "log" sub-directories  
    {cmc2:xmlDir}    This is the directory containing common xml documents
    {cmc2:xslDir}    this directory contains "common" and "ct" specific xslt transform documents
   -->
  
  <map:pipelines>
    <map:pipeline type="noncaching">
    
      <!-- Main entry point. Performs lock to stop concurrent execution then runs
              Input parameters: {1} = ct 
              Output Document: Timings report or locked document
         -->
      <map:match pattern="start/*">
        <map:act type="copy-source" src="cocoon:/runStart/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/lock.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{1}/temp/lock.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--  Manages the control aspects of running a batch content type process. 
            Deletes the temp records and exeutes the Main pipeline setting start and end times.
              Input parameters: {1} = ct 
              Output Document: Timings report
         -->
      <map:match pattern="runStart/*">
        <!-- Delete all files in the temp directory. Write the results of this action to a report.-->
        <map:act type="copy-source" src="cocoon:/deleteTempFiles/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/DeleteTmpFilesReport.xml"/>
        </map:act>
        <!-- Set Start Time.of this channel-->
        <map:act type="copy-source" src="cocoon:/runsql_setstarttime">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/ReportSetStartTime.xml"/>
        </map:act>
        <map:generate src="cocoon:/runsql_gettimings"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--  Setup the action for setting process end time and generates the process Timing-report.
              Input parameters: {1} = ct 
              Output Document: Timings report
         -->
      <map:match pattern="end/*">
        <map:act type="copy-source" src="cocoon:/runsql_setendtime">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/ReportSetEndTime.xml"/>
        </map:act>
        <!-- Show result -->
        <map:act type="copy-source" src="cocoon:/runsql_gettimings">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/ReportGetTimings.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{1}/temp/ReportGetTimings.xml"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- This is a utility pipeline used to execute sql_ transforms 
        Input parameters: 
           {1} = xslt transform name  
        Output Document: 
           Result of SQL execution
         -->
      <map:match pattern="runsql_*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_{1}.xsl">
          <map:parameter name="schedule_id" value="{request-param:schedule_id}"/>          
          <map:parameter name="run_id" value="{request-param:runId}"/>
          <map:parameter name="run_mode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>        
        <map:serialize type="xml"/>
      </map:match>    
      
      <!-- Delete all files in temp directory
        Input parameters: {1} = ct 
        Output Document: Result of shell execution command
      -->
      <map:match pattern="deleteTempFiles/*">
        <!-- Retrieve all files in temp directory -->
        <map:generate type="directory" src="{cmc2:gdir}/{1}/temp">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="6"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete all files -->
        <map:transform src="xsl/dir2shell_deletetree.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/temp"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Archive all files in directory.
          |
          | Input parameters:
          | 1) dir
          | 2) ct 
          | Output Document: Result of shell execution command 
          +-->
      <map:match pattern="archiveFiles/*/*">
         <map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
            <map:when test="">
               <map:generate type="directory" src="{cmc2:gdir}/{2}/{1}">
                  <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value=".*"/>
               </map:generate>
             </map:when>
            <map:otherwise>
               <map:generate type="directory" src="{cmc2:gdir}/{2}/{1}">
                  <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="{request-param:fileFilter}"/>
               </map:generate>
            </map:otherwise>
         </map:select>
         <!-- Move files to archive -->
         <map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="{1}"/>
            <map:when test="inbox">
               <map:transform src="xsl/dir2shell_move.xsl">
                  <map:parameter name="sourceDir" value="{cmc2:gdir}/{2}/{1}"/>
                  <map:parameter name="targetDir" value="{cmc2:gdir}/{2}/processed"/>
               </map:transform>
            </map:when>
            <map:otherwise>
               <map:transform src="xsl/dir2shell_move.xsl">
                  <map:parameter name="sourceDir" value="{cmc2:gdir}/{2}/{1}"/>
                  <map:parameter name="targetDir" value="{cmc2:gdir}/{2}/archive"/>
               </map:transform>
            </map:otherwise>          
         </map:select>          
         <map:transform type="shell"/>
         <map:serialize type="xml"/>
      </map:match>
	
	<map:match pattern="runProcess/*">
		<map:generate type="jx" src="jx/runProcess.jx">
		  <map:parameter name="ct" value="{1}"/>
		</map:generate>
		<map:call resource="sql"/>
		<map:transform src="xsl/include_runProcess.xsl"/>
		<map:transform type="cinclude"/>	
		<map:serialize type="xml"/>
	</map:match>
  
  
  	<map:match pattern="objCatTrigger/*/*/*">
    <!-- {1} ct {2} ts {3} catalogType -->
      <map:generate src="{cmc2:xmlDir}/empty.xml"/>
      <map:transform src="xsl/objCatTrigger.xsl">
        <map:parameter name="ct" value="{1}"/>
        <map:parameter name="ts" value="{1}"/>
        <map:parameter name="catlogType" value="{1}"/>
      </map:transform>
      <map:call resource="sql"/>	
      <map:serialize type="xml"/>
	</map:match>
	
	
	<!-- Stores VolumIn into PCU_PROCESS_LOGGING -->
	<map:match pattern="sql_storeFileCount/*/*">        
	    <map:generate src="{cmc2:xmlDir}/empty.xml"/>
		<map:transform type="xslt-saxon" src="xsl/sql_storeFileCount.xsl">      
			<map:parameter name="content_type" value="{1}"/>
		    <map:parameter name="file_count" value="{2}"/>
		    <map:parameter name="run_id" value="{request-param:runId}"/>
		    <map:parameter name="schedule_id" value="{request-param:schedule_id}"/>						
		</map:transform>		
		<map:call resource="sql"/>
		<map:serialize type="xml"/>
	</map:match>
	<!-- -->
	
	
    </map:pipeline>
  </map:pipelines>
  <!-- -->
  <map:views>
    <map:view name="step1" from-label="step1">
      <map:serialize type="xml"/>
    </map:view>
    <map:view name="step2" from-label="step2">
      <map:serialize type="xml"/>
    </map:view>
    <map:view name="step3" from-label="step3">
      <map:serialize type="xml"/>
    </map:view>
    <map:view name="step4" from-label="step4">
      <map:serialize type="xml"/>
    </map:view>
    <map:view name="step5" from-label="step5">
      <map:serialize type="xml"/>
    </map:view>
    <map:view name="step5" from-label="step6">
      <map:serialize type="xml"/>
    </map:view>

  </map:views>
  <!-- -->
</map:sitemap>
