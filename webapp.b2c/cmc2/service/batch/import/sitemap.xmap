<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    <map:pipeline type="noncaching">
      <!--+
          | {1} = content_type
          | {2} = timestamp
          | 
          | Request params:
          |   filestem: Process only files whose name starts with this value.
          |   fileFilter: Regex to determine which files to include. If present the filestem parameter will ignored.
          |   batchPrefix: Prefix to use for created batch file names.
          |   sourcedir: Source directory other than content type's inbox. 
          +-->
      <map:match pattern="createBatches/*/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:sourcedir}"/>
          <map:when test="">
            <!-- Retrieve product files from inbox -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
              <map:when test="">
                <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="^{request-param:filestem}.*\.xml"/>
                  <map:parameter name="sort" value="lastmodified"/>
                  <map:parameter name="reverse" value="false"/>
                </map:generate>
              </map:when>
              <map:otherwise>
                <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="{request-param:fileFilter}"/>
                  <map:parameter name="sort" value="lastmodified"/>
                  <map:parameter name="reverse" value="false"/>
                </map:generate>
              </map:otherwise>
            </map:select>
          </map:when>
          <map:otherwise>
            <!-- Retrieve product files from specified source dir -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
              <map:when test="">
                <map:generate type="directory" src="{request-param:sourcedir}">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="^{request-param:filestem}.*\.xml"/>
                  <map:parameter name="sort" value="lastmodified"/>
                  <map:parameter name="reverse" value="false"/>
                </map:generate>
              </map:when>
              <map:otherwise>
                <map:generate type="directory" src="{request-param:sourcedir}">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="{request-param:fileFilter}"/>
                  <map:parameter name="sort" value="lastmodified"/>
                  <map:parameter name="reverse" value="false"/>
                </map:generate>
              </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        <!-- split the directory in batches -->
        <map:transform type="xslt-saxon" src="xsl/write_dir2batch.xsl">
          <map:parameter name="batchsize" value="500"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/temp/"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="prefix" value="{request-param:batchPrefix}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} = content_type
          | {2} = timestamp
          |
          | Request params:
          |   fileFilter: regex that determines which files are processed
          +-->
         <!-- localhost:8888/cmc2/service/batch/import/processBatches/PMT_Refs/20120514090000?reload=false&storeURL=cocoon://cmc2/service/store/saveEntryFile?createPlaceholder=y
           -->
      <map:match pattern="processBatches/*/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
          <map:when test="">
            <map:generate type="directory" src="{cmc2:gdir}/{1}/temp">
              <map:parameter name="depth" value="1"/>
              <map:parameter name="include" value="^batch_.*\.xml"/>
            </map:generate>
          </map:when>
          <map:otherwise>
            <map:generate type="directory" src="{cmc2:gdir}/{1}/temp">
              <map:parameter name="depth" value="1"/>
              <map:parameter name="include" value="{request-param:fileFilter}"/>
            </map:generate>
          </map:otherwise> 
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/include_dir2createEntryRecords.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="timestamp" value="{2}"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <!-- process the entry record -->
        <map:transform type="xslt-saxon" src="xsl/process_ctlEntryRecords.xsl">
          <map:parameter name="ct" value="{1}"/>          
          <map:parameter name="storeURL" value="{request-param:storeURL}"/>
        </map:transform>
        <map:transform type="cinclude"/>                   
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+ Call to {CT}/process matcher:
          | 
          | {1} = ct
          | {2} = timestamp
          | {3} = filename 
          | {4} = batchnumber
          | {5} = file extension
          +-->
          <!-- TEST: cmc2/service/batch/import/createEntryRecords/PMT_Refs/20120514090000/batch_20120514090000.1.xml?reload=false
             -->
      <map:match pattern="createEntryRecords/*/*/*.*.*">
        <map:generate src="{cmc2:gdir}/{1}/temp/{3}.{4}.{5}"/>
        <map:transform src="xsl/include_file2process.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="batchnumber" value="{4}"/>
          <map:parameter name="ctURL" value="{cmc2:ctURL}/{1}"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:transform type="include"/>
        <!-- conditions for a valid result:
           |  1: input has status=valid
           |  2: (placeholder) record available (to be able to check on timestamps)
           |  3: timestamps newer than that of available record.
           |-->
        <map:transform type="xslt-saxon" src="xsl/validate.xsl">
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{1}"/>
          <map:parameter name="prefix" value="{3}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processFiles/*/*">
        <!--Parameters:   {1} = content_type  {2} timestamp-->
         <map:select type="parameter">
            <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
            <map:when test="">
               <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value=".*\.xml"/>
               </map:generate>
             </map:when>
            <map:otherwise>
               <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
                  <map:parameter name="depth" value="1"/>
                  <map:parameter name="include" value="{request-param:fileFilter}"/>
               </map:generate>
            </map:otherwise>
         </map:select>
        <map:transform type="xslt-saxon" src="xsl/include_dir2createFileEntryRecords.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="timestamp" value="{2}"/>
          <map:parameter name="latest" value="no"/>
          <map:parameter name="includefilepattern" value="{request-param:includefilepattern}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <!-- process the entry record -->
        <map:transform type="xslt-saxon" src="xsl/process_ctlEntryRecords.xsl">
          <map:parameter name="ct" value="{1}"/>          
          <map:parameter name="storeURL" value="{request-param:storeURL}"/>
        </map:transform>             
        <map:transform type="cinclude"/>           
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processLatestFiles/*/*">
        <!-- Group files by ct l and o and discard all but latest -->
        <map:generate type="xpathdirectory" src="{cmc2:gdir}/{1}/inbox">
          <map:parameter name="xpath" value="/node()[@ct='{1}']"/>
          <map:parameter name="xmlFiles" value=".*\.xml"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>        
        
        <map:transform type="xslt-saxon" src="xsl/selectLatestFiles.xsl" label="step3">
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/temp/"/>
          <map:parameter name="prefix" value="{1}_file_selection"/>
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="usebasicsort" value="{request-param:usebasicsort}"/>
        </map:transform>        
        <!-- write to disk -->
        <map:transform type="write-source"/>
        <!-- read and transform -->
        <map:transform type="xslt-saxon" src="xsl/include_dir2createFileEntryRecords.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="timestamp" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/temp/"/>
          <map:parameter name="latest" value="yes"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="createFileEntryRecords/*/*/**.*">
        <!--Parameters:  {{1}=ct    {2} timestamp {3} filename  {5} fileextension-->
        <map:generate src="{cmc2:gdir}/{1}/inbox/{3}.{4}"/>    
        <map:transform type="xslt-saxon" src="{cmc2:ctURL}/get_ct_file/{1}/xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="l" value="na"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/outbox"/>
          <map:parameter name="batchnumber" value="{3}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/validate.xsl"/>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{1}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | {1} = content type
          | {2} = timestamp
          +-->
      <map:match pattern="splitFiles/*/*">
        <map:act type="copy-source" src="cocoon:/splitFilesSub/{1}/{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{1}/temp/splitFilesSub{request-param:filestem}_report.xml"/>
        </map:act>      
        <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="^{request-param:filestem}.*\.xml"/>
          <map:parameter name="exclude" value=".*batch_.*\.xml"/>
        </map:generate>        
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:target-ct}"/>
          <map:when test="">
            <!-- Move the original inbox files to the processed directory if no target-ct is specified-->        
            <map:transform type="xslt-saxon" src="xsl/splitRemovalFilter.xsl">
              <map:parameter name="filename" value="{request-param:filename}"/>
            </map:transform>
            <map:transform src="../../processControl/xsl/dir2shell_move.xsl">
              <map:parameter name="sourceDir" value="{cmc2:gdir}/{1}/inbox"/>
              <map:parameter name="targetDir" value="{cmc2:gdir}/{1}/processed"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:when>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="splitFilesSub/*/*">
        <!--Parameters:   {1} = content_type  {2} timestamp-->
        <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>        
        <map:transform type="xslt-saxon" src="xsl/include_dir2splitFiles.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="target-ct" value="{request-param:target-ct}"/>
          <map:parameter name="timestamp" value="{2}"/>
          <map:parameter name="filename" value="{request-param:filename}"/>
          <map:parameter name="filestem" value="{request-param:filestem}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="splitFiles/*/*/**.*">
        <!--Parameters:  {{1}=ct    {2} timestamp {3} filename  {5} fileextension-->
        <map:generate src="{cmc2:gdir}/{1}/inbox/{3}.{4}"/>        
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:usestx}"/>
          <map:when test="yes">
            <map:transform type="stx" src="{cmc2:ctDir}/{1}/xsl/splitFiles{request-param:target-ct}.stx">
              <map:parameter name="dir" value="{cmc2:gdir}/{1}/outbox/"/>
              <map:parameter name="filestem" value="{3}"/>
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform type="xslt-saxon" src="{cmc2:ctURL}/get_ct_file/{1}/xsl/splitFiles{request-param:target-ct}.xsl">
              <map:parameter name="ct" value="{1}"/>
              <map:parameter name="target-ct" value="{request-param:target-ct}"/>
              <map:parameter name="l" value="na"/>
              <map:parameter name="ts" value="{2}"/>
              <map:parameter name="dir" value="{cmc2:gdir}/{1}/outbox"/>
              <map:parameter name="filestem" value="{3}"/>
              <map:parameter name="batchsize" value="{request-param:batchsize}"/>
            </map:transform>
          </map:otherwise>
        </map:select>
        <map:transform type="write-source"/>
        <!--
          Move the fragments to the inbox.
          If target-ct is not specified, move them to the source content type's inbox.
          Otherwise move them to the target content type's inbox
        -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:target-ct}"/>
          <map:when test="">
            <map:transform src="{cmc2:xslDir}/common/shell_moveWriteSourceFile.xsl">
              <map:parameter name="targetDir" value="{cmc2:gdir}/{1}/inbox"/>
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:transform src="{cmc2:xslDir}/common/shell_moveWriteSourceFile.xsl">
              <map:parameter name="targetDir" value="{cmc2:gdir}/{request-param:target-ct}/inbox"/>
            </map:transform>
          </map:otherwise>
        </map:select>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
