<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:views>
    <map:view name="content" from-label="content">
      <map:serialize type="xml" />
    </map:view>

    <map:view name="html" from-label="xml">
      <map:transform src="xsl/rowset2html.xsl" />
      <map:serialize type="html" />
    </map:view>
  </map:views>

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC" />
        <map:parameter name="clob-encoding" value="UTF-8" />
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    <map:pipeline type="noncaching">
      <map:match pattern="**resources/**">
        <map:read src="resources/{2}" />
      </map:match>

      <!--
        | Return XML content + database data in octl wrapper.
        | {1} content type 
        | {2} localisation 
        | {3} object id
      -->
      <map:match pattern="get/*/*/**">
        <map:generate type="jx" src="jx/sql-get.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
          <map:parameter name="runmode" value="{request-param:runmode}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="get-octl/*/*/**">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql-get-octl.xsl">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
          <map:parameter name="runmode" value="{request-param:runmode}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        | Return XML content + database data in octl wrapper for multiple object IDs 
        | passed in request parameter 'id' as comma separated list. 
        | {1} content type 
        | {2} localisation
      -->
      <map:match pattern="get/*/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql-get.xsl">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="id-list" value="{request-param:id}" />
          <map:parameter name="max-results" value="{request-param:max}" />
        </map:transform>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        | Return XML content only 
        | {1} content type 
        | {2} localisation 
        | {3} object id
      -->
      <map:match pattern="getcontent/*/*/**">
        <map:generate src="cocoon:/get/{1}/{2}/{3}" />
        <map:transform src="xsl/getContent.xsl" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        | Return XML content for multiple object IDs 
        | passed in request parameter 'id' as comma separated list. 
        | {1} content type 
        | {2} localisation
      -->
      <map:match pattern="getcontent/*/*">
        <map:generate src="cocoon:/get/{1}/{2}" />
        <map:transform src="xsl/getContent.xsl" />
        <map:serialize type="xml" />
      </map:match>

      <!-- Return XML content only, tweaked for SPOT-->
      <map:match pattern="getspotcontent/*/*/**">
        <map:generate src="cocoon:/get/{1}/{2}/{3}" />
        <map:transform src="xsl/getSpotContent.xsl" />
        <map:serialize type="xml" />
      </map:match>

      <!-- Return XML content + database data in octl wrapper -->
      <map:match pattern="getfromstore/*/*/*/**">
        <!-- {1} localisation {2} timestamp {3} masterlastmodified_ts {4}objectId -->
        <map:generate type="jx" src="jx/sql-getfromstore.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{4}" />
          <map:parameter name="mlm" value="{3}" />
          <map:parameter name="runmode" value="{request-param:runmode}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="productquery/*/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql-productquery.xsl">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="categorization" value="{request-param:categorization}" />
          <map:parameter name="sop" value="{request-param:sop}" />
          <map:parameter name="eop" value="{request-param:eop}" />
          <map:parameter name="max-results" value="{request-param:max}" />
        </map:transform>
        <map:call resource="sql" />
        <map:transform type="xslt-saxon" src="xsl/process-productquery.xsl" />
        <map:serialize type="xml" />
      </map:match>

      <!--
        use list/{table}?where={field='value'} may be used with cocoon-view=html returns a sql:rowset of octls with the
        given content-type
      -->
      <map:match pattern="list/*">
        <map:generate type="jx" src="jx/sql-list.jx">
          <map:parameter name="table" value="{1}" />
          <map:parameter name="where" value="{request-param:where}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" label="xml" />
      </map:match>

      <!-- trace shows the input for a given output -->
      <!-- trace/{ct}/{l}/{o} -->
      <map:match pattern="trace/*/*/**">
        <map:generate type="jx" src="jx/trace-octl.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" label="xml" />
      </map:match>

      <!-- trace/{ct}/{l} -->
      <map:match pattern="trace/*/*">
        <map:generate type="jx" src="jx/trace-ctl.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" label="xml" />
      </map:match>

      <!-- reverse trace shows a list of possible outputs for a given input -->
      <!-- rtrace/{ct}/{l}/{o} -->
      <map:match pattern="rtrace/*/*/**">
        <map:generate type="jx" src="jx/rtrace-octl.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
        </map:generate>
        <map:call resource="sql" />
        <map:transform src="xsl/rtrace.xsl" />
        <map:serialize type="html" />
      </map:match>

      <!-- rtrace/{ct}/{l} -->
      <map:match pattern="rtrace/*/*">
        <map:generate type="jx" src="jx/rtrace-ctl.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
        </map:generate>
        <map:call resource="sql" />
        <map:transform src="xsl/rtrace.xsl" />
        <map:serialize type="html" />
      </map:match>

      <!-- flag manually raises the needsprocessing flag -->
      <map:match pattern="flag/*/*">
        <map:generate type="jx" src="jx/flag.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="runmode" value="{request-param:runmode}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="flag/*/*/**">
        <map:generate type="jx" src="jx/flag.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <!-- flag manually raises the needsprocessing flag -->
      <map:match pattern="reset/*/*">
        <map:generate type="jx" src="jx/reset.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="reset/*/*/**">
        <map:generate type="jx" src="jx/reset.jx">
          <map:parameter name="ct" value="{1}" />
          <map:parameter name="l" value="{2}" />
          <map:parameter name="o" value="{3}" />
        </map:generate>
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="tee/**">
        <map:generate src="{cmc2:svcURL}/{1}" />
        <map:transform type="xslt-saxon" src="xsl/writeEntriesFile.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}" />
        </map:transform>
        <map:transform type="write-source" />

        <map:transform src="xsl/readEntriesFile.xsl" />
        <map:transform type="xinclude" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="printSource/**">
        <map:generate src="{cmc2:svcURL}/{1}" />
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/printEntryFile" />
        </map:transform>
        <map:transform type="cinclude" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="printEntryFile/**">
        <map:generate src="{1}" />
        <map:serialize type="xml" />
      </map:match>
      
      <!--
        Copy a directory.
        
        Request params:
        source: Full path to the directory to be copied
        target: Full path to the directory to copy to.
      -->
      <map:match pattern="copy_dir">
        <map:generate type="directory" src="{request-param:source}">
          <map:parameter name="depth" value="20"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/dir2copyfiles.xsl">
          <map:parameter name="source-dir" value="{request-param:source}"/>
          <map:parameter name="target-dir" value="{request-param:target}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:transform type="xslt-saxon" src="xsl/shell_report.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
        Delete a directory completely.
        
        {1} Full path to directory
        
        Request params:
        delete-root:  When 'true' the specified directory is deleted as well. Otherwise only its contents are removed.
      -->
      <map:match pattern="delete_dir/**">
        <map:generate type="directory" src="{1}">
          <map:parameter name="depth" value="20"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/dir2shell_deletetree.xsl">
          <map:parameter name="dir" value="{1}"/>
          <map:parameter name="delete-root" value="{request-param:delete-root}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:transform type="xslt-saxon" src="xsl/shell_report.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
