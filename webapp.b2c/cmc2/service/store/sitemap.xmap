<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <!-- GLOBAL variables
          {cmc2:gdir}      This is the top level of the data directory struture. Each ct has its own "archive","inbox","outbox","temp" and "log" sub-directories
          {cmc2:xmlDir}    This is the directory containing common xml documents
          {cmc2:xslDir}    this directory contains "common" and "ct" specific xslt transform documents
    -->

  <map:components>
    <map:transformers>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>

  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
    <!-- -->
    <map:resource name="store">
      <map:transform src="xsl/store.xsl">
        <map:parameter name="reload" value="{reload}"/>
        <map:parameter name="dir" value="{cmc2:clobFilestoreDir}"/>
        <map:parameter name="runmode" value="{request-param:runmode}"/>
      </map:transform>
      <map:transform type="write-source"/>
      <map:transform src="xsl/checkWriteSource.xsl"/>
      <map:call resource="sql"/>
    </map:resource>
    <!-- -->
    <map:resource name="export">
      <map:transform src="xsl/exportStore.xsl"/>
      <map:transform type="write-source"/>
      <map:call resource="sql"/>
    </map:resource>
    <!-- -->
    <map:resource name="exportTranslation">
      <map:transform src="xsl/exportTranslationStore.xsl">
        <map:parameter name="dir"    value="{cmc2:gdir}"/>
        <map:parameter name="runcatalogexport" value="{request-param:runcatalogexport}"/>
        <map:parameter name="workflow" value="{request-param:workflow}"/>
        <map:parameter name="phase2" value="{request-param:phase2}"/>
      </map:transform>

      <map:transform type="write-source"/>
      <map:call resource="sql"/>
    </map:resource>
    <!-- -->
    <map:resource name="process-sql">
      <map:transform src="xsl/sql_processQuery.xsl"/>
      <map:call resource="sql"/>
      <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
    </map:resource>
    <!-- -->
    <!-- the secondary-inputs resource -->
    <!-- this uses a plqsl package and passes a plsql table as parameter -->
    <map:resource name="update-secondary-relations">
      <map:transform src="xsl/sql_updateSecondaryRelations.xsl"/>
      <map:call resource="sql"/>
      <map:transform src="xsl/validate_updateSecondaryRelations.xsl"/>
    </map:resource>
  </map:resources>
  <!-- -->
  <map:pipelines>
  <!-- -->
    <map:pipeline type="noncaching">
      <!-- -->
     <map:match pattern="saveSec/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/saveSecEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="saveSecEntryFile/**">
        <map:generate src="{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
            <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
          </map:when>
        </map:select>                 
        <map:call resource="process-sql"/>
        <map:call resource="update-secondary-relations"/>
        <map:call resource="store">
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:call>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deltaSaveSec/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/deltaSaveSecEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deltaSaveSecEntryFile/**">
        <map:generate src="{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
            <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
          </map:when>
        </map:select>                 
        <map:call resource="process-sql"/>
        <map:call resource="update-secondary-relations"/>
        <map:transform src="xsl/getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/cleanup-forCompare.xsl"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:compareContent}"/>
          <map:when test="">        
            <map:transform src="xsl/compareContent.xsl"/>
          </map:when>          
          <map:otherwise>
            <map:transform src="{request-param:compareContent}"/>
          </map:otherwise>
        </map:select>
        <map:call resource="store">
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:call>
        <map:serialize type="xml"/>        
      </map:match>
      <!-- -->
      <map:match pattern="save/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/saveEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="saveEntryFile/**">
        <map:generate src="{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
            <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
          </map:when>
        </map:select>         
        <map:call resource="process-sql"/>
        <map:call resource="store">
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:call>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="delta/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/deltaEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deltaEntryFile/**">
        <map:generate src="{1}"/>
         <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
          </map:when>
        </map:select>
        <map:transform src="xsl/getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/cleanup-forCompare.xsl"/>
        <map:transform src="xsl/compareContent.xsl"/>
        <map:transform src="xsl/writeDeltaEntry.xsl">
          <map:parameter name="filename" value="{request-param:filename}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
       <!-- -->
      <map:match pattern="deltaSave/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/deltaSaveEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deltaSaveEntryFile/**">
        <map:generate src="{1}"/>
         <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
          </map:when>
        </map:select>
        <map:transform src="xsl/getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/cleanup-forCompare.xsl"/>
        <map:transform src="xsl/compareContent.xsl"/>
        <map:call resource="store"/>
        <map:serialize type="xml"/>
      </map:match>
       <!-- -->
      <map:match pattern="mergeDeltaSave.*/**">
        <map:generate src="{cmc2:svcURL}/{2}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/mergeDeltaSaveEntryFile.{1}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="mergeDeltaSaveEntryFile.*/**">
        <map:generate src="{2}"/>
        <map:transform src="xsl/getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:transform type="include"/>
        <!-- merge content -->
        <map:transform src="{cmc2:ctURL}/get_ct_file/{1}/xsl/merge.xsl"/>
        <map:transform src="xsl/cleanup-forCompare.xsl"/>
        <map:transform src="xsl/compareContent.xsl"/>
        <map:call resource="store"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="export/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/exportEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportEntryFile/**">
        <map:generate src="{1}"/>
        <map:call resource="export"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="exportTranslationEntryFile/**">
        <map:generate src="{1}"/>
        <map:call resource="exportTranslation">
            <map:parameter name="runcatalogexport" value="{request-param:runcatalogexport}"/>
        </map:call>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="import/**">
        <!--+
            | Note: import/** may optionally be called with request-param "reload".  The value of {request-param:reload} will
            |       then implicitly be passed through to importEntryFile and be available there to pass to the store resource
            |       to facilitate specialised processing logic for reloads.
            +-->
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/importEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importEntryFile/**">
        <map:generate src="{1}"/>
        <map:call resource="store">
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:call>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importTranslation/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/importTranslationEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importTranslationEntryFile/**">
        <map:generate src="{1}"/>

        <map:transform src="xsl/importTranslationStore.xsl"/>

        <map:call resource="store"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importExec/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/importExecEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importExecEntryFile/**">
        <map:generate src="{1}"/>
        <map:call resource="process-sql"/>
        <map:call resource="store"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importExecDelta/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>        
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/importExecDeltaEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="importExecDeltaEntryFile/**">
        <map:generate src="{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:createPlaceholder}"/>
          <map:when test="y">
            <map:transform src="xsl/sql_createPlaceholder.xsl"/>
            <map:call resource="sql"/>
          </map:when>
        </map:select>
        <map:transform src="xsl/getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/cleanup-forCompare.xsl"/>
        <map:transform src="xsl/compareContent.xsl"/>
        <map:call resource="process-sql"/>
        <map:call resource="store"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="execProcessSQL/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/execProcessSQLEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="execProcessSQLEntryFile/**">
        <map:generate src="{1}"/>
        <map:call resource="process-sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="secTransform/*/**">
        <!-- {1} CT {2} filename -->
        <map:generate src="{2}"/>
        <map:transform src="{cmc2:ctURL}/get_ct_file/{1}/xsl/secondaryDerivation.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- 
         | TEST: http://localhost:8888/cmc2/service/store/PDFExport/PP_Translations/batch/localised/processBatches/PP_Translations/none/20130204174715?zip=yes&zipSourceDir=C:\work/cocoon-2.1.9/data/PP_Translations/outbox&zipDestDir=C:\work/cocoon-2.1.9/data/PP_Translations/archive&filePattern=.*\.pdf
         |-->
      <map:match pattern="PDFExport/*/**">
        <!-- {1} CT {2} filename -->
        <map:generate src="{cmc2:svcURL}/{2}"/>
        <map:transform src="xsl/include_writeSource2PDF.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="zip" value="{request-param:zip}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="PDF/*/**">
        <!-- {1} CT {2} filename -->
        <map:generate src="{2}"/>
        <map:transform src="{cmc2:ctURL}/get_ct_file/{1}/xsl/xml2fo.xsl"/>
        <map:transform src="xsl/pdf.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="write-source2pdf">
          <map:parameter name="serializer" value="fo2pdf"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="ZipFiles/*">
        <!-- Generate dir listing -->
        <map:generate type="directory" src="{request-param:zipSourceDir}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd hh:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="{request-param:filePattern}"/>
        </map:generate>
        <!-- Create 1 zipfile include per sourcefile -->
        <map:transform src="{cmc2:xslDir}/common/dir2zipinclude.xsl">
          <map:parameter name="zipSourceDir" value="{request-param:zipSourceDir}"/>
          <map:parameter name="zipDestDir" value="{request-param:zipDestDir}"/>
        </map:transform>
        <!-- Include -->
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->            
      <map:match pattern="ZipFile/**">
        <map:act type="copy-source" src="cocoon:/ZipFileSub/{1}">
          <map:parameter name="dest" value="{request-param:destFilename}"/>
        </map:act>      
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->                    
      <map:match pattern="ZipFileSub/**">
        <!-- Zip *one* file -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="{cmc2:xslDir}/common/zipIt.xsl">        
          <map:parameter name="sourceFilePath" value="{1}"/>                  
          <map:parameter name="sourceFilename" value="{request-param:sourceFilename}"/>
        </map:transform>
        <map:serialize type="zip"/>
      </map:match>
      <!-- -->                          
      <map:match pattern="emailPDF/**">
        <map:generate src="{1}"/>
        <map:transform type="xslt-saxon" src="xsl/emailPDF.xsl">
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="XML/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/xml.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="write-source">
          <map:parameter name="serializer" value="xml"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="spot/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="xsl/include_writeSource2Spot.xsl"/>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="UpdateProduct/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/SPOTUpdateProduct.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform src="xsl/FilterEmptySPOT.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="UpdateKeyValue/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/SPOTUpdateKeyValue.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform src="xsl/FilterEmptySPOT.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="UpdateAsset/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/SPOTUpdateAsset.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform src="xsl/FilterEmptySPOT.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="UpdateCatalog/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/SPOTUpdateCatalog.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform src="xsl/FilterEmptySPOT.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="UpdatePMD/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/SPOTUpdatePMD.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform src="xsl/FilterEmptySPOT.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      
      
      <!--
		Purge the filestore for one content
		{1} content_type 
	  -->
      <map:match pattern="filestorePurge/*">
        <map:generate src="../../xml/empty.xml"/>
        <map:transform src="xsl/sql_getCTlocales.xsl"> 
          <map:parameter name="ct" value="{1}"/>
        </map:transform>          
        <map:call resource="sql"/>
        <map:transform src="xsl/filestore_include.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="matcher" value="filestorePurge"/>
        </map:transform>       
        <map:transform type="cinclude"/>     
        <map:serialize type="xml"/> 
     </map:match>
      
      <!--
		Purge the filestore for one content type and locale
		{1} content_type 
		{2} localisation
	  -->
      <map:match pattern="filestorePurge/*/*">
        <map:act type="copy-source" src="cocoon:/filestorePurge_sub/{1}/{2}">
              <map:parameter name="dest" value="{cmc2:clobFilestoreDir}/logs/filestorePurge_report_{1}_{2}.xml"/>
        </map:act>
        <!--map:generate src="{cmc2:clobFilestoreDir}/logs/filestorePurge_report_{1}_{2}.xml"/-->
        <map:generate src="../../xml/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>    
	  
	  <!--
		Create a shell script that removes files from the filestore
		{1} content_type 
		{2} localisation
	  -->
      <map:match pattern="filestorePurge_sub/*/*">
        <map:generate  src="cocoon:/filestoreReconcile_sub/{1}/{2}?not-in-filestore=false"/>
        <map:transform src="xsl/filestorePurge_delete.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="localisation" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:clobFilestoreDir}"/>
          <map:parameter name="recycle" value="{request-param:recycle}"/>
        </map:transform>
        <map:transform type="shell"/> 
        <map:serialize type="xml"/>
      </map:match> 
      
       <map:match pattern="filestoreReconcile/*">
        <map:generate src="../../xml/empty.xml"/>
        <map:transform src="xsl/sql_getCTlocales.xsl"> 
          <map:parameter name="ct" value="{1}"/>
        </map:transform>          
        <map:call resource="sql"/>
        <map:transform src="xsl/filestore_include.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="matcher" value="filestoreReconcile"/>
        </map:transform>       
        <map:transform type="cinclude"/>         
        <map:serialize type="xml"/> 
     </map:match>
   
      <map:match pattern="filestoreReconcile/*/*">
      <!-- {1} content_type {2} localisation     cmc2:clobFilestoreDir paramete set to path-->
        <map:act type="copy-source" src="cocoon:/filestoreReconcile_sub/{1}/{2}">
              <map:parameter name="dest" value="{cmc2:clobFilestoreDir}/logs/filestoreReconcile_report_{1}_{2}.xml"/>
        </map:act>
        <!--map:generate src="{cmc2:clobFilestoreDir}/logs/filestoreReconcile_report_{1}_{2}.xml"/-->
        <map:generate src="../../xml/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>          
           
      <map:match pattern="filestoreReconcile_sub/*/*">
      <!-- {1} content_type {2} localisation     cmc2:clobFilestoreDir paramete set to path-->
        <map:generate type="directory" src="{cmc2:clobFilestoreDir}/{1}/{2}">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform src="xsl/filestoreReconcile_sql.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="localisation" value="{2}"/>
        </map:transform>  
        <map:call resource="sql"/>
        <map:transform src="xsl/filestoreReconcile_format.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="localisation" value="{2}"/>
        </map:transform>
        <map:transform src="xsl/filestoreReconcile_delta.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="localisation" value="{2}"/>
          <map:parameter name="not-in-filestore" value="{request-param:not-in-filestore}"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match> 

      <!--
         | TEST: http://localhost:8888/cmc2/service/store/testPDF
         |-->
      <map:match pattern="testPDF">
        <map:generate src="file:/c:/work/cocoon-2.1.9/data/PP_Translations/temp/entry_20130205154620.none.1.xml"/>
        <map:transform src="{cmc2:ctURL}/get_ct_file/PP_Translations/xsl/xml2fo.xsl"/>
        <map:transform src="xsl/pdf.xsl">
            <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="write-source2pdf">
          <map:parameter name="serializer" value="fo2pdf"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
        
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
