<?xml version="1.0"?>

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <!-- =========================== Components ================================ -->

  <map:components>
    <map:generators default="file">
      <map:generator name="csv" src="org.apache.cocoon.generation.CSVGenerator" logger="sitemap.generator.csv"/>
      
    </map:generators>
    <map:transformers default="xslt-saxon">
      <!-- Set use-request-parameters to true by default -->
      <map:transformer name="xslt-saxon" logger="sitemap.transformer.xalan" pool-grow="2" pool-max="32"
        pool-min="8" src="org.apache.cocoon.transformation.TraxTransformer">
        <use-request-parameters>true</use-request-parameters>
        <use-session-parameters>false</use-session-parameters>
        <use-cookie-parameters>false</use-cookie-parameters>
        <use-browser-capabilities-db>false</use-browser-capabilities-db>
        <xslt-processor-role>org.apache.excalibur.xml.xslt.XSLTProcessor/saxon</xslt-processor-role>
        <check-includes>true</check-includes>
      </map:transformer>
    </map:transformers>
    <map:serializers default="xml">
      <map:serializer logger="sitemap.serializer.text" mime-type="application/json" name="json" src="org.apache.cocoon.serialization.TextSerializer">
        <encoding>UTF-8</encoding>
      </map:serializer>
    </map:serializers>
    <map:selectors default="parameter">
      <map:selector name="ct-selector" src="org.apache.cocoon.selection.RegexpRequestParameterSelector">
        <!-- content types that need to be converted to xUCDM external format -->
        <pattern name="xucdm-ext-type">^PMT</pattern>
        <parameter-name>contentType</parameter-name>
      </map:selector>
    </map:selectors>

  </map:components>

  <!-- =========================== Resources ================================= -->

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbWS"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
        <map:parameter name="show-nr-of-rows" value="true"/>
      </map:transform>
    </map:resource>
    <map:resource name="sql-mip">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbMIP"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
        <map:parameter name="show-nr-of-rows" value="true"/>
      </map:transform>
    </map:resource>
  </map:resources>

  <!-- =========================== Pipelines ================================= -->

  <map:pipelines>
    
    <!-- invoke with request parameter accountID=...
         xsp page relies on the accountID parameter to invoke the webservice -->
    <map:pipeline type="caching">
        <map:match pattern="PeopleFinderService**">       
           <map:generate type="serverpages" src="peopleFinder/getdetails.xsp"/>
           <map:transform src="peopleFinder/output.xsl"/>                 
           <map:serialize type="xml" />
        </map:match>
    </map:pipeline>
    
    <!-- Webservice pipeline called from the Java service implementation -->
    <!-- Set internal-only to true to block calls that do not originate from the SOAP Service layer -->
    <map:pipeline type="noncaching" internal-only="false">

      <map:match pattern="test">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform src="debug.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!--  Transform results to JSON format, e.g.
         |  
         |  http://localhost:8888/cmc2/webservice/pipelines/listProducts/json
         
            Used by the iPad application, security using siteminder
         -->
      <map:match pattern="*/json**">
        <map:generate src="cocoon:/{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{1}"/>
          <map:when test="listProducts">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="getProductDetails">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="listChangedProducts">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="getUrgencyStatistics">
            <map:transform src="json/urgstats2json.xsl"/>
          </map:when>
          <map:when test="getCategorization">
            <map:transform src="json/catg2json.xsl"/>
          </map:when>
          <map:when test="listCategorizationItems">
            <map:transform src="json/catgitem2json.xsl"/>
          </map:when>
          <map:when test="getConfig">
            <map:transform src="json/config2json.xsl"/>
          </map:when>
          <map:when test="getNewDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getExpertDocument">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getTrainingAndVideoDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getBestPracticeDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
        <map:when test="getGuidelineDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:otherwise>
            <!-- Generic transformation: do not use when the XML has sequences elements with the same name -->
            <map:transform src="json/xml2json.xsl"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="json"/>
      </map:match>
      
      <!-- Used by EM front-end, security using NTLM -->
      <map:match pattern="*/2json**">
        <map:generate src="cocoon:/{1}"/>
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{1}"/>
          <map:when test="listProducts">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="getProductDetails">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="listChangedProducts">
            <map:transform src="json/pms2json.xsl"/>
          </map:when>
          <map:when test="getUrgencyStatistics">
            <map:transform src="json/urgstats2json.xsl"/>
          </map:when>
          <map:when test="getCategorization">
            <map:transform src="json/catg2json.xsl"/>
          </map:when>
          <map:when test="listCategorizationItems">
            <map:transform src="json/catgitem2json.xsl"/>
          </map:when>
          <map:when test="getConfig">
            <map:transform src="json/config2json.xsl"/>
          </map:when>
          <map:when test="getNewDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getExpertDocument">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getTrainingAndVideoDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:when test="getBestPracticeDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
        <map:when test="getGuidelineDocuments">
            <map:transform src="json/docs2json.xsl"/>
          </map:when>
          <map:otherwise>
            <!-- Generic transformation: do not use when the XML has sequences elements with the same name -->
            <map:transform src="json/xml2json.xsl"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="json"/>
      </map:match>
      <!-- config file download -->
      <map:match pattern="getConfig**">
        <map:generate src="./xml/xUCDM_EMP_config v3.7.xml"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- ListProducts -->
      <map:match pattern="listProducts**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="cocoon:/schema_resource/listProducts/sql_select.xsl"/>                                                     
        <map:call resource="sql"/>                        
        <map:transform src="cocoon:/schema_resource/listProducts/includeContent.xsl"/>                
        <map:transform type="cinclude">
          <map:parameter name="support-caching" value="true"/>
        </map:transform>                                                            
        <map:transform src="cocoon:/schema_resource/listProducts/output.xsl">
          <map:parameter name="pmt-preview-url" value="{cmc2:pmt-preview-url}"/>
          <map:parameter name="relative-url-prefix" value="{cmc2:relative-url-prefix}"/>
        </map:transform>                
        <map:transform src="cocoon:/schema_resource/listProducts/sort-output.xsl"/>       
        <map:serialize type="xml" />
      </map:match>
      
      <!-- GetProductDetails -->
      <map:match pattern="getProductDetails**">
        <map:generate src="getProductDetails/skeleton.xml"/>        
        <map:transform src="cocoon:/schema_resource/getProductDetails/sql_select.xsl"/>               
        <map:call resource="sql"/>          
        <map:transform src="cocoon:/schema_resource/getProductDetails/filter.xsl">
          <map:parameter name="cmc-svc-url" value="{cmc2:svcURL}"/>
          <map:parameter name="asset-edit-url" value="{cmc2:asset-edit-url}"/>
          <map:parameter name="pmt-edit-url" value="{cmc2:pmt-edit-url}"/>
        </map:transform>                     
        <map:transform src="cocoon:/schema_resource/getProductDetails/includeContent.xsl"/>                
        <map:transform type="cinclude">
          <map:parameter name="support-caching" value="true"/>
        </map:transform>  
        <map:transform src="cocoon:/schema_resource/getProductDetails/output.xsl">
          <map:parameter name="pmt-preview-url" value="{cmc2:pmt-preview-url}"/>
          <map:parameter name="relative-url-prefix" value="{cmc2:relative-url-prefix}"/>
        </map:transform>
        <map:serialize type="xml" />
      </map:match>
      
      <!-- ListChangedProducts -->
      <map:match pattern="listChangedProducts**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="listChangedProducts/sql_select.xsl"/>       
        <map:call resource="sql"/>             
        <map:transform src="listChangedProducts/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- GetUrgencyStatistics -->
      <map:match pattern="getUrgencyStatistics**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>        
        <map:transform src="getUrgencyStatistics/sql_select.xsl"/>                        
        <map:call resource="sql"/>                                     
        <map:transform src="getUrgencyStatistics/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- InitializeUser -->
      <map:match pattern="initializeUser**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="cocoon:/schema_resource/initializeUser/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- openProduct -->
      <map:match pattern="openProduct**">
        <map:generate src="cocoon:/getProductDetails**"/>        
        <map:transform src="openProduct/output.xsl"/>
        <map:serialize type="html" />
      </map:match>

      <!-- KPI Statistics -->
      <map:match pattern="getKPIStatistics**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="getKPIStatistics/sql_select.xsl"/>        
        <map:call resource="sql"/>                                                
        <map:transform src="getKPIStatistics/include_select.xsl"/>                
        <map:transform type="include"/>                             
        <map:transform src="getKPIStatistics/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- GetUploadURL -->
      <map:match pattern="getUploadURL**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="getUploadURL/output.xsl">
          <map:parameter name="pmt-edit-url" value="{cmc2:pmt-edit-url}"/>
          <map:parameter name="assets-edit-url" value="{cmc2:assets-edit-url}"/>
        </map:transform>
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="listCategorizationItems**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="listCategorizationItems/sql_select.xsl"/>
        <map:call resource="sql"/>                     
        <map:transform src="listCategorizationItems/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- access mprdata -->
      <map:match pattern="mprdata**">
        <map:read type="image" 
          src="{cmc2:mprdata-url}/mprdata{1}"> 
        </map:read>

      </map:match>
      
      <!-- catalog managers -->
      <map:match pattern="catalogManagers**">
        <map:generate type="text" src="http://pww.ccr.philips.com/ccrprd{1}?ctn={request-param:ctn}&amp;cat={request-param:cat}&amp;locale={request-param:locale}&amp;hash={request-param:hash}"/>
        
        <map:transform src="getCatalogManagers/include_catalogManagers.xsl"/>        
        <map:transform type="include"/>
        
        <map:transform src="json/autn2json.xsl"/>
        <map:serialize type="json"/>
      </map:match>
      
      
      <!-- access autonomy -->
      <map:match pattern="autonomy/*">
        <map:generate src="http://pww.xmlsearch.philips.com/a=query&amp;databasematch=PEOPLEFINDER&amp;fieldtext=WILD%7B*{1}*%7D:PF_PERSON_EMAIL&amp;maxResults=20"/> 
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getNewDocuments**">
      <!-- 
        http://pww.xmlsearch.philips.com/?a=query&Print=fields&outputencoding=UTF8&combine=Simple&summary=Context&totalresults=true&predict=false&databasematch=IS_DOCLIB_CL&FieldText=WILD{*/TS0905181459392080427802/B2C*}:OPENFOLDER+EQUAL{1,2,3,4}:CONTENTTYPENUM1&start=1&maxresults=10
        <map:generate src="getNewDocuments/NewDocuments.xml"/>
      -->
        <map:generate src="http://pww.xmlsearch.philips.com/?a=query&amp;Print=fields&amp;outputencoding=UTF8&amp;combine=Simple&amp;summary=Context&amp;totalresults=true&amp;predict=false&amp;databasematch=IS_DOCLIB_CL&amp;FieldText=WILD%7B*/TS0905181459392080427802/B2C*%7D:OPENFOLDER+EQUAL%7B1,2,3,4%7D:CONTENTTYPENUM1&amp;start=1&amp;maxresults=10"/>               
        <map:transform src="getDocuments/output.xsl">
          <map:parameter name="id" value="New"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getSearchDocuments**">
        <map:generate src="http://pww.xmlsearch.philips.com/?a=query&amp;Print=fields&amp;outputencoding=UTF8&amp;combine=Simple&amp;summary=Context&amp;totalresults=true&amp;predict=false&amp;databasematch=IS_DOCLIB_CL&amp;FieldText=WILD%7B*/TS0905181459392080427802/B2C/Brand%20identity%20guide*%7D:OPENFOLDER+EQUAL%7B1,2,3,4%7D:CONTENTTYPENUM1&amp;start=1&amp;maxresults=50"/>        
        <map:transform src="getDocuments/output.xsl">
          <map:parameter name="id" value="Guidelines"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getTrainingAndVideoDocuments**">
        <map:generate src="{cmc2:training-and-video-data-location}"/>
        <map:transform src="getDocuments/filter.xsl">
          <map:parameter name="topics" value="{request-param:topics}"/>
        </map:transform>                
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="getBestPracticeDocuments**">
        <map:generate src="http://pww.xmlsearch.philips.com/?a=query&amp;Print=fields&amp;outputencoding=UTF8&amp;combine=Simple&amp;summary=Context&amp;totalresults=true&amp;predict=false&amp;databasematch=IS_DOCLIB_CL&amp;FieldText=WILD%7B*{request-param:topics}*%7D:SP_COMMENTS+AND+(WILD%7B*/TS0905181459392080427802/B2C/White%20Papers*%7D:OPENFOLDER+OR+WILD%7B*/TS0905181459392080427802/B2C/Best%20Practices*%7D:OPENFOLDER)start=1&amp;maxresults=50&amp;sort=ReverseDate"/>
        <map:transform src="getDocuments/output.xsl">
          <map:parameter name="id" value="{request-param:topics}BestPractices"/>
        </map:transform>                
        <map:serialize type="xml"/>
      </map:match>      

      <map:match pattern="getGuidelineDocuments**">
        <map:generate src="http://pww.xmlsearch.philips.com/?a=query&amp;Print=fields&amp;outputencoding=UTF8&amp;combine=Simple&amp;summary=Context&amp;totalresults=true&amp;predict=false&amp;databasematch=IS_DOCLIB_CL&amp;FieldText=WILD%7B*{request-param:topics}*%7D:SP_COMMENTS+AND+(WILD%7B*/TS0905181459392080427802/B2C/FAQ*%7D:OPENFOLDER+OR+WILD%7B*/TS0905181459392080427802/B2C/Brand%20identity%20guide*%7D:OPENFOLDER+OR+WILD%7B*Process*%7D:SP_COMMENTS)&amp;start=1&amp;maxresults=50&amp;sort=ReverseDate"/>        
        <map:transform src="getDocuments/output.xsl">
          <map:parameter name="id" value="{request-param:topics}Guidelines"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getExpertDocument**">
        <map:generate src="{cmc2:expert-document-location}"/>
        <map:transform src="getDocuments/filter.xsl">
          <map:parameter name="topics" value="{request-param:topics}"/>
        </map:transform>                
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="searchDocuments/*">
        <map:generate src="http://pww.xmlsearch.philips.com/?a=query&amp;Print=fields&amp;outputencoding=UTF8&amp;combine=Simple&amp;summary=Context&amp;totalresults=true&amp;predict=false&amp;databasematch=IS_DOCLIB_CL&amp;FieldText=WILD%7B*/TS0905181459392080427802/B2C/*%7D:OPENFOLDER+AND+EQUAL%7B1,2,3,4%7D:CONTENTTYPENUM1+AND+WILD%7B*{1}*%7D:SP_FILELEAFREF+OR+WILD%7B*{1}*%7D:SP_COMMENTS&amp;minscore=25&amp;start=1&amp;maxresults=50&amp;sort=ReverseDate"/>
        <map:transform src="getDocuments/output.xsl">
          <map:parameter name="id" value="Search"/>
        </map:transform>
        <map:transform src="json/docs2json.xsl"/>
        <map:serialize type="json"/>
      </map:match>
      
      <map:match pattern="listMIPUsers**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>        
        <map:transform src="listMIPUsers/sql_select.xsl"/>
        <map:call resource="sql-mip"/>
        <map:transform src="listMIPUsers/include_users.xsl"/>
        <map:transform type="include"/>
        <map:transform src="listMIPUsers/output.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getCountryHierarchy**">
        <map:generate type="html" src="http://ehvuas02.diamond.philips.com/apps/g_dir/e3380601.nsf/data/COU-HY-Internal2"/>
        <map:transform src="getCountryHierarchy/output.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="getMIPProductTree**">
        <!-- Create XML from csv (save as csv from xls)
        <map:generate type="csv" src="getMIPProductTree/PRT-C2012.csv"/>
        -->
        <map:generate src="getMIPProductTree/PRT-C2012.xml"/>
        <map:transform src="getMIPProductTree/output.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- GetAuthorizationProfile -->
      <map:match pattern="getAuthorizationProfile">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />

        <map:transform src="getAuthorizationProfile/retrieveProfile.xsl">
          <map:parameter name="cmc-svc-url" value="{cmc2:svcURL}"/>
        </map:transform>

        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:transform}"/>
          <map:when test="">
            <!-- postProcess_Default is currently an identity transformation -->
            <!-- map:transform src="getAuthorizationProfile/postProcess_Default.xsl"/  -->
          </map:when>
          <map:otherwise>
            <map:transform src="getAuthorizationProfile/postProcess_{request-param:transform}.xsl"/>
          </map:otherwise>
        </map:select>
        
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:xpath}"/>
          <map:when test=""/>
          <map:otherwise>
            <map:transform src="getAuthorizationProfile/dynamicXpathFilter.xsl"/>
          </map:otherwise>
        </map:select>

        <map:serialize type="xml" />
      </map:match>

      <!-- GetCategorization -->
      <map:match pattern="getCategorization**">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:categorizationID}"/>
          <map:when test="ProductTree">
            <map:generate src="getCategorization/ProductTree.xml" />
          </map:when>
          <map:otherwise>
           <map:generate src="{cmc2:xmlDir}/empty.xml" />   
           
           <map:transform src="getCategorization/sql_select.xsl"/>               
           <map:call resource="sql"/>
         </map:otherwise>          
        </map:select>
        
        <map:transform src="cocoon:/categorization_resource/getCategorization/filter.xsl">                       
          <map:parameter name="cmc-svc-url" value="{cmc2:svcURL}"/>
        </map:transform>               
        <map:select type="request-parameter">
          <map:parameter name="parameter-name" value="includeProductAssignments"/>
          <map:when test="true">
            <map:call resource="sql"/>
          </map:when>
        </map:select>        
        <map:transform src="cocoon:/categorization_resource/getCategorization/output.xsl"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectListFromCategorization -->
      <map:match pattern="getObjectListFromCategorization">
        <!-- Use the getCategorization logic to get the basic data -->
        <map:generate src="cocoon:/getObjectListFromProfile"/>
        <!-- map:transform src="getObjectListFromCategorization/output.xsl"/ -->
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectListFromCatalog -->
      <map:match pattern="getObjectListFromCatalog">
        <!-- Use the getCatalog logic to get the basic data -->
        <map:generate src="cocoon:/getObjectListFromProfile"/>
        <!-- map:transform src="getObjectListFromCatalog/output.xsl"/ -->
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectListFromPartialID -->
      <map:match pattern="getObjectListFromPartialID">
        <!-- Use generic getObjectListFromProfile -->
        <map:generate src="cocoon:/getObjectListFromProfile"/>
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectDocument -->
      <map:match pattern="getObjectDocument">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>       
        <map:transform src="getObjectDocument/get-octl.xsl">
          <map:parameter name="cmc-svc-url" value="{cmc2:svcURL}"/>
        </map:transform>                       
        <map:call resource="sql"/>

        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:target}"/>
          <map:when test="icp">          
            <map:transform src="../../../cmc2/xsl/common/icp-products.xsl"/>                       
          </map:when>
          <map:otherwise>
            <map:select type="ct-selector">
              <map:when test="xucdm-ext-type">
                <map:transform src="getObjectDocument/xucdm-external.xsl"/>
              </map:when>
            </map:select>
            
            <map:select type="parameter">
             <map:parameter name="parameter-selector-test" value="{request-param:transform}"/>
             <map:when test=""/>
             <map:when test="Default"/>
             <map:otherwise>
               <map:transform src="getObjectDocument/postProcess_{request-param:transform}.xsl"/>
             </map:otherwise>
           </map:select>
           
           <map:select type="parameter">
             <map:parameter name="parameter-selector-test" value="{request-param:xpath}"/>
             <map:when test=""/>
             <map:otherwise>
               <map:transform src="getObjectDocument/dynamicXpathFilter.xsl"/>
             </map:otherwise>
           </map:select>
           
           <map:transform src="getObjectDocument/output.xsl"/>
          </map:otherwise>
        </map:select>
        
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectDocuments -->
      <map:match pattern="getObjectDocuments">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="getObjectDocuments/include.xsl"/>
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        <map:serialize type="xml" />
      </map:match>

      <!-- GetObjectDocumentsFromPartialID -->
      <map:match pattern="getObjectDocumentsFromPartialID">
        <map:generate src="cocoon:/getObjectListFromProfile"/>
        <map:transform src="getObjectDocumentsFromPartialID/include.xsl"/>
        <map:transform type="include">
          <map:parameter name="parallel" value="true"/>
        </map:transform>
        <map:serialize type="xml" />
      </map:match>

      <!--
        Read a resource that may be dependant on the schema request parameter. 
      -->
      <map:match pattern="schema_resource/**/*.*">
        <map:select type="resource-exists">
          <map:when test="{1}/{2}_{request-param:schema}.{3}">
            <map:generate src="{1}/{2}_{request-param:schema}.{3}">
              <map:parameter name="schema" value="{request-param:schema}"/>
            </map:generate>
          </map:when>
          <map:otherwise>
            <map:generate src="{1}/{2}.{3}"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>      
      
      <!--
        Read a resource that may be dependant on the categorizationID request parameter. 
      -->
      <map:match pattern="categorization_resource/**/*.*">
        <map:select type="resource-exists">
          <map:when test="{1}/{2}_{request-param:categorizationID}.{3}">
            <map:generate src="{1}/{2}_{request-param:categorizationID}.{3}">
              <map:parameter name="schema" value="{request-param:categorizationID}"/>
            </map:generate>
          </map:when>
          <map:otherwise>
            <map:generate src="{1}/{2}.{3}"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--  Default implementation using standard files in operation directory.
         |  
         |  1) select from database with sql_select.xsl
         |  2) transform to WSDL's output type with output.xml
         -->
      <map:match pattern="*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="{1}/sql_select.xsl" view="sqlquery">
          <map:parameter name="cmc-svc-url" value="{cmc2:svcURL}"/>
        </map:transform>                         
        <map:call resource="sql"/>                 
        <map:transform src="{1}/output.xsl">
          <map:parameter name="__noauth" value="1"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- 
         | Include basic data
         |
         | This is not used yet. Currently UAP and ObjectCategorization are read
         | using the document() function in XSLT.
         -->
      <map:match pattern="common/includeBase">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="common/includeBase.xsl"/>
        <map:transform type="include"/>
        <map:serialize type="xml"/> 
      </map:match>

      <!--
         | {1} user Id
         -->
      <map:match pattern="common/getUAP/**">
        <map:generate src="{cmc2:svcURL}/common/get-octl/UAP/none/{1}"/>
        <map:transform src="common/dataFromSql.xsl"/>
        <map:serialize type="xml"/> 
      </map:match>

      <!--
         | {1} catalog code
         | {2} object_id
         -->
      <map:match pattern="common/getObjectCategorization/*/**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="common/sql_getObjectCategorization.xsl">
          <map:parameter name="catalogCode" value="{1}"/>
          <map:parameter name="objectId" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform src="common/buildCategorization.xsl"/>
        <map:serialize type="xml"/> 
      </map:match>
      
    </map:pipeline>
  </map:pipelines>

</map:sitemap>

  <!-- end of file -->

