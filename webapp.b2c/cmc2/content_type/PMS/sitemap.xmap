<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:components>
    <map:serializers>
      <map:serializer logger="sitemap.serializer.xml" mime-type="text/xml" name="xml-indented"
                      src="org.apache.cocoon.serialization.XMLSerializer">
        <encoding>UTF-8</encoding>
        <indent>yes</indent>
      </map:serializer>
    </map:serializers>

  </map:components>

  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC" />
        <map:parameter name="clob-encoding" value="UTF-8" />
      </map:transform>
    </map:resource>
  </map:resources>

  <map:pipelines>
    <!-- -->
    <map:component-configurations>
      <global-variables>
        <ct>PMS</ct>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!--
        Here is the main pipeline that executes the batch processing. In invoking the pipeline the execution timestamp 
        is passed as a parameter along with ct.
        Input parameters: {1} = timestamp
      -->
      <map:match pattern="runMain/*">
         <!-- initialise temporary tables to increase the processing speed.
         -->
         <map:act type="copy-source" src="cocoon:/initialisePMStables">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/initialisePMStables_report.xml"/> 
         </map:act>

         <!-- standard Pikachu batching and processing:
         -->
         <map:act type="copy-source" src="{cmc2:svcURL}/batch/localised/createBatches/{global:ct}/none">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml" />
         </map:act>
         <map:act type="copy-source" src="{cmc2:svcURL}/store/save/batch/localised/processBatches/{global:ct}/none/{1}">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml" />
         </map:act>

         <!-- needed after every update of the PMS_Products tables as otherwise the 
          SearchIndex does not provide all results. 
          - tables are only analysed after the BATCH update of the PMS.
          - the search index is rebuild after every update of a PMS product.
         -->
         <map:act type="copy-source" src="cocoon:/analyzePMStables">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/analyzePMStables_report.xml"/> 
         </map:act>

         <map:aggregate element="reports">
            <map:part src="{cmc2:gdir}/{global:ct}/temp/initialisePMStables_report.xml"/>
            <map:part src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
            <map:part src="{cmc2:gdir}/{global:ct}/temp/analyzePMStables_report.xml"/>
         </map:aggregate>  
         <map:serialize type="xml" />
      </map:match>

      <!--
        Process one product.
        
        {1} localisation
        {2} timestamp
        {3} objectId
        
        E.g. http://nlyehvgdc1ux022:8888/cmc2/content_type/PMS/process/none/20090629000000/56PFL9954H/12
      -->
      <map:match pattern="process/*/*/**">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <!-- create an entry record for the target octl -->
        <map:transform src="{cmc2:xslDir}/common/create_entry_record.xsl" label="entryrecord">
          <map:parameter name="o" value="{3}" />
          <map:parameter name="ct" value="{global:ct}" />
          <map:parameter name="l" value="{1}" />
          <map:parameter name="ts" value="{2}" />
          <map:parameter name="runmode" value="{request-param:runmode}" />
        </map:transform>

        <!-- Get existing PMS or create new template -->
        <map:transform type="xslt-saxon" src="xsl/sql_PMS.xsl" label="pmssql" />
        <map:call resource="sql" label="pmssqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertPMS.xsl" label="pmsconvert" />

        <!-- ProductStatus -->
        <map:transform type="xslt-saxon" src="xsl/sql_status.xsl" label="statussql" />
        <map:call resource="sql" label="statussqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertStatus.xsl" label="statusconvert" />

        <!-- Categorization -->
        <map:transform type="xslt-saxon" src="xsl/sql_categorization.xsl" label="catgsql" />
        <map:call resource="sql" label="catgsqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertCategorization.xsl" label="catgconvert" />
        <!-- Product -->
        <map:transform type="xslt-saxon" src="xsl/sql_product.xsl" label="productsql"/>
        <map:call resource="sql" label="productsqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertProduct.xsl" label="productconvert"/>
        <map:call resource="sql" label="assetssqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertAssetList.xsl" label="assetlistconvert"/>
        <map:transform type="xslt-saxon" src="xsl/convertAssets.xsl" label="assetsconvert">
          <map:parameter name="pmt-preview-url" value="{cmc2:pmt-preview-url}"/>
          <map:parameter name="pmt-edit-url" value="{cmc2:pmt-edit-url}"/>
          <map:parameter name="asset-edit-url" value="{cmc2:asset-edit-url}"/>
        </map:transform>

        <!-- Countries/Catalogs -->
        <map:transform type="xslt-saxon" src="xsl/sql_catalogs.xsl" label="catalogsql" />
        <map:call resource="sql" label="catalogsqlresult" />

        <map:transform type="xslt-saxon" src="xsl/convertCatalogs.xsl" label="catalogconvert">
          <map:parameter name="ccr-catalogmanager-url" value="{cmc2:ccr-catalogmanager-url}" />
        </map:transform>

        <!-- Translation status -->
        <map:transform type="xslt-saxon" src="xsl/sql_translations.xsl" label="translationssql" />
        <map:call resource="sql" label="translationssqlresult" />
        <map:transform type="xslt-saxon" src="xsl/convertTranslations.xsl" label="translationsconvert"/>

        <!--
          BY HERE we have the basic PMS structure in place with additional evaluation data. next is to evaluat the PMS. 
          Then reformat it and drop the evaluation data.
        -->
        <map:transform type="xslt-saxon" src="xsl/evaluateContent.xsl" label="evaluatecontent">
          <map:parameter name="asset-edit-url" value="{cmc2:asset-edit-url}"/>  
          <map:parameter name="pmt-edit-url" value="{cmc2:pmt-edit-url}"/>
          <map:parameter name="pmt-preview-url" value="{cmc2:pmt-preview-url}"/>
        </map:transform>

        <!-- entry record processing -->
        <map:transform type="xslt-saxon" src="xsl/process_entries.xsl" label="processentries" />
        <map:transform type="xslt-saxon" src="xsl/finalize.xsl" />

        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="test">
        <map:generate src="cocoon:/process/none/20090629000000/56PFL9954H/12?force=true" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="saveConfig">
        <map:generate src="../../xml/emp_doctype_groups.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_saveConfig.xsl" />
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="initialisePMStables">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_initialisePMStables.xsl" />
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>

      <map:match pattern="analyzePMStables">
        <map:generate src="{cmc2:xmlDir}/empty.xml" />
        <map:transform type="xslt-saxon" src="xsl/sql_analyzePMStables.xsl" />
        <map:call resource="sql" />
        <map:serialize type="xml" />
      </map:match>
    </map:pipeline>
  </map:pipelines>
  <!-- -->
  <map:views>
    <map:view name="entryrecord" from-label="entryrecord">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="pmssql" from-label="pmssql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="pmssqlresult" from-label="pmssqlresult">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="pmsconvert" from-label="pmsconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="statussql" from-label="statussql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="statussqlresult" from-label="statussqlresult">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="statusconvert" from-label="statusconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="catgsql" from-label="catgsql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="catgsqlresult" from-label="catgsqlresult">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="catgconvert" from-label="catgconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="productsql" from-label="productsql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="productsqlresult" from-label="productsqlresult">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="productconvert" from-label="productconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="assetssqlresult" from-label="assetssqlresult">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="assetlistconvert" from-label="assetsconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="assetsconvert" from-label="assetsconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="catalogsql" from-label="catalogsql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="catalogconvert" from-label="catalogconvert">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="translationssql" from-label="translationssql">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="evaluatecontent" from-label="evaluatecontent">
      <map:serialize type="xml" />
    </map:view>
    <map:view name="processentries" from-label="processentries">
      <map:serialize type="xml" />
    </map:view>
  </map:views>
  <!-- -->
</map:sitemap>