<?xml version="1.0" encoding="UTF-8"?>

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>
  <!--+
      | Import PMT Localized Content files from PFS.
      | The feed is a full feed so Pikachu detects deleted files/products.
      | 
      | Request parameters:
      |   reload:  Forces a reload of all content by skipping the delta with the cache.
      |   overrideCheck: When 'yes' the safety guard on too many changed and deleted products is disabled.
      +-->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMT_LocContent</ct>
        <!-- Max. percentage of changed files -->
        <max_changes_pct>50</max_changes_pct>
        <!-- Max. percentage of deleted files -->
        <max_deletions_pct>40</max_deletions_pct>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!-- Input parameters: {1} = timestamp -->
      <map:match pattern="runMain/*">
      
      <!-- Copy any manually created files to the inbox -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox.manual">
            <map:act type="copy-source" src="{cmc2:svcURL}/common/copy_dir?source={cmc2:gdir}/{global:ct}/inbox.manual&amp;target={cmc2:gdir}/{global:ct}/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.copy_manual_files.xml"/>
            </map:act>
          </map:when>
        </map:select>
      
      <map:generate src="cocoon:/readInbox"/>
        <map:transform src="xsl/continueWhenNotEmpty.xsl">
          <map:parameter name="process" value="cocoon:/runMain_start/{1}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="runMain_start/*">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox.saved">
            <map:act type="copy-source" src="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox.saved?delete-root=true">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.delete_saved_inbox.xml"/>
            </map:act>
          </map:when>
        </map:select>
        
        
      
      
        <!-- Save the inbox files to recover after tsunami warning -->
        <map:act type="copy-source" src="{cmc2:svcURL}/common/copy_dir?source={cmc2:gdir}/{global:ct}/inbox&amp;target={cmc2:gdir}/{global:ct}/inbox.saved">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.copy_inbox.xml"/>
        </map:act>
        
        <!-- Continue if copy was successful -->
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/Report.copy_inbox.xml"/>
        <map:transform src="xsl/copy_inbox_report2continue.xsl">
          <map:parameter name="process" value="cocoon:/runMain_Deletions/{1}"/>
        </map:transform>
        <!-- This will call runMainReal if there were no errors during the copy -->
        <map:transform type="include"/>
        
        <!-- This will send an email if there were errors during the copy -->
        <map:transform src="{cmc2:xslDir}/common/prepare-email.xsl">
          <map:parameter name="email-to" value="{cmc2:emailRecipient}"/>
          <map:parameter name="email-from" value="{cmc2:emailSender}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Process deletions.
          | If the number of deletions is is not too high /dir2deleteProducts proceeds to /runMain_Changes 
          +-->
      <map:match pattern="runMain_Deletions/*">
        <map:act type="copy-source" src="cocoon:/deleteInvalidCacheFiles/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.deleteInvalidCacheFiles.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/dir2deleteProducts/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.dir2deleteProducts.xml"/>
        </map:act>
        <map:aggregate element="reports">
          <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.deleteInvalidCacheFiles.xml"/>
          <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.dir2deleteProducts.xml"/>
        </map:aggregate>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="runMain_Changes/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:reload}"/>
          <map:when test="true">
            <map:act type="copy-source" src="cocoon:/runMain_Process/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.reload.xml"/>
            </map:act>
            <map:aggregate element="reports">
              <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.reload.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <!-- Remove files that have not changed -->
            <map:act type="copy-source" src="cocoon:/dir2filterFiles/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.dir2filterFiles.xml"/>
            </map:act>
            <!-- Count remaining files (changed products) and abort if there are too many -->
            <map:act type="copy-source" src="cocoon:/checkFileCount/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.checkFileCount.xml"/>
            </map:act>
            <map:aggregate element="reports">
              <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.dir2filterFiles.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.checkFileCount.xml"/>
            </map:aggregate>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} timestamp
          +-->
      <map:match pattern="deleteInvalidCacheFiles/*">
        <map:generate src="cocoon:/readCacheFromDisk"/>
        <map:transform src="xsl/sql_retrieveCurrentOCTLs.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform src="xsl/identifyInvalidCacheFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="ts" value="{1}"/>
        </map:transform>
        <!-- delete -->
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
            
      <!--+
          | Read the cache contents for a locale.
          | If the cache was read before it can be read from the cached file.
          +-->
      <map:match pattern="readCache">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/readCacheFromDisk">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="readCacheFromDisk">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/cache">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>
<!--         <map:transform src="xsl/filterCache.xsl"/> -->
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Read the inbox contents
          +-->
      <map:match pattern="readInbox">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} timestamp
          +-->      
      <map:match pattern="dir2deleteProducts/*">
        <map:aggregate element="root">
          <map:part src="cocoon:/readCache"/>
          <map:part src="cocoon:/readInbox"/>
        </map:aggregate>
        <map:transform src="xsl/dir2deleteProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:transform src="xsl/checkDeletions.xsl">
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
          <map:parameter name="threshold" value="{global:max_deletions_pct}"/>
        </map:transform>
        
        <!-- The include only triggers anything if there are too many deletions -->
        <map:transform type="include"/>
        
        <!--
          These transformations only have an effect if the number of deletions is less than the threshold.
          The deleted products' OCTL's are retrieved an saved in the inbox with their MarketingStatus set
          to 'Deleted'. The actual import will then handle the deletion. 
        -->
        <map:transform src="xsl/include2copyDeletedProductsFromCache.xsl">
          <map:parameter name="next" value="cocoon:/runMain_Changes/{1}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Copy a deleted product from the cache to the inbox.
          | The status of the product will be set to 'Deleted'.
          |
          | {1} file name of the cache file.
          +-->
      <map:match pattern="deletedProduct.*">
        <map:act type="copy-source" src="cocoon:/copyDeletedProduct.{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
        </map:act>
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <map:match pattern="copyDeletedProduct.*">
        <map:generate src="{cmc2:gdir}/{global:ct}/cache/{1}"/>
        <map:transform src="xsl/deletedProduct.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Abort the import process because too many files are removed since the previous import.
          +-->      
      <map:match pattern="abortDeletions">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform src="xsl/formatErrorReportDeletions.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:max_deletions_pct}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform src="xsl/formatWarningEmailDeletions.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="threshold" value="{global:max_deletions_pct}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} timestamp
          +-->
      <map:match pattern="dir2filterFiles/*">
        <map:generate src="cocoon:/readInbox"/>
        <map:transform src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
          <map:parameter name="cache-path" value="{cmc2:gdir}/{global:ct}/cache"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/filterFile_cleanup.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | E.g. /filterFile/RQ1280_17_nl_NL.xml
          | {1} file name
          +-->
      <map:match pattern="filterFile/*">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}"/>
            </map:aggregate>
            <map:transform src="xsl/compareCachedContent.xsl">
              <map:parameter name="temp-dir" value="{cmc2:gdir}/{global:ct}/temp"/>
              <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
            </map:transform>
            <!-- Store modified file for analysis. Only if it was modified. -->
            <map:transform type="write-source"/>
            <!-- Remove the file from the inbox. Only if it wasn't modified -->
            <map:transform src="xsl/removeFile.xsl">
              <map:parameter name="source" value="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <!-- leave file it will be moved to cache during archive-->
            <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
            <map:transform src="xsl/logNewProduct.xsl"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Check the number of changed files in the inbox.
          | {1} timestamp
          +-->
      <map:match pattern="checkFileCount/*">
        <!-- check that there are not too many files waiting to be processed -->
        <map:aggregate element="root">
          <map:part src="cocoon:/readInbox"/>
          <map:part src="cocoon:/readCache"/>
        </map:aggregate>
        <map:transform src="xsl/checkFileCount.xsl">
          <map:parameter name="threshold" value="{global:max_changes_pct}"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform src="xsl/checkFileCount_cleanup.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Stop the import because too many files were changed.
          +-->
      <map:match pattern="stop">
        <!-- too many changed files in the inbox -->
        <map:act type="copy-source" src="cocoon:/restoreInbox">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.restoreInbox.xml"/>
        </map:act>
        
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform src="xsl/formatErrorReport.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:max_changes_pct}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform src="xsl/formatWarningEmail.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="threshold" value="{global:max_changes_pct}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Restore the saved inbox if it exists -->
      <map:match pattern="restoreInbox">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox.saved">
            <!-- Delete modified inbox files -->
            <map:act type="copy-source" src="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/empty_inbox_report.xml"/>
            </map:act>
            <!-- Restore saved inbox contents -->
            <map:act type="copy-source" src="{cmc2:svcURL}/common/copy_dir?source={cmc2:gdir}/{global:ct}/inbox.saved&amp;target={cmc2:gdir}/{global:ct}/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/restore_inbox_report.xml"/>
            </map:act>
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/restore_inbox_report.xml"/>
            <!-- If the restore was successful remove the saved inbox. Otherwise send an email.-->
            <map:transform type="xslt-saxon" src="xsl/restore_inbox_report2continue.xsl">
              <map:parameter name="process" value="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox.saved?delete-root=true"/>
            </map:transform>
            <map:transform type="sendmail"/>
            <map:transform type="include"/>
          </map:when>
          <map:otherwise>
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Perform the import of all files that are in the inbox.
          | These are modified products or deleted products.
          | (Unless reload=true was specified.)
          |
          | {1} timestamp
          +-->
      <map:match pattern="go/*">
        <!-- Each batch file is prefixed with the locale-->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}?sourcedir={cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.createBatches.xml"/>
        </map:act>
        <!--  Process only files whose name starts with the locale: fileFilter=^batch_\. -->
        <map:act type="copy-source" src="{cmc2:svcURL}/store/saveSec/batch/import/processBatches/{global:ct}/{1}?fileFilter=%5Ebatch_&amp;createPlaceholder=y">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.processBatches.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.archiveFiles.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/Report.processBatches.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Called by /service/batch/import/processBatches
          |
          | {1} batchnumber
          | {2} timestamp
          | {3} filename
          |
          | Request parameters:
          | locale - the locale being processed.
          +-->
      <map:match pattern="process/*/*/**">
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
        <map:transform src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- the actual processing -->
        <map:transform src="xsl/convertProducts.xsl"/>
<!--         <map:transform src="{cmc2:xslDir}/common/productAttributes.xsl"/> -->
        <map:transform src="xsl/addRelation.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Move inbox files that were successfully imported to the cache.
          +-->
      <map:match pattern="archiveFiles">
        <map:aggregate element="root">
          <map:part src="cocoon:/inboxFiles"/>
          <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.processBatches.xml"/>
        </map:aggregate>
        <map:transform src="xsl/dir2archiveInboxFiles.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="cacheDir" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="processedDir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Read the file list from th einbox
          + -->
      <map:match pattern="inboxFiles">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
