<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMS_Raw</ct>
        <threshold>2500</threshold>
        <deletion-threshold>50</deletion-threshold>		
        <inbox-prefix>PMS</inbox-prefix>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!--+
           Here is the main pipeline that executes the batch processing.
           In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
           Input parameters: {1} = timestamp
           Request parameters: runmode (FASTLANE, indicates fastlane processing)
                               limit (x, integer value that defines the number of inbox files to process during the run)
           Output Document: Result of writing the report document to file
          +-->
      <map:match pattern="runMain/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <!-- move files from inbox to working folder (/work)-->
            <map:act type="copy-source" src="cocoon:/moveInboxFilesToWorkFolder">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/moveInboxFilesToWorkFolder_report.xml"/>
            </map:act>
          </map:when>
          <map:otherwise>
            <!--
            <map:act type="copy-source" src="cocoon:/deleteInvalidCacheFiles/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{1}.deleteInvalidCacheFiles.xml"/>
            </map:act>
            <map:act type="copy-source" src="cocoon:/dir2deleteProducts/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{1}.dir2deleteProducts.xml"/>
            </map:act>
            -->
            <map:act type="copy-source" src="cocoon:/dir2FilterFiles">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/dir2FilterFiles.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        
        <map:act type="copy-source" src="cocoon:/checkFileCount/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/checkFileCount_report.xml"/>
        </map:act>
        
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:aggregate element="reports">
              <map:part src="{cmc2:gdir}/{global:ct}/temp/checkFileCount_report.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <map:aggregate element="reports">
              <!-- map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{1}.deleteInvalidCacheFiles.xml"/ -->
              <!-- map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{1}.dir2deleteProducts.xml"/ -->
              <map:part src="{cmc2:gdir}/{global:ct}/temp/dir2FilterFiles.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/temp/checkFileCount_report.xml"/>
            </map:aggregate>  
          </map:otherwise>
        </map:select>
        
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="deleteInvalidCacheFiles/*">
        <map:act type="copy-source" src="cocoon:/readCache">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveCurrentOCTLs.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>       
        <map:transform type="xslt-saxon" src="xsl/identifyInvalidCacheFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <!-- delete -->     
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="readCache">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/cache">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="dir2FilterFiles">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="filterFile/*.xml">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
             <map:transform type="xslt-saxon" src="xsl/compareCachedContent.xsl"/>
             <map:transform type="xslt-saxon" src="xsl/removeFile.xsl">
                <map:parameter name="source" value="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
             </map:transform>
             <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <!-- leave file it will be moved to cache during archive-->
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="checkFileCount/*">
        <!-- check that there are not too many files waiting to be processed -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>		  
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/checkFileCount.xsl">
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
		  <map:parameter name="content_type" value="{global:ct}"/>
		  <map:parameter name="svcURL" value="{cmc2:svcURL}"/>  
        </map:transform>		
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
	  
      <map:match pattern="performSecondaryCheck/*">
        <!-- there appear to be too many files waiting to be processed.
             perform a secondary check on the files remaining in the inbox -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="performSecondaryComparison"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:transform type="xslt-saxon" src="xsl/secondaryCheckFileCount.xsl">
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="ts" value="{1}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="performSecondaryComparison/*.xml">
        <!-- check the remaining files but ignore certain content e.g. ProductReferences -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
            </map:aggregate>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/compareMeaningfulCachedContent.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="stop">
        <!-- too many changed files in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReport.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmail.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="go/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
            <map:when test="FASTLANE">
              <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}?sourcedir={cmc2:gdir}/{global:ct}/work">
                <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
              </map:act>
            </map:when>
            <map:otherwise> 
              <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}">
                <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
              </map:act>
            </map:otherwise>
        </map:select>      
        
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/processBatches/{global:ct}/{1}?reload=false&amp;storeURL={cmc2:svcURL}/store/saveEntryFile?createPlaceholder=y">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        </map:act>
        
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
        </map:act>
        
        <!-- -->
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="process/*/*/**">
        <!-- {1} batchnumber {2} timestamp {3} filename -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:generate src="{cmc2:gdir}/{global:ct}/work/{3}"/>
          </map:when>
          <map:otherwise>  
            <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>

        <!-- the actual processing -->
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl"/>

        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/productAttributes.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processReload/*/*/**">
        <!-- {1} batchnumber {2} timestamp {3} filename -->
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- Filter out all products that don't have masterlastmodified timestamp = OCTL lastmodified timestamp -->
        <map:transform type="xslt-saxon" src="xsl/filterProductsForReload.xsl"/>
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl"/>
        <!-- Set timestamp attributes on Product -->
        <map:transform src="{cmc2:xslDir}/common/productAttributes.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveFiles">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/work">
              <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
              <map:parameter name="depth" value="1"/>
              <map:parameter name="include" value=".*"/>
            </map:generate>
            <!-- Delete the batch_ files; they are not needed and take up too much space on the filesystem -->
            <map:transform src="xsl/dir2shell_move.xsl">
              <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/work"/>
              <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/cache"/>
            </map:transform>
          </map:when>
          <map:otherwise>
	        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
	          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
	          <map:parameter name="depth" value="1"/>
	          <map:parameter name="include" value=".*"/>
	        </map:generate>
	        <!-- Delete the batch_ files; they are not needed and take up too much space on the filesystem -->
	        <map:transform src="xsl/dir2shell_move.xsl">
	          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/inbox"/>
	          <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/cache"/>
	        </map:transform>
          </map:otherwise>
        </map:select>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
      
      <!--+
          | {1} timestamp
          +-->      
      <map:match pattern="dir2deleteProducts/*">
        <map:aggregate element="root">
          <map:part src="cocoon:/readCache"/>
          <map:part src="cocoon:/readInbox"/>
        </map:aggregate>
        
        <map:transform type="xslt-saxon" src="xsl/dir2deleteProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:transform type="xslt-saxon" src="xsl/checkDeletions.xsl">
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
          <map:parameter name="threshold" value="{global:deletion-threshold}"/>
        </map:transform>
        
        <!-- The include only triggers anything if there are too many deletions -->
        <map:transform type="include"/>
        
        <!--
          These transformations only have an effect if the number of deletions is less than the threshold.
          The deleted products' OCTL's are retrieved an saved in the inbox with their MarketingStatus set
          to 'Deleted'. The actual import will then handle the deletion. 
        -->
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveDeletedProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="none"/>
        </map:transform>       
        <map:call resource="sql"/>       
        <map:transform type="xslt-saxon" src="xsl/writeDeletedProductFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="prefix" value="{global:inbox-prefix}.{1}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Read the inbox contents for a locale
          |
          | {1} locale
          +-->
      <map:match pattern="readInbox">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--  -->
      <map:match pattern="abortDeletions">
        <!-- too many missing files (deletions) in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReportDeletions.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:deletion-threshold}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmailDeletions.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="moveInboxFilesToWorkFolder">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
          <map:parameter name="sort" value="lastmodified"/>
        </map:generate>
        <!-- Move limit files to work folder for fastlane processing -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/work"/>
          <map:parameter name="limit" value="{request-param:limit}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
