<?xml version="1.0" encoding="UTF-8"?>

<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>
  <!--+
      | Import PMT files from Prisma.
      | Because Prisma delivers full feeds only Pikachu has to detect deleted products.
      | 
      | Request parameters:
      |   threads: The number of threads to use for parallel processing.
      |            When theads is greater than 1 multiple locales will be processed simultaneously.
      |
      |   reload:  Forces a reload of all content by skipping the delta with the cache.
      |
      |   overrideCheck: When 'yes' the safety guard on too many changed and deleted products is disabled.
      +-->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMT_Translated</ct>
        <inbox-prefix>PMT_LightingProf.</inbox-prefix>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!-- Input parameters: {1} = timestamp -->
      <map:match pattern="runMain/*">
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/localised/processParallelBatches/{global:ct}?callback={cmc2:ctURL}/{global:ct}/importLocale/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/ReportMain.xml"/>
        </map:act>

        <map:generate src="{cmc2:gdir}/{global:ct}/temp/ReportMain.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Import products for one locale.
          | Called from service/batch/localised.
          |
          | {1} timestamp
          | {2} locale
          +-->
      <map:match pattern="importLocale/*/*">
        <!-- Read inbox for locale import file and process the latest one -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="{global:inbox-prefix}{2}.*\.xml"/>
          <map:parameter name="exclude" value=".*_err\.xml"/>
          <map:parameter name="sort" value="name"/>
          <map:parameter name="reverse" value="true"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/dir2importLatestFile.xsl">
          <map:parameter name="timestamp" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Import products for one locale.
          |
          | {1} timestamp
          | {2} locale
          | {3} file path
          +-->
      <map:match pattern="importFile/*/*/**">
        <map:act type="copy-source" src="cocoon:/deleteInvalidCacheFiles.{1}.{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.deleteInvalidCacheFiles.xml"/>
        </map:act>
        <!-- Split the import file into separate product files -->
        <map:act type="copy-source" src="cocoon:/splitFile/{1}/{2}/{3}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.splitFiles.xml"/>
        </map:act>
        <!-- Process only if splitFiles resulted in a subdir with products -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox/{2}">
            <!-- Detect deleted products -->
            <map:act type="copy-source" src="cocoon:/dir2deleteProducts.{1}.{2}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.dir2deleteProducts.xml"/>
            </map:act>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:reload}"/>
              <map:when test="true">
                <map:act type="copy-source" src="cocoon:/go/{1}/{2}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.reload.xml"/>
                </map:act>
                <map:act type="copy-source" src="cocoon:/cleanupInboxFiles/{2}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.cleanInbox.xml"/>
                </map:act>
                <map:aggregate element="reports">
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.deleteInvalidCacheFiles.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.dir2deleteProducts.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.reload.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.cleanInbox.xml"/>
                </map:aggregate>
              </map:when>
              <map:otherwise>
                <!-- Remove files that have not changed -->
                <map:act type="copy-source" src="cocoon:/dir2filterFiles.{1}.{2}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.dir2filterFiles.xml"/>
                </map:act>
                <!-- Count remaining files (changed products) and abort if there are too many -->
                <map:act type="copy-source" src="cocoon:/checkFileCount.{1}.{2}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.checkFileCount.xml"/>
                </map:act>
                <map:aggregate element="reports">
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.deleteInvalidCacheFiles.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.dir2deleteProducts.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.dir2filterFiles.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.checkFileCount.xml"/>
                </map:aggregate>
              </map:otherwise>
            </map:select>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/cleanupInboxFiles/{2}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.cleanupInbox.xml"/>
            </map:act>
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.cleanupInbox.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} timestamp
          | {2} locale
          +-->
      <map:match pattern="deleteInvalidCacheFiles.*.*">
        <map:generate src="cocoon:/readCacheFromDisk.{2}"/>
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveCurrentOCTLs.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/identifyInvalidCacheFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <!-- delete -->
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} timestamp 
          | {2} locale
          | {3} inbox file
          +-->
      <map:match pattern="splitFile/*/*/**">
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
        <map:transform type="stx" src="xsl/splitFiles.stx">
          <map:parameter name="filename" value="{3}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox/{2}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Read the cache contents for a locale.
          | If the cache was read before it can be read from the cached file.
          |
          | {1} locale 
          +-->
      <map:match pattern="readCache.*">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/temp/cache_{1}.xml"/>
          <map:otherwise>
            <map:act type="copy-source" src="cocoon:/readCacheFromDisk.{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/cache_{1}.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/cache_{1}.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="readCacheFromDisk.*">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}">
            <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/cache/{1}">
              <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
              <map:parameter name="depth" value="2"/>
            </map:generate>
            <map:transform type="xslt-saxon" src="xsl/filterCache.xsl">
              <map:parameter name="locale" value="{1}"/>
            </map:transform>
          </map:when>
          <map:otherwise>
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Read the inbox contents for a locale
          |
          | {1} locale
          +-->
      <map:match pattern="readInbox.*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox/{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} timestamp
          | {2} locale
          +-->      
      <map:match pattern="dir2deleteProducts.*.*">
        <map:aggregate element="root">
          <map:part src="cocoon:/readCache.{2}"/>
          <map:part src="cocoon:/readInbox.{2}"/>
        </map:aggregate>
        <map:transform type="xslt-saxon" src="xsl/dir2deleteProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:transform type="xslt-saxon" src="xsl/checkDeletions.xsl">
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_deletions}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        
        <!-- The include only triggers anything if there are too many deletions -->
        <map:transform type="include"/>
        
        <!--
          These transformations only have an effect if the number of deletions is less than the threshold.
          The deleted products' OCTL's are retrieved an saved in the inbox with their MarketingStatus set
          to 'Deleted'. The actual import will then handle the deletion. 
        -->
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveDeletedProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/writeDeletedProductFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox/{2}"/>
          <map:parameter name="prefix" value="{global:inbox-prefix}{2}.{1}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} locale
          +-->      
      <map:match pattern="abortDeletions.*">
        <!-- too many missing files (deletions) in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReportDeletions.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_deletions}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="locale" value="{1}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmailDeletions.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_deletions}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{1}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} timestamp
          | {2} locale
          +-->
      <map:match pattern="dir2filterFiles.*.*">
        <map:generate src="cocoon:/readInbox.{2}"/>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
          <map:parameter name="cache-path" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="locale" value="{2}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform type="xslt-saxon" src="xsl/filterFile_cleanup.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | E.g. /filterFile/PMT_LightingProf.en_GB.20091012160000.000000000000_EU.xml
          | {1} prefix
          | {2} locale
          | {3} product id
          +-->
      <map:match pattern="filterFile/*.*.*.xml">
        <map:select type="resource-exists">
          <map:when test="{request-param:path}/{3}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{2}/{1}.{2}.{3}.xml"/>
              <map:part src="{request-param:path}/{3}.xml"/>
            </map:aggregate>
            <map:transform type="xslt-saxon" src="xsl/compareCachedContent.xsl">
              <map:parameter name="temp-dir" value="{cmc2:gdir}/{global:ct}/temp/{2}"/>
              <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
            </map:transform>
            <!-- Store modified file for analysis -->
            <map:transform type="write-source"/>
            <map:transform type="xslt-saxon" src="xsl/removeFile.xsl">
              <map:parameter name="source" value="{cmc2:gdir}/{global:ct}/inbox/{2}/{1}.{2}.{3}.xml"/>
            </map:transform>
            <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <!-- leave file it will be moved to cache during archive-->
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} timestamp
          | {2} locale
          +-->
      <map:match pattern="checkFileCount.*.*">
        <!-- check that there are not too many files waiting to be processed -->
        <map:aggregate element="root">
          <map:part src="cocoon:/readInbox.{2}"/>
          <map:part src="cocoon:/readCache.{2}"/>
        </map:aggregate>
        <map:transform type="xslt-saxon" src="xsl/checkFileCount.xsl">
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_changes}"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="locale" value="{2}"/>
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:transform type="xslt-saxon" src="xsl/checkFileCount_cleanup.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | {1} locale
          +-->
      <map:match pattern="stop/*">
        <!-- too many changed files in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReport.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_changes}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="locale" value="{1}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmail.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="rel-count" value="{request-param:rel-count}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="{1}"/>
          <map:parameter name="threshold" value="{cmc2:PMT_Translated_max_allowed_changes}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | {1} timestamp
          | {2} locale
          +-->
      <map:match pattern="go/*/*">
        <!-- Each batch file is prefixed with the locale-->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}?batchPrefix={2}_&amp;sourcedir={cmc2:gdir}/{global:ct}/inbox/{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.createBatches.xml"/>
        </map:act>
        <!--  Process only files whose name starts with the locale: fileFilter=^{2}_batch_\. -->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/processBatches/{global:ct}/{1}?reload=false&amp;fileFilter=%5E{2}_batch_&amp;storeURL={cmc2:svcURL}/store/deltaSaveEntryFile&amp;locale={2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.processBatches.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/archiveFiles/{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/Report.{2}.archiveFiles.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/Report.{2}.processBatches.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | Called by /service/batch/import/processBatches
          |
          | {1} batchnumber
          | {2} timestamp
          | {3} filename
          |
          | Request parameters:
          | locale - the locale being processed.
          +-->
      <map:match pattern="process/*/*/**">
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{request-param:locale}/{3}"/>
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- the actual processing -->
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl"/>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/productAttributes.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Move inbox files that were successfully imported to the cache.
          | {1} locale
          +-->
      <map:match pattern="archiveFiles/*">
        <map:aggregate element="root">
          <map:part src="cocoon:/inboxFiles/{1}"/>
          <map:part src="{cmc2:gdir}/{global:ct}/temp/Report.{1}.processBatches.xml"/>
        </map:aggregate>
        <map:transform src="xsl/dir2archiveInboxFiles.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/cache/{1}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="inboxFiles/*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox/{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | {1} locale
          +-->
      <map:match pattern="cleanupInboxFiles/*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="2"/>
          <map:parameter name="include" value="{1}"/>
        </map:generate>
        <map:transform src="xsl/dir2shell_cleanup.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="archive-dir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
