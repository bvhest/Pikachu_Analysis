<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:components>
    <map:transformers>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
    <map:selectors>
      <map:selector name="parameter" logger="sitemap.selector.parameter" src="org.apache.cocoon.selection.ParameterSelector"/>
    </map:selectors>
  </map:components>

  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMT_Translated</ct>
      </global-variables>
    </map:component-configurations>
    <map:pipeline type="noncaching">
     <!--+
       |
       |  Here is the main pipeline that executes the batch processing.
       |  In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
       |  Input parameters: {1} = timestamp
       |
       |  This sitemap differs from regular content type sitemaps because the content type has both
       |  an export and an import pipeline. Both are combined in one runMain pipeline that is triggered
       |  both by the needsprocessing_flag and by a file coming back from translation that needs to be imported.
       |
       +-->

    <map:match pattern="runMain/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:locale}"/>
          <map:when test="">          
            <!-- check for runimport request parameter -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:runimport}"/>
              <map:when test="yes">
                <!-- Run only an import -->
                <map:act type="copy-source" src="cocoon:/runMainImport/{1}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                </map:act>
                <!-- Run the direct import -->
                <map:act type="copy-source" src="cocoon:/runMainDirectImport/{1}">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                </map:act>
                <map:aggregate element="reports">
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                </map:aggregate>
              </map:when>
              <map:otherwise>            
                <!-- check for runexport request parameter -->
                <map:select type="parameter">
                  <map:parameter name="parameter-selector-test" value="{request-param:runexport}"/>
                  <map:when test="yes">
                    <!-- This is the weekly export with the REAL translation requests -->
                    <!-- Run the import -->
                    <map:act type="copy-source" src="cocoon:/runMainImport/{1}">
                      <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                    </map:act>
                    <!-- Run the direct import -->
                    <map:act type="copy-source" src="cocoon:/runMainDirectImport/{1}">
                      <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                    </map:act>
                    <!-- Run the CL_QUERY export 
                       | Obesitas : removed the generation of Query files from the Real translation run as this means 
                       | that the same product/locale/category combination is sent out twice at the same time. Query 
                       | files should be sent out first, and real translation requests only in those cases where the 
                       | Query translation was incomplete.
                       |-->
                    <!--map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_QUERY">
                      <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/>
                    </map:act-->
                    <!-- Run the CL_CMC (Real) export -->
                    <map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_CMC&amp;phase2=no">
                      <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Real_Batches_report.xml"/>
                    </map:act>
                    <map:aggregate element="reports">
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                      <!--map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/-->
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Real_Batches_report.xml"/>
                    </map:aggregate>
                  </map:when>
                  <map:otherwise>
                    <!-- check for runcatalogexport request parameter -->
                    <map:select type="parameter">
                      <map:parameter name="parameter-selector-test" value="{request-param:runcatalogexport}"/>
                      <map:when test="yes">
                        <!-- This is a catalog.xml request by CMST.
                           | Run the catalog.xml export as a CL_CMC export.
                           -->
                        <map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_CMC&amp;phase2=no&amp;xexporttype=Catalog&amp;archiveCatalogFile=yes">
                         <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Catalog_Batches_report.xml"/>
                        </map:act>
                        <map:aggregate element="reports">
                          <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Catalog_Batches_report.xml"/>
                        </map:aggregate>
                      </map:when>
                      <map:otherwise>
                        <!-- check for runphase2export request parameter -->
                        <map:select type="parameter">
                          <map:parameter name="parameter-selector-test" value="{request-param:runphase2export}"/>
                          <map:when test="yes">
                            <!-- Run the CL_CMC (Real) export for Phase 2 translations (only non-validated translations outstanding) -->
                            <map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_CMC&amp;phase2=yes">
                              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Phase2_Batches_report.xml"/>
                            </map:act>
                            <map:aggregate element="reports">
                              <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Phase2_Batches_report.xml"/>
                            </map:aggregate>
                          </map:when>
                          <map:otherwise>
                            <!-- This is the standard daily/intradaily run -->
                            <!-- Check for a catalog.xml file in the inbox: Run a CL_CMC export if one is present, and set the request parameter 'runcatalogexport' to 'yes' -->
                            <map:select type="resource-exists">
                              <map:when test="{cmc2:gdir}/{global:ct}/inbox/catalog.xml">
                                <!-- CHECK id possible: ignore the Query export as it generates translation requests for exactly the same product/locale/category combinations -->
                                <!--map:act type="copy-source" src="cocoon:/runMainExport/{1}?runcatalogexport=yes&amp;workflow=CL_QUERY&amp;xexporttype=Catalog">
                                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Catalog_Batches_report.xml"/>
                                </map:act-->
                                <map:act type="copy-source" src="cocoon:/runMainExport/{1}?runcatalogexport=yes&amp;workflow=CL_CMC&amp;xexporttype=Catalog&amp;archiveCatalogFile=yes">
                                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Catalog_Batches_report.xml"/>
                                </map:act>
                              </map:when>
                            </map:select>
                            <!-- Run the import -->
                            <map:act type="copy-source" src="cocoon:/runMainImport/{1}">
                              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                            </map:act>
                            <!-- Run the direct import -->
                            <map:act type="copy-source" src="cocoon:/runMainDirectImport/{1}">
                              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                            </map:act>
                            <!-- Now run the CL_QUERY export -->
                            <map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_QUERY&amp;phase2=no">
                              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/>
                            </map:act>
                            <map:select type="resource-exists">
                              <map:when test="{cmc2:gdir}/{global:ct}/inbox/catalog.xml">
                                <map:aggregate element="reports">
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Catalog_Batches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Catalog_Batches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/>
                                </map:aggregate>
                              </map:when>
                              <map:otherwise>
                                <map:aggregate element="reports">
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
                                  <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/>
                                </map:aggregate>
                              </map:otherwise>
                            </map:select>
                          </map:otherwise>
                        </map:select>
                      </map:otherwise>
                    </map:select>
                  </map:otherwise>
                </map:select>
              </map:otherwise>
            </map:select>                            
          </map:when>
          <map:otherwise>
            <!-- This is a priority translation request -->
            <map:act type="copy-source" src="cocoon:/runMainPriorityExport/{1}?locale={request-param:locale}&amp;ctn={request-param:ctn}&amp;workflow=CL_CMC">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/runMainPriorityExport_report.xml"/>
            </map:act>
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/runMainPriorityExport_report.xml"/>
          </map:otherwise>
        </map:select>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="runMain/__*_*__**/*">
      <!-- runMain__{locale}__{ctn}/{timestamp} -->
      <map:act type="copy-source" src="cocoon:/runMainPriorityExport/{4}?locale={1}_{2}&amp;ctn={3}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/runMainPriorityExport_report.xml"/>
      </map:act>
      <map:generate src="{cmc2:gdir}/{global:ct}/temp/runMainPriorityExport_report.xml"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="runMainExport/*">
      <!-- Reset flags to needsprocessing=1 for all translation requests that have not returned within 3 days before batching OCTLs for export.
         -->
      <map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/resetNeedsProcessingFlags/{global:ct}/{1}/export/{request-param:workflow}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/resetNeedsProcessingFlagsFor{request-param:xexporttype}{request-param:workflow}_report.xml"/>
      </map:act>
      <!-- Batch OCTLs for export -->
      <map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/createExportBatches/{global:ct}/{1}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/create_{request-param:xexporttype}{request-param:workflow}_ExportBatches_report.xml"/>
      </map:act>
      <!-- Export -->
      <map:act type="copy-source" src="cocoon:/PostProcess/batch/translation/processExportBatches/{global:ct}/{1}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/process_{request-param:xexporttype}{request-param:workflow}_ExportBatches_report.xml"/>
      </map:act>
      <map:aggregate element="reports">
        <map:part src="{cmc2:gdir}/{global:ct}/temp/resetNeedsProcessingFlagsFor{request-param:xexporttype}{request-param:workflow}_report.xml"/>
        <map:part src="{cmc2:gdir}/{global:ct}/temp/create_{request-param:xexporttype}{request-param:workflow}_ExportBatches_report.xml"/>
        <map:part src="{cmc2:gdir}/{global:ct}/temp/process_{request-param:xexporttype}{request-param:workflow}_ExportBatches_report.xml"/>
      </map:aggregate>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="runMainPriorityExport/*">
      <!-- Priority: Go straight to createExportBatches/*/*/*/* -->
      <map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/createExportBatches/{global:ct}/{request-param:locale}/null/{1}?priority=1&amp;locale={request-param:locale}&amp;ctn={request-param:ctn}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createExportBatches_report.xml"/>
      </map:act>
      <map:act type="copy-source" src="cocoon:/PostProcess/batch/translation/processExportBatches/{global:ct}/{1}?priority=1&amp;locale={request-param:locale}&amp;ctn={request-param:ctn}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processExportBatches_report.xml"/>
      </map:act>
      <map:aggregate element="reports">
        <map:part src="{cmc2:gdir}/{global:ct}/temp/createExportBatches_report.xml"/>
        <map:part src="{cmc2:gdir}/{global:ct}/temp/processExportBatches_report.xml"/>
      </map:aggregate>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="PostProcess/**">
      <map:generate src="{cmc2:svcURL}/{1}"/>
      <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
        <map:parameter name="process" value="cocoon:/PostProcessEntryFile"/>
      </map:transform>
      <map:transform type="cinclude"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="PostProcessEntryFile/**">
      <map:generate src="{1}"/>
      <!-- do all post processing here -->
      <map:transform src="xsl/include_global.xsl">
        <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
        <map:parameter name="xmlDir" value="{cmc2:xmlDir}/"/>
        <map:parameter name="test" value="{1}/"/>
      </map:transform>
      <map:transform type="cinclude"/>
      <map:transform src="xsl/formatTranslations.xsl">
        <map:parameter name="workflow" value="{request-param:workflow}"/>
      </map:transform>
      <map:transform src="xsl/clean.xsl"/>
      <map:transform src="xsl/getRelatedLocalesForEntry.xsl">
          <!-- runcatalogexport will only have a value in the case of a catalog.xml request -->
          <map:parameter name="runcatalogexport" value="{request-param:runcatalogexport}"/>
          <map:parameter name="phase2" value="{request-param:phase2}"/>
          <map:parameter name="workflow" value="{request-param:workflow}"/>
      </map:transform>
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
      
      <map:transform src="xsl/includeRelatedLocalesOnEntry.xsl"/>
      <map:transform src="xsl/batchProducts.xsl">
        <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/temp/"/>
        <map:parameter name="tempdir" value="{cmc2:gdir}/{global:ct}/temp/"/>
        <map:parameter name="maxcount" value="20000"/>
        <map:parameter name="runcatalogexport" value="{request-param:runcatalogexport}"/>
        <map:parameter name="catalogfiledir"  value="{cmc2:gdir}/{global:ct}/inbox"/>
      </map:transform>
      <!-- now save file -->
      <map:transform type="xslt-saxon" src="xsl/writeEntry.xsl">
        <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
        <map:parameter name="prefix" value="ex_"/>
      </map:transform>
      <map:transform type="write-source"/>
      <map:transform src="xsl/include_writeSource2process.xsl">
        <map:parameter name="process" value="{cmc2:svcURL}/store/exportTranslationEntryFile"/>
        <map:parameter name="runcatalogexport" value="{request-param:runcatalogexport}"/>
      </map:transform>
      <map:transform type="cinclude"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="runMainDirectImport/*">
      <map:act type="copy-source" src="cocoon:/DirectImport/batch/translation/processDirectBatches/{global:ct}/{1}/1">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processDirectImportBatches_report.xml"/>
      </map:act>
      <map:generate src="{cmc2:gdir}/{global:ct}/temp/processDirectImportBatches_report.xml"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="DirectImport/**">
      <map:generate src="{cmc2:svcURL}/{1}"/>
      <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
        <map:parameter name="process" value="cocoon:/DirectImportEntryFile"/>
      </map:transform>
      <map:transform type="cinclude"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="DirectImportEntryFile/**">
      <map:generate src="{1}"/>
      <!-- Do all post processing here -->
      <map:transform src="xsl/clean.xsl"/>
      <map:transform src="xsl/reformatForImport.xsl"/>
      <!-- now save file -->
      <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
        <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
        <map:parameter name="prefix" value="di_"/>
      </map:transform>
      <map:transform type="write-source"/>
      <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
        <map:parameter name="process" value="{cmc2:svcURL}/store/saveEntryFile"/>
      </map:transform>
      <map:transform type="cinclude"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="runMainImport/*">
      <!-- process CL_QUERY files first -->
      <map:act type="copy-source" src="{cmc2:svcURL}/store/importTranslation/batch/translation/processImportBatches/{global:ct}/{1}?excludeworkflow=CL_CMC">
      <!--map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/processImportBatches/{global:ct}/{1}?excludeworkflow=CL_CMC"-->
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processNonCL_CMCImportBatches_report.xml"/>
      </map:act>
      <!-- process non-CL_QUERY files -->      
      <map:act type="copy-source" src="{cmc2:svcURL}/store/importTranslation/batch/translation/processImportBatches/{global:ct}/{1}?includeworkflow=CL_CMC">
      <!--map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/processImportBatches/{global:ct}/{1}?includeworkflow=CL_CMC"-->
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processCL_CMCImportBatches_report.xml"/>
      </map:act>
      <!-- aggregate reports -->
      <map:act type="copy-source" src="cocoon:/generateImportBatchesReport">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
      </map:act>
      <map:act type="copy-source" src="cocoon:/generateErrorsEmail">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/ErrorsReport.xml"/>
      </map:act>
      <map:act type="copy-source" src="cocoon:/archiveFiles/{1}">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
      </map:act>
      <map:aggregate element="reports">
        <map:part src="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
        <map:part src="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
      </map:aggregate>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="generateImportBatchesReport">
      <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/temp">
        <map:parameter name="depth" value="1"/>
        <map:parameter name="include" value="^process.*ImportBatches_report.xml"/>
      </map:generate>
      <map:transform type="xslt-saxon" src="{cmc2:svcDir}/batch/translation/xsl/generateImportBatchesReport.xsl">
        <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/temp"/>
      </map:transform>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="generateErrorsEmail">
      <map:generate type="xpathdirectory" src="{cmc2:gdir}/{global:ct}/temp" label="step1">
        <map:parameter name="xpath" value="/entries[entry/result/error]"/>
        <map:parameter name="xmlFiles" value="^im.*\.xml"/>
        <map:parameter name="include" value="^im_.*"/>
      </map:generate>
      <map:transform type="xslt-saxon" src="xsl/generateErrorsEmail.xsl">
        <map:parameter name="server" value="{cmc2:cocoonServer}"/>
        <map:parameter name="sender" value="{cmc2:emailSender}"/>
        <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
      </map:transform>
      <map:transform type="sendmail"/>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="archiveFiles/*">
      <map:act type="copy-source" src="cocoon:/archiveFilesSub/{1}?action=zip">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveFilesZip_report.xml"/>
      </map:act>    
      <map:act type="copy-source" src="cocoon:/archiveFilesSub/{1}?action=delete">
        <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveFilesDelete_report.xml"/>
      </map:act>         
      <map:aggregate element="reports">
        <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveFilesZip_report.xml"/>
        <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveFilesDelete_report.xml"/>
      </map:aggregate>  
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->  
    <map:match pattern="archiveFilesSub/*">    
      <!-- Archive only catalog.xml files with ts earlier than runts, and files processed by the import (i.e. in processImportBatches_report.xml) -->
      <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
        <map:parameter name="depth" value="1"/>
        <map:parameter name="include" value=".*catalog.*\.xml"/>
        <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
      </map:generate>      
      <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/generateArchiveFileList.xsl">
        <map:parameter name="processFilePath" value="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
        <map:parameter name="ts" value="{1}"/>
        <map:parameter name="ct" value="{global:ct}"/>
        <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/processed"/>
        <map:parameter name="action" value="{request-param:action}"/>
        <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
      </map:transform>
      <map:select type="parameter">
        <map:parameter name="parameter-selector-test" value="{request-param:action}"/>
        <map:when test="zip">      
          <map:transform type="cinclude"/>      
        </map:when>
        <map:otherwise>
          <map:transform type="shell"/>
        </map:otherwise>
      </map:select>
      <map:serialize type="xml"/>      
    </map:match>

    <!-- -->    
    <map:match pattern="process/*_*/*/*/**">
    <!-- {1} and {2} localisation {3} timestamp {4} category {5} objectId -->
       <map:generate src="{cmc2:xmlDir}/empty.xml"/>
       <map:transform type="xslt-saxon" src="xsl/create_entry_record.xsl">
         <map:parameter name="ct_in" value="PMT_Localised"/>
         <map:parameter name="ct_out" value="{global:ct}"/>
         <map:parameter name="l_in" value="master_{2}"/>
         <map:parameter name="l_out" value="{1}_{2}"/>
         <map:parameter name="ts" value="{3}"/>
         <map:parameter name="category" value="{4}"/>
         <map:parameter name="o" value="{5}"/>
         <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
       </map:transform>
       <!-- Execute the include -->
       <map:transform type="include"/>
       <!-- Include categorization information -->
       <map:transform src="xsl/include_content.xsl">
         <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
       </map:transform>
       <!-- Execute the include -->
       <map:transform type="cinclude"/>
         <!-- Convert the Assets -->
         <map:transform src="xsl/convert_assets.xsl"/>
       <!-- Clean content and set octl-attributes elements -->
       <map:transform src="xsl/process_entries.xsl"/>
       <!-- Swap octl-attributes timestamps into Product attributes -->
       <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/productAttributes.xsl"/>
       <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    <map:match pattern="test">
      <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform type="xslt-saxon" src="xsl/test.xsl">
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
          <map:parameter name="locale" value="{request-param:locale}"/>
          <map:parameter name="ctn" value="{request-param:ctn}"/>
        </map:transform>
      <map:serialize type="xml"/>
    </map:match>

    <!-- -->
    </map:pipeline>
  </map:pipelines>
</map:sitemap>