<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMT_Raw</ct>
      </global-variables>
    </map:component-configurations>
    
    <!--
      Import PMT product files.
      
      The import performs a delta by comparing the files in the inbox with the files in the cache directory.
      It also checks on how many files were deleted and modified.
      If either of these are too high the import is cancelled and a warning email us sent.
      The thresholds are specified in the cmc2.properties file.
      
      Request parameters:
      split:            if true the file(s) in the inbox will be split into one file per products, before the import starts.
      runmode:          (FASTLANE, indicates fastlane processing)
      limit:            (x, integer value that defines the maximum number of inbox files to process during the run)
      processDeletions: When 'true' the contents of the inbox are assumed to form a full feed.
                        Any products that are in the cache and not in the inbox are marked as deleted.
      purgecache:       When 'true' remove products from the cache that have status Deleted in the DB.
      overrideCheck:    When 'yes' the threshold on max number of deleted and changed products is ignored.

      Other parameters:
        cmc2:PMT_Raw_max_allowed_deletions  Maximum of deleted products that will be processed without blocking.
        cmc2:PMT_Raw_max_allowed_changes    Maximum number of changes products that will be processed without blocking.
      
    -->
    <map:pipeline type="noncaching">
      <!--+
           In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
            {1} = timestamp
          +-->
      <map:match pattern="runMain/*">
        <!-- Delete previously copied inbox -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox.saved">
            <map:act type="copy-source" src="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox.saved?delete-root=true">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/delete_saved_inbox_report.xml"/>
            </map:act>
          </map:when>
        </map:select>
        
        <!-- Copy the inbox to restore it in case of a tsunami block -->
        <map:select type="parameter">
          <!-- If we split the inbox files we need to restore the originals when there is a tsunami warning -->
          <map:parameter name="parameter-selector-test" value="{request-param:split}"/>
          <map:when test="true">
            <!-- Save the inbox files to recover after tsunami warning -->
            <map:act type="copy-source" src="{cmc2:svcURL}/common/copy_dir?source={cmc2:gdir}/{global:ct}/inbox&amp;target={cmc2:gdir}/{global:ct}/inbox.saved">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/copy_inbox_report.xml"/>
            </map:act>
            <!-- Continue if copy was successful -->
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/copy_inbox_report.xml"/>
            <map:transform type="xslt-saxon" src="xsl/copy_inbox_report2continue.xsl">
              <map:parameter name="process" value="cocoon:/runMainReal/{1}"/>
            </map:transform>
            <!-- This will call runMainReal if there were no errors during the copy -->
            <map:transform type="include"/>
            
            <!-- This will send an email if there were errors during the copy -->
            <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/prepare-email.xsl">
              <map:parameter name="email-to" value="{cmc2:emailRecipient}"/>
              <map:parameter name="email-from" value="{cmc2:emailSender}"/>
            </map:transform>
            <map:transform type="sendmail"/>
          </map:when>
          <map:otherwise>
            <map:generate src="cocoon:/runMainReal/{1}"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="runMainReal/*">
        <!-- Split inbox files if requested -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:split}"/>
          <map:when test="true">
            <map:act type="copy-source" src="cocoon:/splitFile/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/splitFile_report.xml"/>
            </map:act>
          </map:when>
        </map:select>
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/outbox/reload.xml">
            <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
            </map:act>
            <map:act type="copy-source" src="{cmc2:svcURL}/store/import/batch/import/processBatches/{global:ct}/{1}?reload=true">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
            </map:act>
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
            <map:serialize type="xml"/>
          </map:when>
          <map:otherwise>
            <!--
              FASTLANE/BATCH specific processes
            -->
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
              <map:when test="FASTLANE">
                <!-- move files from inbox to working folder (/work)-->
                <map:act type="copy-source" src="cocoon:/moveInboxFilesToWorkFolder">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/moveInboxFilesToWorkFolder_report.xml"/>
                </map:act>
                <!-- Run processes to create ProductMasterData catalog and placeholders -->
                <map:act type="copy-source" src="cocoon://pipes/Main/runPipelineCollection/pmd_catalog_fl">
                  <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_pmd_catalog_fl_report.xml"/>
                </map:act>
              </map:when>
              <map:otherwise>
                <!-- Purge the cache if requested -->
                <map:select type="parameter">
                  <map:parameter name="parameter-selector-test" value="{request-param:purgecache}"/>
                  <map:when test="true">
                    <map:act type="copy-source" src="cocoon:/deleteInvalidCacheFiles/{1}">
                      <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/deleteInvalidCacheFiles_report.xml"/>
                    </map:act>
                  </map:when>
                </map:select>
              </map:otherwise>
            </map:select>  
            
            <map:act type="copy-source" src="cocoon:/dir2findChanges.{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/dir2findChanges_report.xml"/>
            </map:act>
            <map:select type="parameter">
              <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
              <map:when test="FASTLANE">
                <map:aggregate element="reports">
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/moveInboxFilesToWorkFolder_report.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/run_pmd_catalog_fl_report.xml"/>
                  <map:part src="{cmc2:gdir}/{global:ct}/temp/dir2findChanges_report.xml"/>
                </map:aggregate>
              </map:when>
              <map:otherwise>
                <map:select type="parameter">
                  <map:parameter name="parameter-selector-test" value="{request-param:purgecache}"/>
                  <map:when test="true">
                    <map:aggregate element="reports">
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/deleteInvalidCacheFiles_report.xml"/>
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/dir2findChanges_report.xml"/>
                    </map:aggregate>
                  </map:when>
                  <map:otherwise>
                    <map:aggregate element="reports">
                      <map:part src="{cmc2:gdir}/{global:ct}/temp/dir2findChanges_report.xml"/>
                    </map:aggregate>
                  </map:otherwise>
                </map:select>
              </map:otherwise>
            </map:select>
            
            <map:serialize type="xml"/>
          </map:otherwise>
        </map:select>
      </map:match>

      <!--+
          | Split the most recent file in the inbox and remove the originals.
          |
          | {1} timestamp
          +-->
      <map:match pattern="splitFile/*">
        <!-- Read inbox for import file and process the latest one -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
          <map:parameter name="sort" value="name"/>
          <map:parameter name="reverse" value="true"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/dir2processLatestFile.xsl">
          <map:parameter name="timestamp" value="{1}"/>
          <map:parameter name="process" value="cocoon:/splitFile"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform type="xslt-saxon" src="xsl/dir2cleanupFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="archive-dir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Split the specified file in the inbox.
          |
          | {1} timestamp
          | {2} filename
          +-->
      <map:match pattern="splitFile/*/**">
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{2}"/>
        <map:transform type="stx" src="xsl/splitFiles.stx">
          <map:parameter name="filename" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="deleteInvalidCacheFiles/*">
        <map:act type="copy-source" src="cocoon:/readCache">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_retrieveCurrentOCTLs.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/identifyInvalidCacheFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="pubSystemId" value="{cmc2:pubSystemId}"/>
        </map:transform>
        <!-- delete -->
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="readCache">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/cache">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="readInbox">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Find changes in the feed.
          | {1} timestamp
          +-->      
      <map:match pattern="dir2findChanges.*">				
        <!-- only detect and process deletions when processDeletions=true -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:processDeletions}"/>
            <map:when test="true">
   	          <map:aggregate element="root">
   	            <map:part src="cocoon:/dir2findDeletedProducts.{1}"/>
   	            <map:part src="cocoon:/dir2findChangedProducts.{1}"/>
   	          </map:aggregate>
            </map:when>
            <map:otherwise>
              <map:aggregate element="root">
                <map:part src="cocoon:/dir2findChangedProducts.{1}"/>
              </map:aggregate>
            </map:otherwise>
        </map:select>          
        <map:transform type="xslt-saxon" src="xsl/checkChanges.xsl">
          <map:parameter name="deletions-threshold" value="{cmc2:PMT_Raw_max_allowed_deletions}"/>
          <map:parameter name="changes-threshold" value="{cmc2:PMT_Raw_max_allowed_changes}"/>
          <map:parameter name="override" value="{request-param:overrideCheck}"/>
          <map:parameter name="ct-dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="timestamp" value="{1}"/>
		  <map:parameter name="content_type" value="{global:ct}"/>
		  <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <!-- Send mail and write error report in case of tsunami -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/prepare-email.xsl">
          <map:parameter name="email-to" value="{cmc2:emailRecipient}"/>
          <map:parameter name="email-from" value="{cmc2:emailSender}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:transform type="write-source"/>

        <!-- Delete unchanged product files -->
        <map:transform type="shell"/>

        <!-- Continue the run -->
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Find products that were removed from the feed.
          | {1} timestamp
          +-->      
      <map:match pattern="dir2findDeletedProducts.*">
        <map:aggregate element="report">
          <map:part src="cocoon:/readCache"/>
          <map:part src="cocoon:/readInbox"/>
        </map:aggregate>
        <map:transform type="xslt-saxon" src="xsl/dir2deleteProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--+
          | Find products that were modified since the last feed.
          | {1} timestamp
          +-->      
      <map:match pattern="dir2findChangedProducts.*">
        <map:generate src="cocoon:/readInbox"/>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
        </map:transform>
        <map:transform type="include"/>
        <!--
          Count the number of changed products and perform a second comparison
          to determine valid changes 
        -->
        <map:transform type="xslt-saxon" src="xsl/include2performSecondaryComparison.xsl">
          <map:parameter name="threshold" value="{cmc2:PMT_Raw_max_allowed_changes}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:transform type="xslt-saxon" src="xsl/mergeChangedProductsReport.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
            
      <map:match pattern="filterFile/*.xml">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
            </map:aggregate>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/compareCachedContent_{cmc2:pubSystemId}.xsl">
          <map:parameter name="systemId" value="{cmc2:pubSystemId}"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="performSecondaryComparison/*.xml">
        <!-- check the remaining files but ignore certain content e.g. ProductReferences -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
            </map:aggregate>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/compareMeaningfulCachedContent_{cmc2:pubSystemId}.xsl"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
         Move a product file from the cache to the inbox
         and set its MarketingStatus to 'Deleted'.
         
         {1} filename
      -->
      <map:match pattern="prepareDeletedProduct/*.xml">
        <map:generate src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
        <map:transform type="xslt-saxon" src="xsl/writeDeletedProductFiles.xsl">
          <map:parameter name="target-path" value="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
        Perform the import.
        
        {1} timestamp
      -->
      <map:match pattern="go/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}?sourcedir={cmc2:gdir}/{global:ct}/work">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
            </map:act>
          </map:when>
          <map:otherwise>
            <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
              
        <map:act type="copy-source" src="cocoon:/PostProcess/batch/import/processBatches/{global:ct}/{1}?reload=false">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/triggerTranslations">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/triggerTranslations.xml"/>
        </map:act>
        <map:act type="copy-source" src="cocoon:/writeCatalogs">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/writeCatalogs_report.xml"/>
        </map:act>

        <!-- -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/temp/runCatalogProcess.xml">
            <map:act type="copy-source" src="{cmc2:svcURL}/processControl/runProcess/catalog_definition">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_catalog_definition_report.xml"/>
            </map:act>
            <map:act type="copy-source" src="{cmc2:svcURL}/processControl/runProcess/catalog_configuration">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_catalog_configuration_report.xml"/>
            </map:act>
            <map:act type="copy-source" src="{cmc2:svcURL}/processControl/runProcess/catalog_log">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_catalog_log_report.xml"/>
            </map:act>
          </map:when>
        </map:select>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>

        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:act type="copy-source" src="cocoon:/archiveFiles/work">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
            </map:act>
          </map:when>
          <map:otherwise>  
            <map:act type="copy-source" src="cocoon:/archiveFiles/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
            </map:act>
          </map:otherwise>
        </map:select>
        
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="process/*/*/**">
        <!-- {1} batchnumber {2} timestamp {3} filename -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:generate src="{cmc2:gdir}/{global:ct}/work/{3}"/>
          </map:when>
          <map:otherwise>  
            <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
          </map:otherwise>
        </map:select>
        
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>

        <!-- the actual processing -->
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl">
          <map:parameter name="system" value="{cmc2:pubSystemId}"/>
        </map:transform>

        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/productAttributes.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->	  
      <map:match pattern="PostProcess/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/PostProcessEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="PostProcessEntryFile/**">
        <map:generate src="{1}"/>
	   <map:transform type="xslt-saxon" src="xsl/convertKVP.xsl"> 
	      <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="write-source"/>	
        <!-- Save file -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="prefix" value="p_"/>
        </map:transform>
        <map:transform type="write-source"/>  
         <!-- write file to store --> 
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/deltaSaveEntryFile"/>
          <!-- create placeholder, as there is not a keyvaluepairs catalog -->
          <map:parameter name="createPlaceholder" value="y"/>
        </map:transform>                
        <map:transform type="cinclude"/>        
        <map:serialize type="xml"/>        
      </map:match>
	<!-- -->	
      <map:match pattern="processReload/*/*/**">
        <!-- {1} batchnumber {2} timestamp {3} filename -->
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- Filter out all products that don't have masterlastmodified timestamp = OCTL lastmodified timestamp -->
        <map:transform type="xslt-saxon" src="xsl/filterProductsForReload.xsl"/>
        <map:transform type="xslt-saxon" src="xsl/convertProducts.xsl"/>
        <!-- Set timestamp attributes on Product -->
        <map:transform src="{cmc2:xslDir}/common/productAttributes.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <map:match pattern="triggerTranslations">
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_triggerTranslations.xsl"/>
        <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/groupByCountry.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <map:match pattern="writeCatalogs">
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/triggerTranslations.xml"/>
        <map:transform type="xslt-saxon" src="xsl/writeCatalogs.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        Archive files from a source folder to the cache folder.
        {1} source folder (relative to ct directory)
      
        Only move inbox files that were successfully imported to the cache.
      -->
      <map:match pattern="archiveFiles/*">
        <map:aggregate element="root">
          <map:part src="cocoon:/inboxFiles/{1}"/>
          <map:part src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        </map:aggregate>
        <map:transform src="xsl/dir2archiveInboxFiles.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/{1}"/>
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="ignoredDir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="inboxFiles/*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/{1}">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Restore the saved inbox if it exists -->
      <map:match pattern="restoreInbox">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/inbox.saved">
            <!-- Delete modified inbox files -->
            <map:act type="copy-source" src="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/empty_inbox_report.xml"/>
            </map:act>
            <!-- Restore saved inbox contents -->
            <map:act type="copy-source" src="{cmc2:svcURL}/common/copy_dir?source={cmc2:gdir}/{global:ct}/inbox.saved&amp;target={cmc2:gdir}/{global:ct}/inbox">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/restore_inbox_report.xml"/>
            </map:act>
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/restore_inbox_report.xml"/>
            <!-- If the restore was successful remove the saved inbox. Otherwise send an email.-->
            <map:transform type="xslt-saxon" src="xsl/restore_inbox_report2continue.xsl">
              <map:parameter name="process" value="{cmc2:svcURL}/common/delete_dir/{cmc2:gdir}/{global:ct}/inbox.saved?delete-root=true"/>
            </map:transform>
            <map:transform type="sendmail"/>
            <map:transform type="include"/>
          </map:when>
          <map:otherwise>
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>

      <map:match pattern="moveInboxFilesToWorkFolder">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
          <map:parameter name="sort" value="lastmodified"/>
        </map:generate>
        <!-- Move limit files to work folder for fastlane processing -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/work"/>
          <map:parameter name="limit" value="{request-param:limit}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
