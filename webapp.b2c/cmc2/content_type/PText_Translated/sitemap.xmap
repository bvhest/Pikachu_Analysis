<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PText_Translated</ct>
      </global-variables>
    </map:component-configurations>
    <map:pipeline type="noncaching">
     <!--+
       |
       |  Here is the main pipeline that executes the batch processing.
       |  In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
       |  Input parameters: {1} = timestamp
       |
       |  This sitemap differs from regular content type sitemaps because the content type has both
       |  an export and an import pipeline. Both are combined in one runMain pipeline that is triggered
       |  both by the needsprocessing_flag and by a file coming back from translation that needs to be imported.
       |
       +-->

        <map:match pattern="runMain/*">
          <!-- Run the direct import -->
          <map:act type="copy-source" src="cocoon:/runMainDirectImport/{1}">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
          </map:act>
          <!-- Run the import -->
          <map:act type="copy-source" src="cocoon:/runMainImport/{1}">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
          </map:act>
          <!-- Run the CL_QUERY export -->
          <!--map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_QUERY">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/>
          </map:act-->
          <!-- Run the CL_CMC (Real) export -->
          <map:act type="copy-source" src="cocoon:/runMainExport/{1}?workflow=CL_CMC&amp;phase2=no">
            <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Real_Batches_report.xml"/>
          </map:act>
          <map:aggregate element="reports">
            <map:part src="{cmc2:gdir}/{global:ct}/temp/importBatches_report.xml"/>
            <map:part src="{cmc2:gdir}/{global:ct}/temp/directImportBatches_report.xml"/>
            <!--map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_QUERY_Batches_report.xml"/-->
            <map:part src="{cmc2:gdir}/{global:ct}/temp/export_CL_CMC_Real_Batches_report.xml"/>
          </map:aggregate>
          <map:serialize type="xml"/>
        </map:match>
      <!-- -->
      <map:match pattern="runMainExport/*">
        <!-- Reset flags before batching OCTLs for export -->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/translation/resetNeedsProcessingFlags/{global:ct}/{1}/export/{request-param:workflow}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/resetNeedsProcessingFlagsFor{request-param:xexporttype}{request-param:workflow}_report.xml"/>
        </map:act>      
        <!-- prepare batches and write to file (no need to create batches, as the number of files to be processed is very limited). -->
        <map:act type="copy-source" src="cocoon:/PostProcess/batch/translation/processExportBatches/{global:ct}/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/process_{request-param:workflow}_ExportBatches_report.xml"/>
        </map:act>
        <map:aggregate element="reports">        
          <map:part src="{cmc2:gdir}/{global:ct}/temp/resetNeedsProcessingFlagsFor{request-param:xexporttype}{request-param:workflow}_report.xml"/>        
          <map:part src="{cmc2:gdir}/{global:ct}/temp/process_{request-param:workflow}_ExportBatches_report.xml"/>
        </map:aggregate>
        <map:serialize type="xml"/>
      </map:match>
      <!-- 
         | TEST: http://localhost:8888/cmc2/content_type/PText_Translated/process/ar_AE/20130204112233/DUMMY/PP_HTS7202_12_20130204131433
         |-->
      <map:match pattern="process/*_*/*/*/**">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- create an entry record for the target octl -->
        <map:transform src="{cmc2:xslDir}/common/create_entry_record.xsl">
          <map:parameter name="o" value="{5}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="{1}_{2}"/>
          <map:parameter name="ts" value="{3}"/>
        </map:transform>
        <!-- include the content from the source octl -->
        <map:transform src="xsl/include-content.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
          <map:parameter name="o" value="{5}"/>
          <map:parameter name="ct" value="PText_Raw"/>
          <map:parameter name="l" value="none"/>
        </map:transform>
        <map:transform type="include"/>
        <!-- the actual processing -->
        <map:transform src="xsl/configuration.xsl"/>
        <map:transform src="xsl/process_entries.xsl"/>
        <!--do we need to add category?-->
        <map:transform src="xsl/objectAttributes.xsl">
          <map:parameter name="category" value="Package"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- 
         | TEST: http://localhost:8888/cmc2/content_type/PText_Translated/PostProcess/batch/translation/processExportBatches/PText_Translated/20130204112233
         |-->
      <map:match pattern="PostProcess/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/PostProcessEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- -->
      <map:match pattern="PostProcessEntryFile/**">
      <!-- Called for export only -->
        <map:generate src="{1}"/>
        <!-- do all post processing here -->
        <map:transform src="xsl/include-global.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}/"/>
          <map:parameter name="xmlDir" value="{cmc2:xmlDir}/"/>
          <map:parameter name="test" value="{1}/"/>
        </map:transform>
        <map:transform type="cinclude"/>

        <map:transform src="xsl/formatTranslations.xsl">
          <map:parameter name="workflow" value="{request-param:workflow}"/>
        </map:transform>
        <map:transform src="xsl/clean.xsl"/>
        <map:transform src="xsl/getRelatedLocalesForEntry.xsl"/>
        <map:transform type="sql">
          <map:parameter name="use-connection" value="oracleDbCMC"/>
          <map:parameter name="clob-encoding" value="UTF-8"/>
        </map:transform>
        <map:transform src="xsl/includeRelatedLocalesOnEntry.xsl"/>
        <!-- now save file -->
        <map:transform type="xslt-saxon" src="xsl/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="prefix" value="ex_"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/exportTranslationEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="runMainDirectImport/*">
          <map:act type="copy-source" src="cocoon:/DirectImport/batch/translation/processDirectBatches/{global:ct}/{1}/1">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processDirectImportBatches_report.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processDirectImportBatches_report.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="DirectImport/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/DirectImportEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="DirectImportEntryFile/**">
        <map:generate src="{1}"/>
        <!-- do all post processing here -->
        <!-- NB no need for globals at this point in time -->
        <map:transform src="xsl/clean.xsl"/>
        <map:transform src="xsl/reformatForDirect.xsl"/>
        <map:transform src="xsl/reformatForImport.xsl"/>
        <!-- now save file -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="prefix" value="di_"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/saveEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="runMainImport/*">      
        <!-- process CL_QUERY files first -->
        <map:act type="copy-source" src="{cmc2:svcURL}/store/importTranslation/batch/translation/processImportBatches/{global:ct}/{1}?excludeworkflow=CL_CMC">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processNonCL_CMCImportBatches_report.xml"/>
        </map:act>
        <!-- process non-CL_QUERY files -->      
        <map:act type="copy-source" src="{cmc2:svcURL}/store/importTranslation/batch/translation/processImportBatches/{global:ct}/{1}?includeworkflow=CL_CMC">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processCL_CMCImportBatches_report.xml"/>
        </map:act>
        <!-- aggregate reports -->
        <map:act type="copy-source" src="cocoon:/generateImportBatchesReport">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
        </map:act>
        <!-- archive files -->        
        <map:act type="copy-source" src="cocoon:/archiveFiles/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
        </map:act>
        <map:aggregate element="reports">
          <map:part src="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
          <map:part src="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
        </map:aggregate>      
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="generateImportBatchesReport">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/temp">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="^process.*ImportBatches_report.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="{cmc2:svcDir}/batch/translation/xsl/generateImportBatchesReport.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/temp"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- Archive only catalog.xml files with ts earlier than runts, and files processed by the import (i.e. in processImportBatches_report.xml) -->
      <map:match pattern="archiveFiles/*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*catalog.*\.xml"/>
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/generateArchiveFileList.xsl">
          <map:parameter name="processFilePath" value="{cmc2:gdir}/{global:ct}/temp/processImportBatches_report.xml"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>      
      <!-- -->
      </map:pipeline>
  </map:pipelines>
</map:sitemap>
