<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>RangeText_Raw</ct>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!-- Here is the main pipeline that exeutes the batch processing.
      In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
        Input parameters: {1} = timestamp
        Output Document: Result of writing the report document to file
      -->
      <map:match pattern="runMain/*">
      
        <map:act type="copy-source" src="cocoon:/checkForNewContent/{global:ct}/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/checkForNewContent_report.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/checkForNewContent_report.xml"/>
        <map:serialize type="xml"/>
      </map:match>      
      <!-- -->
      <map:match pattern="checkForNewContent/*/*">
        <!--Parameters:   {1} = content_type  {2} timestamp-->  
        <map:generate type="directory" src="{cmc2:gdir}/{1}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="timestamp" value="{2}"/>              
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processFiles/*/*">
        <!--Parameters:   {1} = content_type  {2} timestamp-->  
        
        <!--  RangeTextCatalog -->
        <map:act type="copy-source" src="cocoon:/writeCatalogDef/{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/writeCatalogDef_report.xml"/>
        </map:act>
        <map:act type="copy-source" src="{cmc2:svcURL}/processControl/runProcess/catalog_definition">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_catalog_definition_report.xml"/>
        </map:act>
        <map:act type="copy-source" src="{cmc2:svcURL}/processControl/runProcess/catalog_log">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/run_catalog_log_report.xml"/>
        </map:act>
        <!-- -->
        
        <map:act type="copy-source" src="cocoon:/PostProcess/batch/import/processFiles/{1}/{2}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processFiles_report.xml"/>
        </map:act>              
        <map:act type="copy-source" src="{cmc2:svcURL}/processControl/archiveFiles/inbox/{global:ct}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processFiles_report.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="reprocessExistingContent/*/*">
        <!--Parameters:   {1} = content_type  {2} timestamp-->  
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/sql_getExistingContent.xsl">
          <map:parameter name="svcURL" value="{cmc2:svcURL}"/>
        </map:transform>
        <map:call resource="sql"/>                            
        <map:transform src="xsl/cleanExistingContent.xsl"/>        
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{1}"/>
          <map:parameter name="l" value="na"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{1}/outbox"/>
          <map:parameter name="batchnumber" value="DUMMY"/>
        </map:transform>        
        <map:call resource="sql"/>                                    
        <map:transform type="xslt-saxon" src="{cmc2:svcDir}/batch/import/xsl/validate.xsl"/>           
        <map:transform type="xslt-saxon" src="xsl/sql_getAssignments.xsl">      
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>        
        <!-- derive secondaries-->
	      <map:transform src="xsl/secondaryDerivation.xsl"/>
        <map:transform src="{cmc2:xslDir}/common/placeholders_relations.xsl"/>
        <map:call resource="sql"/>        
	      <!-- invalidate octl if secondary relations can not be created-->
	      <map:transform src="{cmc2:xslDir}/common/validate_store_outputs.xsl"/>
	      <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>      
        <map:serialize type="xml"/>           
      </map:match>
      <!-- -->
      <map:match pattern="PostProcess/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/PostProcessEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="PostProcessEntryFile/**">
        <map:generate src="{1}"/>
        <!-- Get current OCTL relations for each RangeText -->
        <map:transform type="xslt-saxon" src="xsl/sql_getAssignments.xsl">      
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- derive secondaries-->
        <map:transform src="xsl/secondaryDerivation.xsl"/>
        <map:transform src="{cmc2:xslDir}/common/placeholders_relations.xsl"/>
        <map:call resource="sql"/>                  
	      <!-- invalidate octl if secondary relations can not be created-->
	      <map:transform src="{cmc2:xslDir}/common/validate_store_outputs.xsl"/>
	      <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>                                    
        <!-- save file -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="prefix" value="p_"/>
        </map:transform>
        <map:transform type="write-source"/>  
         <!-- write file to store --> 
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/deltaSaveEntryFile"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:transform type="cinclude"/>        
        <map:serialize type="xml"/>        
      </map:match>
      
      <map:match pattern="writeCatalogDef/*">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2writeCatalogDef.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="timestamp" value="{1}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/catalog_definition/inbox/"/>
          <map:parameter name="prefix" value="RangeTextCatalog"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:transform type="xslt-saxon" src="xsl/removeDuplicates.xsl"/>
        <map:transform type="write-source"/>
        <map:serialize type="xml"/>
      </map:match>
  
      <!-- -->
      <map:match pattern="writeCatalogDef/*/*/**.*">
        <map:generate src="{cmc2:gdir}/{1}/inbox/{3}.{4}"/>
        <!--map:transform type="stx" src="xsl/formatRangeTextCatalogDef.stx"/-->
        <map:transform type="xslt-saxon" src="xsl/formatRangeTextCatalogDef.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      
    <!-- -->
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
