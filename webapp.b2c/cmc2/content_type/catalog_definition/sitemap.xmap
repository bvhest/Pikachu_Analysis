<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">

  <map:resources>
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>catalog_definition</ct>
        <!-- Percentage of products that may be deleted without blocking -->
        <deletionsthreshold>10</deletionsthreshold>
        <!-- File name pattern for Prisma catalog files -->
        <prisma-catalog>LP_.+_ATG.*\.xml</prisma-catalog>
      </global-variables>
    </map:component-configurations>
    <map:pipeline type="noncaching">

      <!-- 
        Here is the main pipeline that executes the batch processing.
        In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
        
        Input parameters: {1} = timestamp
        Output Document: Result of writing the report document to file
      -->
      <map:match pattern="runMain/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <!-- FASTLANE processing -->
            <!-- process ProductMasterData file -->
            <map:act type="copy-source" src="cocoon:/processProductMasterDataFile?ts={1}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/ProductMasterDataImport_report.xml"/>
            </map:act>        
            <map:act type="copy-source" src="cocoon:/archiveProductMasterDataFile">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveProductMasterDataFile_report.xml"/>          
            </map:act>
            <map:act type="copy-source" src="{cmc2:svcURL}/processControl/archiveFiles/inbox/{global:ct}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
            </map:act>

            <!-- FASTLANE reporting -->
            <map:aggregate element="reports">
              <map:part src="{cmc2:gdir}/{global:ct}/temp/ProductMasterDataImport_report.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveProductMasterDataFile_report.xml"/> 
              <map:part src="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>         
            </map:aggregate>  
          </map:when>
          <map:otherwise>
            <!-- BATCH processing -->
            <map:select type="parameter">
               <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
               <map:when test="">
               <!-- NORMAL CATALOG DEFINITION RUN: process all files in the inbox -->
                  <!-- merge LCB files -->
                  <map:act type="copy-source" src="cocoon:/mergeLCBFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/catalog_objects_lcb.xml"/>
                  </map:act>        
                  <!-- process merged file -->
                  <map:act type="copy-source" src="cocoon:/processMergedLCBFile?ts={1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/LCBImport_report.xml"/>
                  </map:act>
                  <!-- archive LCB files -->
                  <map:act type="copy-source" src="cocoon:/archiveLCBFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveLCBFiles_report.xml"/>
                  </map:act>
                  <!-- Price management: merge CCB files -->
                  <map:act type="copy-source" src="cocoon:/mergeCCBFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/catalog_objects_pikachu_full.xml"/>
                  </map:act>
                  <!-- process merged file -->
                  <map:act type="copy-source" src="cocoon:/processMergedCCBFile?ts={1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/CCBImport_report.xml"/>
                  </map:act> 
                  <!-- archive CCB files -->
                  <map:act type="copy-source" src="cocoon:/archiveCCBFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveCCBFiles_report.xml"/>
                  </map:act>             
                  <!-- process ProductMasterData file -->
                  <map:act type="copy-source" src="cocoon:/processProductMasterDataFile?ts={1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/ProductMasterDataImport_report.xml"/>
                  </map:act>        
                  <!-- archive CARE master file -->
                  <map:act type="copy-source" src="cocoon:/archiveProductMasterDataFile">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveProductMasterDataFile_report.xml"/>          
                  </map:act>
                  <!-- process CARE master file -->
                  <map:act type="copy-source" src="cocoon:/processCareMasterFile?ts={1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/CareMasterImport_report.xml"/>
                  </map:act>
                  <!-- archive CARE master file -->
                  <map:act type="copy-source" src="cocoon:/archiveCareMasterFile">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archiveCareMasterFile_report.xml"/>
                  </map:act>
                  <!-- merge Prisma files -->
                  <map:act type="copy-source" src="cocoon:/mergePrismaFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/catalog_objects_prisma.xml"/>
                  </map:act>
                  <!-- process merged file -->
                  <map:act type="copy-source" src="cocoon:/processMergedPrismaFile?ts={1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/PrismaImport_report.xml"/>
                  </map:act>
                  <!-- archive LCB files -->
                  <map:act type="copy-source" src="cocoon:/archivePrismaFiles">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archivePrismaFiles_report.xml"/>
                  </map:act>
                  <!-- process remaining catalog_definition files -->
                  <map:act type="copy-source" src="cocoon:/PostProcess/batch/import/processFiles/{global:ct}/{1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processFiles_report.xml"/>
                  </map:act>
               </map:when>
               <map:otherwise>
               <!-- CATALOG DEFINITION IS CALLED FROM ANOTHER CONTENT TYPE: only process specific files -->
                  <map:act type="copy-source" src="cocoon:/PostProcess/batch/import/processFiles/{global:ct}/{1}">
                     <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processFile_report.xml"/>
                  </map:act>
               </map:otherwise>
            </map:select>
            
            <!-- archiving action should decide what to archive based on calling CT -->
            <map:act type="copy-source" src="{cmc2:svcURL}/processControl/archiveFiles/inbox/{global:ct}">
              <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
            </map:act>
            
            <!-- BATCH reporting -->
            <map:select type="parameter">
               <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
               <map:when test="">
                  <map:aggregate element="reports">
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/LCBImport_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveLCBFiles_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/CCBImport_report.xml"/>          
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveCCBFiles_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/ProductMasterDataImport_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveProductMasterDataFile_report.xml"/>          
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/CareMasterImport_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archiveCareMasterFile_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/PrismaImport_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archivePrismaFiles_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/processFiles_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
                  </map:aggregate>
               </map:when>
               <map:otherwise>
               <!-- CATALOG DEFINITION IS CALLED FROM ANOTHER CONTENT TYPE: only process specific files -->
                  <map:aggregate element="reports">
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/processFile_report.xml"/>
                    <map:part src="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
                  </map:aggregate>
               </map:otherwise>
            </map:select>
          </map:otherwise>
        </map:select>
        
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | Merge all the latest LCB import files (marketing, care, ...) into one 'stream'
          +-->
      <map:match pattern="mergeLCBFiles">
        <!--create one input file from LCB files in inbox -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="lcb.*\.xml$"/>
        </map:generate>        
        <!-- Read the latest file only and archive the others -->
        <map:transform src="xsl/include.xsl">
          <map:parameter name="sourcefiles" value="LCB"/>
        </map:transform>        
        <map:transform type="cinclude"/>       
        <!-- Merge all catalogs into one catalogs element -->
        <map:transform src="xsl/merge.xsl">
          <map:parameter name="sourcefiles" value="LCB"/>
        </map:transform>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="readFile/*">
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} filename
      -->
      <map:match pattern="archiveFile/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- Move file from inbox to archive -->
        <map:transform src="{cmc2:xslDir}/common/shell_moveFile.xsl">
          <map:parameter name="source" value="{1}"/>
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/archive"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processMergedLCBFile">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="catalog_objects_lcb.xml"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/temp"/>
          <map:parameter name="destination" value="catalog_objects_lcb.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processCCBFile">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="pikachu_full.*\.xml$"/>
        </map:generate>
        <map:transform src="xsl/include.xsl">
          <map:parameter name="sourcefiles" value="CCB"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processCCBFile_sub/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="{1}"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="destination" value="catalog_objects_ccb.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
          <map:parameter name="runmode" value="{request-param:runmode}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>      
      <!-- -->
      <map:match pattern="processProductMasterDataFile">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="ProductMasterDataCatalog.*\.xml$"/>
        </map:generate>
        <map:transform src="xsl/include.xsl">
          <map:parameter name="sourcefiles" value="ProductMasterDataCatalog"/>
          <map:parameter name="runmode" value="{request-param:runmode}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--
        {1} = file name
      -->
      <map:match pattern="processProductMasterDataFile_sub/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="{1}"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="destination" value="catalog_objects_productmasterdata.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
          <map:parameter name="runmode" value="{request-param:runmode}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>      
      <!-- -->      
      <map:match pattern="processCareMasterFile">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="CARE_Master_Catalog_def.xml"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="destination" value="catalog_objects_care_master.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | Merge the latest Prisma import files (for each country/catalog type) into one 'stream'
          +-->
      <map:match pattern="mergePrismaFiles">
        <!--create one input file from LCB files in inbox -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="{global:prisma-catalog}"/>
        </map:generate>
        <!-- Read the latest files only and archive the others -->
        <map:transform src="xsl/readLatestPrismaFiles.xsl">
          <map:parameter name="file-pattern" value="{global:prisma-catalog}"/>
        </map:transform>
        <map:transform type="include"/>
        <!-- Merge all catalogs into one catalogs element -->
        <map:transform src="xsl/mergePrismaCatalogs.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="processMergedPrismaFile">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="catalog_objects_prisma.xml"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/temp"/>
          <!-- Prisma catalog is in CCB format (xUCDM-catalog) -->
          <map:parameter name="destination" value="catalog_objects_ccb.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
        </map:transform>
        <map:transform type="include"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="transformXMLToExternalTable/*">
        <map:act type="copy-source" src="cocoon:/transformXMLToExternalTable_sub/{1}">
          <map:parameter name="dest" value="{cmc2:oradata_extDir}/catalogobjects/{request-param:destination}"/>
          <!--map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/inbox/test.xml"/-->
        </map:act>
        <!--map:generate src="{cmc2:gdir}/{global:ct}/inbox/test.xml"/-->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="transformXMLToExternalTable_sub/*">
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:destination}"/>
          <map:when test="catalog_objects_productmasterdata.dat">
            <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
            <map:transform src="xsl/transformXMLToExternalTable.xsl">
              <map:parameter name="customer_id" value=""/>
			  <map:parameter name="runmode" value="{request-param:runmode}"/>
            </map:transform>
          </map:when>          
          <map:when test="catalog_objects_care_master.dat">
            <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{1}"/>
            <map:transform src="xsl/transformXMLToExternalTable.xsl">
              <map:parameter name="customer_id" value="CARE"/>
			  <map:parameter name="runmode" value="{request-param:runmode}"/>
            </map:transform>
          </map:when>
          <map:when test="catalog_objects_ccb.dat">
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/{1}"/>
            <map:transform src="xsl/transformXMLToExternalTable.xsl">
				<map:parameter name="runmode" value="{request-param:runmode}"/>
            </map:transform>
          </map:when>
          <map:when test="catalog_objects_lcb.dat">
            <map:generate src="{cmc2:gdir}/{global:ct}/temp/{1}"/>
            <map:transform src="xsl/transformXMLToExternalTable.xsl">
				<map:parameter name="runmode" value="{request-param:runmode}"/>
            </map:transform>
          </map:when>
        </map:select>
        <!-- serialize as .dat external table file -->
		<map:call resource="sql" />
        <map:serialize type="text"/>
      </map:match>

      <!--
        Merge the external catalog object table to the real table.
        
        Request params:
        destination   external table file
      -->
      <map:match pattern="mergeExternalTable">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/mergeExternalTable.xsl">
          <map:parameter name="destination" value="{request-param:destination}"/>
          <map:parameter name="runmode" value="{request-param:runmode}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--
        Merge the external catalog object table to the real table for one customer id / country (i.e. one catalog.)
        
        {1} customer id (i.e. catalog type)
        {2} country
        
        Request params:
        destination   external table file
      -->
      <map:match pattern="mergeExternalTable/*/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/mergeExternalTable.xsl">
          <map:parameter name="runmode" value="{request-param:runmode}"/>
          <map:parameter name="destination" value="{request-param:destination}"/>
          <map:parameter name="customer_id" value="{1}"/>
          <map:parameter name="country" value="{2}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- -->
      <map:match pattern="updateCLE/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/sql_updateCLE.xsl">
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
          <map:parameter name="destination" value="{request-param:destination}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="updateCHANNEL_PARAM/*">
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/{1}"/>
        <map:transform src="xsl/sql_updateCHANNEL_PARAM.xsl">
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
          <map:parameter name="destination" value="{request-param:destination}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!--+
          | Check for number of deleted products and merge if within bounds.
          | Otherwise stop and send warning email.
          |
          | Request params:
          |  destination    external table file
          +-->
      <map:match pattern="processDeletionsAndMerge">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        
        <map:transform type="xslt-saxon" src="xsl/sql_getCatalogInfo.xsl">
          <map:parameter name="destination" value="{request-param:destination}"/>
        </map:transform>
        <map:call resource="sql"/>
                      
        <map:transform type="xslt-saxon" src="xsl/processCatalogs.xsl">
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
          <map:parameter name="deletionsthreshold" value="{global:deletionsthreshold}"/>
        </map:transform>
        
        <map:transform type="xslt-saxon" src="xsl/processDeletionsAndMerge.xsl">
          <map:parameter name="destination" value="{request-param:destination}"/>
          <map:parameter name="system" value="{cmc2:intSystemId}"/>
        </map:transform>
        
        <!-- Process catalogs that are OK -->
        <map:transform type="include"/>
        
        <!-- Send email for catalogs that are not OK -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/prepare-email.xsl">
          <map:parameter name="email-to" value="{cmc2:emailRecipient}"/>
          <map:parameter name="email-from" value="{cmc2:emailSender}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        
        <map:transform type="xslt-saxon" src="xsl/processDeletionsAndMerge_report.xsl"/>
        
        <map:serialize type="xml"/>        
      </map:match>

      <!--+
          | {1} catalog customer id
          | {2} country
          |
          | Request params:
          |  timestamp
          |  destination
          +-->
      <map:match pattern="doDeletions/*/*">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>      
        <map:transform src="xsl/sql_createDeletions.xsl">
          <map:parameter name="customer_id" value="{1}"/>
          <map:parameter name="country" value="{2}"/>
          <map:parameter name="destination" value="{request-param:destination}"/>
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="selectUpdates/*">
        <!-- select updated records -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/sql_selectUpdates.xsl">
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
          <map:parameter name="destination" value="{request-param:destination}"/>
        </map:transform>
        <map:call resource="sql"/>
       <!--+ FASTLANE 
           | Include call to the DB stored procedure "PCK_CATALOG.create_catalog_placeholders" for the updated objects. 
           | This call is normally executed from the process catalog_log, which is not needed anymore for 
           | FastLane processing.
           |
           | OTHERWISE
           | Distinguish between a batch-run (without filefilter) where placeholder creation is needed for 
           | new objects in the country catalogs and a call from an other process that needs placeholder 
           | creation, like a Packaging Project (call from PP_Configuration).
           +-->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:runmode}"/>
          <map:when test="FASTLANE">
            <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/escape_sql_ns.xsl"/>
            <map:transform src="xsl/sql_creCatalogPlaceholders.xsl">
              <map:parameter name="timestamp" value="{request-param:timestamp}"/>
              <map:parameter name="destination" value="{request-param:destination}"/>
            </map:transform>
            <map:call resource="sql"/>
            <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
            <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/restore_sql_ns.xsl"/>
          </map:when>
        </map:select>
        <map:transform src="xsl/createEntryFile.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="none"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/temp"/>
          <map:parameter name="filestem" value="entry_"/>
          <map:parameter name="batchsize" value="2000000"/>
          <map:parameter name="timestamp" value="{request-param:timestamp}"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/saveEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveLCBFiles">
        <!-- Archive the LCB files that have been processed -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="lcb.*\.xml$"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="archiveCCBFile">
        <!-- Archive the CCB files that have been processed -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="pikachu_full.*\.xml"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="archivePrismaFiles">
        <!-- Archive the Prisma files that have been processed -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="({global:prisma-catalog})|(.*_prisma\.xml)"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="{cmc2:gdir}/{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="{cmc2:gdir}/{global:ct}/processed"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="archiveProductMasterDataFile">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="ProductMasterDataCatalog.*\.xml"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->      
      <map:match pattern="archiveCareMasterFile">
        <!-- Delete the LCB files that have been processed; they take up too much space and are available anyway on CCR -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="CARE_Master_Catalog_def.xml"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="PostProcess/**">
        <map:generate src="{cmc2:svcURL}/{1}"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/PostProcessEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>

      <!-- First store the data on the FileSystem, then in the database. That way the DB always contains 
         + the 'truth'.
         +-->
      <map:match pattern="PostProcessEntryFile/**">
        <map:act type="copy-source" src="cocoon:/storeTableData/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/saveData2FS_report.xml"/>
        </map:act>
        <map:act type="copy-source" src="{cmc2:svcURL}/store/importEntryFile/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/saveData2DB_report.xml"/>
        </map:act>

        <!-- when called with filefilter, then call stored procedure to create the placeholders: -->
        <map:select type="parameter">
          <map:parameter name="parameter-selector-test" value="{request-param:fileFilter}"/>
          <map:when test="">
          </map:when>
          <map:otherwise>
          <map:act type="copy-source" src="cocoon:/createPlaceholders/{1}">
             <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createPlaceholders_report.xml"/>
          </map:act>
          </map:otherwise>
        </map:select>

        <map:aggregate element="reports">
           <map:part src="{cmc2:gdir}/{global:ct}/temp/saveData2FS_report.xml"/>
           <map:part src="{cmc2:gdir}/{global:ct}/temp/saveData2DB_report.xml"/>
        </map:aggregate>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="storeTableData/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/splitEntryFile.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/temp"/>
          <map:parameter name="filestem" value="entry_"/>
          <map:parameter name="batchsize" value="2000"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="cocoon:/PostProcessEntryFile_sub"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="createPlaceholders/**">
         <map:generate src="{1}"/>
         <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/escape_sql_ns.xsl"/>
         <map:transform src="xsl/sql_creFilteredCatalogPlaceholders.xsl">
           <map:parameter name="timestamp" value="{request-param:timestamp}"/>
         </map:transform>
         <map:call resource="sql"/>
 
         <map:transform src="{cmc2:xslDir}/common/cleanup-sql.xsl"/>
         <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/restore_sql_ns.xsl"/>
         
         <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="PostProcessEntryFile_sub/**">
        <map:generate src="{1}"/>
        <map:transform src="xsl/sql_process.xsl"/>
        <map:transform src="{cmc2:xslDir}/common/writeEntry.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="prefix" value="sql_"/>
        </map:transform>
        <map:transform type="write-source"/>
        <map:transform src="{cmc2:xslDir}/common/include_writeSource2process.xsl">
          <map:parameter name="process" value="{cmc2:svcURL}/store/execProcessSQLEntryFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- Price management: merge CCB files -->
      <map:match pattern="mergeCCBFiles">
        <!--create one input file from LCB files in inbox -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox" label="step1">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="pikachu_full.*\.xml$"/>
        </map:generate>
        <!-- Read the latest file only and archive the others -->
        <map:transform src="xsl/include.xsl">
          <map:parameter name="sourcefiles" value="CCB"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <!-- Merge all catalogs into one catalogs element -->
        <map:transform src="xsl/merge.xsl">
          <map:parameter name="sourcefiles" value="CCB"/>
        </map:transform>  
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="processMergedCCBFile">
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <map:transform src="xsl/include2transformXML.xsl">
          <map:parameter name="source" value="catalog_objects_pikachu_full.xml"/>
          <map:parameter name="sourcedir" value="{cmc2:gdir}/{global:ct}/temp"/>
          <map:parameter name="destination" value="catalog_objects_ccb.dat"/>
          <map:parameter name="ts" value="{request-param:ts}"/>
        </map:transform>       
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="archiveCCBFiles">
        <!-- Delete the CCB files that have been processed; they take up too much space and are available anyway on CCR -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value="pikachu_full.*\.xml$"/>
        </map:generate>
        <map:transform src="../../service/processControl/xsl/dir2shell_delete.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/inbox"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
    </map:pipeline>
  </map:pipelines>
</map:sitemap>
