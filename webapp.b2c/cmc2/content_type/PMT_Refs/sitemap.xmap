<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
  <map:resources>
    <!-- the sql resource provides a central place to edit database details -->
    <map:resource name="sql">
      <map:transform type="sql">
        <map:parameter name="use-connection" value="oracleDbCMC"/>
        <map:parameter name="clob-encoding" value="UTF-8"/>
      </map:transform>
    </map:resource>
  </map:resources>
  <map:components>
    <map:transformers default="xslt-saxon">
      <map:transformer name="shell" src="org.apache.cocoon.transformation.FileActionsTransformer"/>
      <map:transformer name="sendmail" src="org.apache.cocoon.mail.transformation.SendMailTransformer">
        <smtphost>nlvg020.gdc1.ce.philips.com</smtphost>
        <smtpport>25</smtpport>
      </map:transformer>
    </map:transformers>
  </map:components>
  <!-- Database settings
  SET DEFINE OFF;
Insert into CONTENT_TYPES
   (CONTENT_TYPE, REFERENCE_NAME, DISPLAY_NAME, SECONDARY_DERIVATION, DESCRIPTION, 
    STARTEXEC, ENDEXEC, PROCESS_TYPE, MACHINEAFFINITY, ID, 
    PIPELINE)
 Values
   ('PMT_Refs', 'PMT_Refs', 'PMT Referencess', 0, 'import', 
    NULL, NULL, NULL, 'deprecated column: use machineaffinity in content_type_schedule-table.', NULL, 
    NULL);

Insert into CONTENT_TYPE_SCHEDULE
   (ID, CONTENT_TYPE, STARTEXEC, ENDEXEC, MACHINEAFFINITY, 
    PIPELINE, DESCRIPTION, SEQUENCE)
 Values
   ('652', 'PMT_Refs', TO_DATE('05/12/2012 05:09:43', 'MM/DD/YYYY HH24:MI:SS'), TO_DATE('05/12/2012 05:38:03', 'MM/DD/YYYY HH24:MI:SS'), 'manual(10)(SAT)(SUN)(MON)(TUE)(WED)(THU)(FRI)', 
    'cmc2/content_type/PMT_Refs?overrideCheck=no', 'Import', 462);
COMMIT;
     -->
  <!-- -->
  <map:pipelines>
    <map:component-configurations>
      <global-variables>
        <ct>PMT_Refs</ct>
        <threshold>500</threshold>
        <deletion-threshold>100</deletion-threshold>
      </global-variables>
    </map:component-configurations>
    <!-- -->
    <map:pipeline type="noncaching">
      <!--+
           Here is the main pipeline that executes the batch processing.
           In invoking the pipeline the execution timestamp is passed as a parameter along with ct.
           Input parameters: {1} = timestamp
           Request parameters: limit (x, integer value that defines the number of inbox files to process during the run)
           Output Document: Result of writing the report document to file
          +-->
      <map:match pattern="runMain/*">
         <!-- step 1 - Compare full feed: set accessories to status deleted in the database when not in the feed. 
                       and remove accessorie-files from the cache that have status deleted in the database. -->         
         <map:act type="copy-source" src="cocoon:/checkDeletedAccessories/{1}">
           <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/log_checkDeletedAccessories.xml"/>
         </map:act>
         
         <!-- step 2 - Compare full feed: remove unchanged accessories and process the changed accessories. -->         
         <map:act type="copy-source" src="cocoon:/checkContinueProcessing/{1}">
           <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/log_checkContinueProcessing.xml"/>
         </map:act>

         <map:aggregate element="reports">
           <map:part src="{cmc2:gdir}/{global:ct}/temp/log_checkDeletedAccessories.xml"/>
           <map:part src="{cmc2:gdir}/{global:ct}/temp/log_checkContinueProcessing.xml"/>
         </map:aggregate>  
         <map:transform type="xslt-saxon" src="xsl/cleanReport.xsl">
           <map:parameter name="ts" value="{1}"/>
         </map:transform>
         
         <map:serialize type="xml"/>
      </map:match>

      <!--+ Check if number of deleted accessories is below the threshold:
          |
          | parameters:
          | {1} timestamp
          +-->      
      <map:match pattern="checkDeletedAccessories/*">
        <map:aggregate element="root">
          <map:part src="cocoon:/readCache"/>
          <map:part src="cocoon:/readInbox"/>
        </map:aggregate>
        
        <map:transform type="xslt-saxon" src="xsl/dir2deleteProducts.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:transform type="xslt-saxon" src="xsl/checkDeletions.xsl">
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
          <map:parameter name="threshold" value="{global:deletion-threshold}"/>
        </map:transform>
        <!-- if there are too many deletions, the include triggers sending an e-mail,
           | else it continues processing the changed accessories.
           | -->
        <map:transform type="include"/>

        <!-- These transformations only have an effect if the number of deletions 
           | is less than the threshold.
           |-->
        <map:transform type="xslt-saxon" src="xsl/sql_setDeletedProductRelations.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="locale" value="master_global"/>
        </map:transform>       
        <map:call resource="sql"/>       

        <!-- Remove deleted accessories from the cache (housekeeping) -->
        <map:transform src="xsl/dir2shell_delete.xsl">
          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/cache"/>
        </map:transform>
        <map:transform type="shell"/>

        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="checkContinueProcessing/*">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/logs/ErrorReportDeletions_{1}.xml">
               <!-- Error report exists: stop further processing -->
               <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:when>
          <map:otherwise>
               <!-- step 2 - Compare full feed: remove files from the inbox when content has not changed. -->         
               <map:act type="copy-source" src="cocoon:/removeUnchangedAccessories">
                 <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/log_removeUnchangedAccessories.xml"/>
               </map:act>
              
               <!-- step 3 - Process changed accessories. -->         
               <map:act type="copy-source" src="cocoon:/checkChangedAccessories/{1}">
                 <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/log_processChangedAccessories.xml"/>
               </map:act>

               <map:aggregate element="reports">
                 <map:part src="{cmc2:gdir}/{global:ct}/temp/log_removeUnchangedAccessories.xml"/>
                 <map:part src="{cmc2:gdir}/{global:ct}/temp/log_processChangedAccessories.xml"/>
               </map:aggregate>  
          </map:otherwise>
        </map:select>
      
         <map:serialize type="xml"/>
      </map:match>

      <!-- Compare the contents of the inbox with the cache and remove all 
         | unchanged files from the inbox. 
         |-->
      <map:match pattern="removeUnchangedAccessories">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="filterFile"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="filterFile/*.xml">
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
             <map:transform type="xslt-saxon" src="xsl/compareCachedContent.xsl"/>
             <map:transform type="xslt-saxon" src="xsl/removeFile.xsl">
                <map:parameter name="source" value="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
             </map:transform>
             <map:transform type="shell"/>
          </map:when>
          <map:otherwise>
            <!-- leave file it will be moved to cache during archive-->
            <map:generate src="{cmc2:xmlDir}/empty.xml"/>
          </map:otherwise>
        </map:select>
        <map:serialize type="xml"/>
      </map:match>
      <!--+ Check if number of changed accessories is below the threshold:
          |
          | parameters:
          | {1} timestamp
          +-->      
      <map:match pattern="checkChangedAccessories/*">
        <!-- check that there are not too many files waiting to be processed -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/checkFileCount.xsl">
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="overrideCheck" value="{request-param:overrideCheck}"/>
		  <map:parameter name="content_type" value="{global:ct}"/>
		  <map:parameter name="svcURL" value="{cmc2:svcURL}"/> 
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="performSecondaryCheck/*">
        <!-- there appear to be too many files waiting to be processed.
             perform a secondary check on the files remaining in the inbox -->
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:transform type="xslt-saxon" src="xsl/include_dir2process.xsl">
          <map:parameter name="process" value="performSecondaryComparison"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:transform type="xslt-saxon" src="xsl/secondaryCheckFileCount.xsl">
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="ts" value="{1}"/>
        </map:transform>
        <map:transform type="cinclude"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="performSecondaryComparison/*.xml">
        <!-- check the remaining files but ignore certain content e.g. ProductReferences -->
        <map:select type="resource-exists">
          <map:when test="{cmc2:gdir}/{global:ct}/cache/{1}.xml">
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
              <map:part src="{cmc2:gdir}/{global:ct}/cache/{1}.xml"/>
            </map:aggregate>
          </map:when>
          <map:otherwise>
            <map:aggregate element="Files2Compare">
              <map:part src="{cmc2:gdir}/{global:ct}/inbox/{1}.xml"/>
            </map:aggregate>
          </map:otherwise>
        </map:select>
        <map:transform type="xslt-saxon" src="xsl/compareMeaningfulCachedContent.xsl"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="stop">
        <!-- too many changed files in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReport.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:threshold}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmail.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="go/*">
        <!-- http://localhost:8888/cmc2/service/batch/import/createBatches/PMT_Refs/20120514090000
          -->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/createBatches/{global:ct}/{1}">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/createBatches_report.xml"/>
        </map:act>
        
        <!-- localhost:8888/cmc2/service/batch/import/processBatches/PMT_Refs/20120514090000?reload=false&storeURL=cocoon://cmc2/service/store/saveEntryFile?createPlaceholder=y
          -->
        <map:act type="copy-source" src="{cmc2:svcURL}/batch/import/processBatches/{global:ct}/{1}?reload=false&amp;storeURL={cmc2:svcURL}/store/saveEntryFile?createPlaceholder=y">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        </map:act>
        
        <map:act type="copy-source" src="cocoon:/archiveFiles">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/archive_report.xml"/>
        </map:act>
        
        <!-- -->
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/processBatches_report.xml"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- 
         | TEST: http://localhost:8888/cmc2/content_type/PMT_Refs/process/1/20120514090000/32PDL7906H_12.xml?reload=false
         -->
      <map:match pattern="process/*/*/**">
        <!-- {1} batchnumber {2} timestamp {3} filename -->
        <map:generate src="{cmc2:gdir}/{global:ct}/inbox/{3}"/>
        <map:transform type="xslt-saxon" src="xsl/create_entry_records.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
          <map:parameter name="l" value="master_global"/>
          <map:parameter name="batchnumber" value="{1}"/>
          <map:parameter name="ts" value="{2}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/outbox"/>
          <map:parameter name="reload" value="{request-param:reload}"/>
        </map:transform>
        <map:call resource="sql"/>
        <!-- the default processing -->
        <map:transform type="xslt-saxon" src="{cmc2:xslDir}/common/productAttributes.xsl"/>

        <!-- Create Object_Relations based on the file contents.
           | Nb. these relations are 'losely coupled', i.e. the 'performer' need not be available (yet) in the database.
           | Nb. the relation from accessory to 'performer' products is reversed in this step.
           -->
        <map:transform type="xslt-saxon" src="xsl/sql_createObjRelations.xsl">
          <map:parameter name="ts" value="{2}"/>
        </map:transform>
        <!-- only create the relations when all other sql is executed (in the store layer) to 
             prevent discrepancies between database and filestore in case of processing errors -->
        <map:serialize type="xml"/>
      </map:match>
      
      <!-- -->
      <map:match pattern="archiveFiles">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*"/>
        </map:generate>
        <!-- Delete the batch_ files; they are not needed and take up too much space on the filesystem -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/cache"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="file__**">
        <map:read src="{1}" mime-type="text/xml"/>
      </map:match>
      
      <!--+
          | Read the inbox contents for a locale
          |
          | {1} locale
          +-->
      <map:match pattern="readInbox">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>
      
      <!--  -->
      <map:match pattern="abortDeletions/*">
        <!-- too many missing files (deletions) in the inbox -->
        <map:generate src="{cmc2:xmlDir}/empty.xml"/>
        <!-- generate report -->
        <map:transform type="xslt-saxon" src="xsl/formatErrorReportDeletions.xsl">
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}"/>
          <map:parameter name="threshold" value="{global:deletion-threshold}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
        </map:transform>
        <map:transform type="write-source"/>
        <!-- send warning email -->
        <map:transform type="xslt-saxon" src="xsl/formatWarningEmailDeletions.xsl">
          <map:parameter name="timestamp" value="{date:yyyy-MM-dd}T{date:HH:mm:ss}"/>
          <map:parameter name="server" value="{cmc2:cocoonServer}"/>
          <map:parameter name="sender" value="{cmc2:emailSender}"/>
          <map:parameter name="recipient" value="{cmc2:emailRecipient}"/>
          <map:parameter name="filecount" value="{request-param:filecount}"/>
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:transform type="sendmail"/>
        <map:serialize type="xml"/>
      </map:match>
      
      <map:match pattern="moveInboxFilesToWorkFolder">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/inbox">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
          <map:parameter name="include" value=".*\.xml"/>
          <map:parameter name="sort" value="lastmodified"/>
        </map:generate>
        <!-- Move limit files to work folder for fastlane processing -->
        <map:transform src="xsl/dir2shell_move.xsl">
          <map:parameter name="sourceDir" value="../{global:gdir}{global:ct}/inbox"/>
          <map:parameter name="targetDir" value="../{global:gdir}{global:ct}/work"/>
          <map:parameter name="limit" value="{request-param:limit}"/>
        </map:transform>
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>

      <!--+
          | Housekeeping; remove files from cache that represent objects with the status deleted.
          |
          | {1} timestamp
          +-->
      <!-- -->
      <map:match pattern="deleteInvalidCacheFiles/*">
        <map:act type="copy-source" src="cocoon:/readCache">
          <map:parameter name="dest" value="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        </map:act>
        <map:generate src="{cmc2:gdir}/{global:ct}/temp/cache.xml"/>
        <map:transform type="xslt-saxon" src="xsl/sql_getDeletedProductRelations.xsl">
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <map:call resource="sql"/>
        <map:transform type="xslt-saxon" src="xsl/identifyInvalidCacheFiles.xsl">
          <map:parameter name="dir" value="{cmc2:gdir}/{global:ct}/cache"/>
          <map:parameter name="ts" value="{1}"/>
          <map:parameter name="ct" value="{global:ct}"/>
        </map:transform>
        <!-- delete -->     
        <map:transform type="shell"/>
        <map:serialize type="xml"/>
      </map:match>
      <!-- -->
      <map:match pattern="readCache">
        <map:generate type="directory" src="{cmc2:gdir}/{global:ct}/cache">
          <map:parameter name="dateFormat" value="yyyy-MM-dd HH:mm"/>
          <map:parameter name="depth" value="1"/>
        </map:generate>
        <map:serialize type="xml"/>
      </map:match>
    
      <map:match pattern="tstMain/*">
         <map:aggregate element="reports">
           <map:part src="{cmc2:gdir}/{global:ct}/temp/log_clearDeletedAccessories.xml"/>
           <map:part src="{cmc2:gdir}/{global:ct}/temp/log_clearUnchangedAccessories.xml"/>
           <map:part src="{cmc2:gdir}/{global:ct}/temp/log_processChangedAccessories.xml"/>
         </map:aggregate>  
         <map:transform type="xslt-saxon" src="xsl/cleanReport.xsl">
           <map:parameter name="ts" value="{1}"/>
         </map:transform>
         <map:serialize type="xml"/>
      </map:match>

    </map:pipeline>
  </map:pipelines>
</map:sitemap>
